
---------------------------------------------------------------------------------------------------------------
SRC/MAIN/JAVA

com.vanguard.corp.ics.portal.config
	PortalSDKConfiguration


package com.vanguard.corp.ics.portal.config;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Primary;

@Configuration
@Primary
public class PortalSDKConfiguration {

	@Value("$sma-data-transformer.webservice-{portal.products.endpoint}")
	private String portalProductEndpoint;

	@Value("$sma-data-transformer.webservice-{portal.references.endpoint}")
	private String portalReferenceEndpoint;

	@Value("$sma-data-transformer.webservice-{portal.tokenURL}")
	private String tokenURL;

	@Value("$sma-data-transformer.webservice-{portal.username}")
	private String portalUsername;

	@Value("$sma-data-transformer.webservice-{portal.password}")
	private String portalPassword;

	@Value("$sma-data-transformer.webservice-{portal.retryCount}")
	private int retryCount;

	public String getPortalProductEndpoint() {
		return portalProductEndpoint;
	}

	public void setPortalProductEndpoint(String portalProductEndpoint) {
		this.portalProductEndpoint = portalProductEndpoint;
	}

	public String getPortalReferenceEndpoint() {
		return portalReferenceEndpoint;
	}

	public void setPortalReferenceEndpoint(String portalReferenceEndpoint) {
		this.portalReferenceEndpoint = portalReferenceEndpoint;
	}

	public String getTokenURL() {
		return tokenURL;
	}

	public void setTokenURL(String tokenURL) {
		this.tokenURL = tokenURL;
	}

	public String getPortalUsername() {
		return portalUsername;
	}

	public void setPortalUsername(String portalUsername) {
		this.portalUsername = portalUsername;
	}

	public String getPortalPassword() {
		return portalPassword;
	}

	public void setPortalPassword(String portalPassword) {
		this.portalPassword = portalPassword;
	}

	public int getRetryCount() {
		return retryCount;
	}

	public void setRetryCount(int retryCount) {
		this.retryCount = retryCount;
	}

}

com.vanguard.corp.ics.sdt.dao.api.constants
		RestServiceConstants

package com.vanguard.corp.ics.sdt.dao.api.constants;

public interface RestServiceConstants {

	public static final String PRODUCT_PORTAL_INCEPTION_DATE_FORMAT = "dd-MMM-yyyy";
}



com.vanguard.corp.ics.sdt.dao.api.domain.portal(currency,investmentgroup,portalproduct)
com.vanguard.corp.ics.sdt.dao.api.portal
	ProductPortalService

package com.vanguard.corp.ics.sdt.dao.api.portal;

import java.util.List;

import javax.servlet.http.HttpServletRequest;

import com.vanguard.corp.ics.sdt.dao.api.domain.portal.Currency;
import com.vanguard.corp.ics.sdt.dao.api.domain.portal.InvestmentGroup;
import com.vanguard.corp.ics.sdt.dao.api.domain.portal.PortalProduct;

public interface ProductPortalService {

	public List<PortalProduct> getProducts(HttpServletRequest request);
	
	public PortalProduct getProduct(List<PortalProduct> products, String productCode);
	
	public Currency getProductCurrency(PortalProduct product, HttpServletRequest request);
	
	public InvestmentGroup getInvestmentGroup(PortalProduct product, HttpServletRequest request);
}


com.vanguard.corp.ics.sdt.dao.impl.config
	PortalConfiguration
package com.vanguard.corp.ics.sdt.dao.impl.config;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Configuration;

@Configuration
public class PortalConfiguration {

	@Value("$sma-data-transformer.webservice-{portal.products.endpoint}")
	private String portalProductEndpoint;

	@Value("$sma-data-transformer.webservice-{portal.references.endpoint}")
	private String portalReferenceEndpoint;

	@Value("$sma-data-transformer.webservice-{portal.maxConnectionAttempts}")
	private int maxConnectionAttempts;

	public String getPortalProductEndpoint() {
		return portalProductEndpoint;
	}

	public void setPortalProductEndpoint(String portalProductEndpoint) {
		this.portalProductEndpoint = portalProductEndpoint;
	}

	public String getPortalReferenceEndpoint() {
		return portalReferenceEndpoint;
	}

	public void setPortalReferenceEndpoint(String portalReferenceEndpoint) {
		this.portalReferenceEndpoint = portalReferenceEndpoint;
	}

	public int getMaxConnectionAttempts() {
		return maxConnectionAttempts;
	}

	public void setMaxConnectionAttempts(int attempts) {
		this.maxConnectionAttempts = attempts;
	}

}

	ReportingDatabaseConfiguration


package com.vanguard.corp.ics.sdt.dao.impl.config;

import java.util.Properties;

import org.apache.tomcat.jdbc.pool.DataSource;
import org.apache.tomcat.jdbc.pool.PoolProperties;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.data.jpa.repository.config.EnableJpaRepositories;
import org.springframework.orm.jpa.JpaTransactionManager;
import org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;
import org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter;
import org.springframework.transaction.PlatformTransactionManager;
import org.springframework.transaction.annotation.EnableTransactionManagement;

@Configuration
@EnableJpaRepositories(basePackages = { "com.vanguard.corp.ics.repository", "com.vanguard.corp.ics.sdt.dao.impl.repository" }, entityManagerFactoryRef = "reportingEntityManagerFactory", transactionManagerRef = "reportingTransactionManager")
@EnableTransactionManagement
public class ReportingDatabaseConfiguration {

	@Value("$sma-data-transformer.webservice-{ORACLE_GMRADM_JDBC_URL}")
	private String sdtReportingConnectionUrl;
	
	@Value("${ORACLE_GMRADM_SRS_USER_ID1}")
	private String sdtDataSourceReportingUsername;

	@Value("${ORACLE_GMRADM_SRS_PASSWORD1}")
	private String sdtDataSourceReportingPassword;
	
	@Value("$sma-data-transformer.webservice-{jpa.hibernate.show_sql}")
	private boolean showSql;
	
	@Value("$sma-data-transformer.webservice-{jpa.hibernate.format_sql}")
	private boolean formatSql;
	
	@Value("$sma-data-transformer.webservice-{jpa.hibernate.use_sql_comments}")
	private boolean useSqlComments;

	@Bean(name = "reportingEntityManagerFactory")
	public LocalContainerEntityManagerFactoryBean getReportingEntityManagerFactory() {

		LocalContainerEntityManagerFactoryBean reportingEntityManagerFactory = new LocalContainerEntityManagerFactoryBean();
		reportingEntityManagerFactory.setPersistenceUnitName("GRMDB");
		reportingEntityManagerFactory.setDataSource(dataSource());
		reportingEntityManagerFactory.setJpaVendorAdapter(hibernateJpaVendorAdapter());
		reportingEntityManagerFactory.setPackagesToScan(new String[] { "com.vanguard.corp.ics.dao", "com.vanguard.corp.ics.sdt.dao.impl.entity" });
		
		Properties jpaProperties = new Properties();
		jpaProperties.put("hibernate.dialect", "org.hibernate.dialect.Oracle10gDialect");
		jpaProperties.put("hibernate.show_sql", showSql);
		jpaProperties.put("hibernate.format_sql", formatSql);
		jpaProperties.put("hibernate.use_sql_comments", useSqlComments);
		jpaProperties.put("hibernate.enable_lazy_load_no_trans", "true");

		reportingEntityManagerFactory.setJpaProperties(jpaProperties);

		return reportingEntityManagerFactory;
	}

	@Bean
	public DataSource dataSource() {

		PoolProperties poolProperties = new PoolProperties();
		poolProperties.setUrl(sdtReportingConnectionUrl);
		poolProperties.setDriverClassName("oracle.jdbc.OracleDriver");
		poolProperties.setUsername(sdtDataSourceReportingUsername);
		poolProperties.setPassword(sdtDataSourceReportingPassword);
		poolProperties.setDefaultAutoCommit(false);
		poolProperties.setDefaultReadOnly(false);
		poolProperties.setDefaultTransactionIsolation(2);
		poolProperties.setJmxEnabled(false);
		poolProperties.setTestWhileIdle(true);
		poolProperties.setTestOnBorrow(true);
		poolProperties.setValidationQuery("SELECT 1 FROM DUAL");
		poolProperties.setTestOnReturn(false);
		poolProperties.setValidationInterval(30000);
		poolProperties.setTimeBetweenEvictionRunsMillis(30000);
		poolProperties.setMaxActive(1000);
		poolProperties.setInitialSize(5);
		poolProperties.setMaxWait(10000);
		poolProperties.setRemoveAbandonedTimeout(30);
		poolProperties.setMinEvictableIdleTimeMillis(30000);
		poolProperties.setMinIdle(10);
		poolProperties.setLogAbandoned(true);
		poolProperties.setRemoveAbandoned(true);
		poolProperties.setJdbcInterceptors("org.apache.tomcat.jdbc.pool.interceptor.ConnectionState;"
				+ "org.apache.tomcat.jdbc.pool.interceptor.StatementFinalizer");

		DataSource dataSource = new DataSource();
		dataSource.setPoolProperties(poolProperties);

		return dataSource;
	}

	@Bean
	public HibernateJpaVendorAdapter hibernateJpaVendorAdapter() {

		return new HibernateJpaVendorAdapter();
	}

	@Bean(name = "reportingTransactionManager")
	public PlatformTransactionManager transactionManager() {
		JpaTransactionManager tm = new JpaTransactionManager();
		tm.setEntityManagerFactory(getReportingEntityManagerFactory().getObject());
		tm.setDataSource(dataSource());

		return tm;
	}
}

		SecurityMasterAccessConfig


package com.vanguard.corp.ics.sdt.dao.impl.config;

import java.util.Properties;

import org.apache.tomcat.jdbc.pool.DataSource;
import org.apache.tomcat.jdbc.pool.PoolProperties;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.data.jpa.repository.config.EnableJpaRepositories;
import org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;
import org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter;

@Configuration
@EnableJpaRepositories(entityManagerFactoryRef = "entityManagerFactory")
public class SecurityMasterAccessConfig {
	@Value("$sma-data-transformer.webservice-{security.master.connectionURL}")
	private String sdlConnectionUrl;

	@Value("$sma-data-transformer.webservice-{security.master.username}")
	private String sdlDataSourceUsername;

	@Value("$sma-data-transformer.webservice-{security.master.password}")
	private String sdlDataSourcePassword;

	@Value("$sma-data-transformer.webservice-{security.master.driverClassName}")
	private String driverClassName;

	@Value("$sma-data-transformer.webservice-{security.master.showsql}")
	private Boolean showSQL;

	@Bean(name = "entityManagerFactory")
	public LocalContainerEntityManagerFactoryBean getEntityManagerFactory() {

		final LocalContainerEntityManagerFactoryBean entityManagerFactory = new LocalContainerEntityManagerFactoryBean();
		entityManagerFactory.setDataSource(sdlDataSource());
		entityManagerFactory.setJpaVendorAdapter(hibernateJpaVendorAdapter());
		entityManagerFactory.setPackagesToScan(new String[] {});
		
		//TODO Read property values from RTE properties.
		Properties jpaProperties = new Properties();
		jpaProperties.put("hibernate.dialect", "org.hibernate.dialect.SQLServerDialect");
		jpaProperties.put("hibernate.show_sql", "true");
		jpaProperties.put("hibernate.format_sql", "true");
		jpaProperties.put("hibernate.use_sql_comments", "false");
		jpaProperties.put("hibernate.enable_lazy_load_no_trans", "true");

		entityManagerFactory.setJpaProperties(jpaProperties);
		return entityManagerFactory;
	}

	@Bean
	public HibernateJpaVendorAdapter hibernateJpaVendorAdapter() {

		final HibernateJpaVendorAdapter adapter = new HibernateJpaVendorAdapter();
//		adapter.setDatabasePlatform("org.hibernate.dialect.SQLServerDialect");
//		adapter.setShowSql(showSQL);
//		adapter.setGenerateDdl(false);

		return adapter;
	}

	@Bean
	public DataSource sdlDataSource() {

		final PoolProperties poolProperties = new PoolProperties();
		poolProperties.setUrl(sdlConnectionUrl);
		poolProperties.setDriverClassName(driverClassName);
		poolProperties.setUsername(sdlDataSourceUsername);
		poolProperties.setPassword(sdlDataSourcePassword);

		poolProperties.setDefaultAutoCommit(false);
		poolProperties.setDefaultReadOnly(false);
		poolProperties.setDefaultTransactionIsolation(2);
		poolProperties.setJmxEnabled(false);
		poolProperties.setTestWhileIdle(true);
		poolProperties.setTestOnBorrow(true);
		poolProperties.setTestOnReturn(true);
		poolProperties.setValidationInterval(30000);
		poolProperties.setValidationQueryTimeout(30);
		poolProperties.setTimeBetweenEvictionRunsMillis(30000);
		poolProperties.setMaxActive(20);
		poolProperties.setInitialSize(5);
		poolProperties.setMaxWait(60000);
		poolProperties.setRemoveAbandonedTimeout(100);
		poolProperties.setMinEvictableIdleTimeMillis(30000);
		poolProperties.setMaxIdle(10);
		poolProperties.setMinIdle(5);
		poolProperties.setLogAbandoned(true);
		poolProperties.setRemoveAbandoned(false);
		poolProperties.setJdbcInterceptors(
				"org.apache.tomcat.jdbc.pool.interceptor.ConnectionState;" +
						"org.apache.tomcat.jdbc.pool.interceptor.StatementFinalizer");
		final Properties dbProperties = new Properties();
		dbProperties.put("hibernate.id.new_generator_mappings", "true");
		poolProperties.setDbProperties(dbProperties);

		final DataSource datasource = new DataSource();
		datasource.setPoolProperties(poolProperties);
		return datasource;
	}

}

com.vanguard.corp.ics.sdt.dao.impl.entity.report(AccountBenchmarkAssociation.java
,AccountFund.java,
AccountSetup.java,
AttributionSummary.java
BrokerageAndTaxes.java
BrokerageAndTaxesTargetDAO.java
Characteristics.java
Commentary.java
Limit.java
PerformanceSummary.java
ValuationsReport.java)

com.vanguard.corp.ics.sdt.dao.impl.portal(ProductPortalHelper.java
ProductPortalServiceImpl.java)

com.vanguard.corp.ics.sdt.dao.impl.repository(AccountBenchmarkAssociationRepository.java
AccountFundRepository.java
AccountSetupRepository.java
AttributionSummaryRepository.java
BrokerageAndTaxesRepository.java
BrokerageAndTaxesTargetRepository.java
CharacteristicsRepository.java
CommentaryRepository.java
PerformanceSummarayRepository.java
PortfolioLimitRepository.java
ValuationsReportRepository.java)

com.vanguard.corp.ics.sdt.service.api(CommentaryService.java
DataTransferService.java
TransferService.java
TransferServiceComparator.java)

package com.vanguard.corp.ics.sdt.service.api;

import java.util.Comparator;


public class TransferServiceComparator implements Comparator<TransferService> {

	@Override
	public int compare(final TransferService o1, final TransferService o2) {
		return o1.getPriority().ordinal() - o2.getPriority().ordinal();
	}

}


com.vanguard.corp.ics.sdt.service.api.constants
	AnalyticsTypeCode

package com.vanguard.corp.ics.sdt.service.api.constants;

public enum AnalyticsTypeCode {

	EX_ANTE_RISK("Ex Ante- Tracking Error", "EATE", true),
	ONE_YR_EX_POST("1 yr Ex-Post Tracking Error", "1YEP", true),
	THREE_YR_EX_POST("3 yr Ex-Post Tracking Error", "3YEP", true),
	ONE_YR_STANDARD_DEV("1 yr Standard Deviation", "1YSD", false),
	THREE_YR_STANDARD_DEV("3 yr Standard Deviation", "3YSD", false);
	
	private final String name;
	private final String code;
	private final boolean limit;
	
	AnalyticsTypeCode(String name, String code, boolean limit) {
		this.name = name;
		this.code = code;
		this.limit = limit;
	}

	public String getName() {
		return name;
	}

	public String getCode() {
		return code;
	}
	
	public boolean hasLimit() {
		return limit;
	}
}


	AttributionSummaryOrderType.java


package com.vanguard.corp.ics.sdt.service.api.constants;

public enum AttributionSummaryOrderType {
	
		STOCK_SELECTION_IMPACT 			("Stock Selection Impact", 1),
		FUTURES_IMPACT 					("Futures Impact", 2),
		LIQUIDITY_MANAGEMENT_IMPACT		("Liquidity Management Impact", 3),
		SECURITY_PRICE_EXECUTION 		("Security Price Execution", 4),
		TRADING_COST 					("Trading Cost", 5),
		CURRENCY_PRICE_EXECUTION 		("Currency Price Execution", 6),
		DIVIDEND_WITHOLDING_IMPACT 		("Dividend Withholding Impact", 7),
		SECURITY_LENDING_INCOME 		("Security Lending Income", 8),
		MGMT_AND_CUSTODY_FEES 			("Mgmt & Custody Fees", 9),
		SUBSTITUTES_IMPACT 				("Substitutes Impact", 10),
		RESTRICTIONS_IMPACT 			("Restrictions Impact", 11),
		INTERNAL_LIQUIDITY 				("Internal Liquidity", 12),
		RESIDUAL 						("Residual", 13);
		

		private final String attributionName;
		private final int attributionOrder;

		private AttributionSummaryOrderType(final String attributionName, final int attributionOrder) {
			this.attributionName = attributionName;
			this.attributionOrder = attributionOrder;
		}

		public String getAttributionName() {
			return attributionName;
		}

		public int getAttributionOrder() {
			return attributionOrder;
		}

		public static AttributionSummaryOrderType byAttributionName(String attributionName) {
			AttributionSummaryOrderType returnType = null;
			for (AttributionSummaryOrderType type : AttributionSummaryOrderType.values()) {
				if (type.getAttributionName().equals(attributionName)) {
					returnType = type;
					break;
				}
			}
			return returnType;
		}
		
}

	CharacteristicsType.java


package com.vanguard.corp.ics.sdt.service.api.constants;

public enum CharacteristicsType {

	PORTFOLIO_CHARACTERISTICS	("CHARSTCS", "MarketCharacteristics")
	, COUNTRY_ALLOCATION		("CONALOCN", "CountryAllocation")
	, CURRENCY_ALLOCATION		("CURALOCN", "CurrencyAllocation")
	, MARKET_SEGMENTATION		("MKTSGMNT", "MarketCharacteristics")
	, REGIONAL_ALLOCATION		("REGALOCN", "RegionalAllocation")
	, SECTOR_ALLOCATION			("SECALOCN", "SectorAllocation")
	, TOP_TEN_HOLDINGS			("TOP10HOL", "TopTenHoldings")
	, UNKNOWN					("UNKNOWNN", "")
	;

	private final String reportingCode;
	private final String targetCode;

	private CharacteristicsType(String reportingCode, String targetCode) {
		this.reportingCode = reportingCode;
		this.targetCode = targetCode;
	}

	public String getReportingCode() {
		return reportingCode;
	}

	public String getTargetCode() {
		return targetCode;
	}

	public static CharacteristicsType byReportingCodeOrUnknown(String reportingCode) {
		for (CharacteristicsType type : CharacteristicsType.values()) {
			if (type.getReportingCode().equals(reportingCode)) {
				return type;
			}
		}
		return CharacteristicsType.UNKNOWN;
	}
	
	public static CharacteristicsType byTargetCodeOrUnknown(String targetCode) {
		for (CharacteristicsType type : CharacteristicsType.values()) {
			if (type.getTargetCode().equals(targetCode)) {
				return type;
			}
		}
		return CharacteristicsType.UNKNOWN;
	}
}


	DataSetType.java


package com.vanguard.corp.ics.sdt.service.api.constants;


public enum DataSetType {

	CHARACTERISTICS
	, PRODUCT_DATA
	, RISK_SUMMARY
	, VALUATIONS
	, ATTRIBUTION_SUMMARY
	, PERFORMANCE_SUMMARY
	, BROKERAGE_TAXES
	;
}


	MarketSegmentationType.java
package com.vanguard.corp.ics.sdt.service.api.constants;

public enum MarketSegmentationType {

	LARGE			("Large Cap", "Large")
	, MEDIUM_LARGE	("Medium/Large Cap", "Large/Medium")
	, MEDIUM		("Medium Cap", "Medium")
	, MEDIUM_SMALL	("Medium/Small Cap", "Small/Medium")
	, SMALL			("Small Cap", "Small")
	;

	private final String targetName;
	private final String reportingName;

	private MarketSegmentationType(final String targetName, final String reportingName) {
		this.targetName = targetName;
		this.reportingName = reportingName;
	}

	public String getTargetName() {
		return targetName;
	}

	public String getReportingName() {
		return reportingName;
	}

	public static MarketSegmentationType byTargetNameOrNull(String targetName) {
		for (MarketSegmentationType type : MarketSegmentationType.values()) {
			if (type.getTargetName().equals(targetName)) {
				return type;
			}
		}
		return null;
	}
}

	PerformanceSummaryCode.java

package com.vanguard.corp.ics.sdt.service.api.constants;

public enum PerformanceSummaryCode {
	PFT_CODE ("PFT"),
	BMK_CODE ("BMK"),
	DIFF_CODE ("Diff");

	private final String code;

	private PerformanceSummaryCode(String code) {
		this.code = code;
	}

	public String getCode() {
		return code;
	}

}

	PerformanceSummaryName.java


package com.vanguard.corp.ics.sdt.service.api.constants;

import java.util.Arrays;

public enum PerformanceSummaryName {
	PORTFOLIO_GROSS ("Portfolio (Gross)"),
	BMK_NET ("Bmk (Net)"),
	DIFF ("Diff"),
	BMK_DIV_RETURN ("Bmk (Div Return)"),
	BMK_PRICE_RETURN ("Bmk (Price Return)"),
	PORTFOLIO_NET ("Portfolio (Net)"),
	BMK_GROSS ("Bmk (Gross)");

	private final String name;

	private PerformanceSummaryName(String name) {
		this.name = name;
	}

	public String getName() {
		return name;
	}
	
	public static PerformanceSummaryName of(String value) {
		return Arrays.stream(values()).filter(v ->
        value.equals(v.getName())).findFirst().orElse(null);
	}
	
}

	SecurityTypeCode.java


package com.vanguard.corp.ics.sdt.service.api.constants;

public enum SecurityTypeCode {

	DERIVATIVES("Derivatives", "DERI"),
	EQUITY("Equity", "EQUI"),
	FUTURES("Futures", "FUTU"),
	FORWARD_FOREX("Forward Forex", "FWFX"),
	LIQUIDITY("Liquidity", "LIQU"),
	FIXED_INTEREST("Securities", "SECU");
	
	private final String name;
	private final String code;
	
	SecurityTypeCode(String name, String code) {
		this.name = name;
		this.code = code;
	}

	public String getName() {
		return name;
	}

	public String getCode() {
		return code;
	}
}


com.vanguard.corp.ics.sdt.service.api.exception
	DataTransferException.java
package com.vanguard.corp.ics.sdt.service.api.exception;


public class DataTransferException extends RuntimeException {

	private static final long serialVersionUID = 1L;

	public DataTransferException(final String message) {
		super(message);
	}

	public DataTransferException(final String message, final Throwable cause) {
		super(message, cause);
	}
}

	GenerateLimitException.java

package com.vanguard.corp.ics.sdt.service.api.exception;

public class GenerateLimitException extends DataTransferException {

	private static final long serialVersionUID = 1L;

	public GenerateLimitException(final String message, final Throwable cause) {
		super(message, cause);
	}
}

	ReadAttributeSummaryException.java


package com.vanguard.corp.ics.sdt.service.api.exception;

public class ReadAttributeSummaryException extends DataTransferException {
	private static final long serialVersionUID = 1L;

	public ReadAttributeSummaryException(final String message, final Throwable cause) {
		super(message, cause);
	}
}

		ReadCharacteristicsException.java
	

package com.vanguard.corp.ics.sdt.service.api.exception;

public class ReadCharacteristicsException extends DataTransferException {

	private static final long serialVersionUID = 1L;

	public ReadCharacteristicsException(final String message, final Throwable cause) {
		super(message, cause);
	}

}

	ReadPerformanceSummaryException.java

package com.vanguard.corp.ics.sdt.service.api.exception;

public class ReadPerformanceSummaryException extends DataTransferException {
	private static final long serialVersionUID = 1L;

	public ReadPerformanceSummaryException(final String message, final Throwable cause) {
		super(message, cause);
	}
}


	ReadProductPortalException.java

package com.vanguard.corp.ics.sdt.service.api.exception;

public class ReadProductPortalException extends DataTransferException {

	private static final long serialVersionUID = 1L;
	
	public ReadProductPortalException(final String message) {
		super(message);
	}
	
	public ReadProductPortalException(final String message, final Throwable cause) {
		super(message, cause);
	}
}

	ReadValuationsException.java

package com.vanguard.corp.ics.sdt.service.api.exception;

public class ReadValuationsException extends DataTransferException {

	private static final long serialVersionUID = 1L;
	
	public ReadValuationsException(final String message, final Throwable cause) {
		super(message, cause);
	}

}

	SaveAttributeSummaryException.java

package com.vanguard.corp.ics.sdt.service.api.exception;

public class SaveAttributeSummaryException extends DataTransferException {
	private static final long serialVersionUID = 1L;

	public SaveAttributeSummaryException(final String message, final Throwable cause) {
		super(message, cause);
	}
}

	SaveCharacteristicsException.java\

package com.vanguard.corp.ics.sdt.service.api.exception;

public class SaveCharacteristicsException extends DataTransferException {

	private static final long serialVersionUID = 1L;

	public SaveCharacteristicsException(final String message, final Throwable cause) {
		super(message, cause);
	}

}


	SavePerformanceSummaryException.java

package com.vanguard.corp.ics.sdt.service.api.exception;

public class SavePerformanceSummaryException extends DataTransferException {
	private static final long serialVersionUID = 1L;

	public SavePerformanceSummaryException(final String message, final Throwable cause) {
		super(message, cause);
	}
}

com.vanguard.corp.ics.sdt.service.api.util(DateParser.java
Utilities.java)

com.vanguard.corp.ics.sdt.service.impl(BrokerageAndTaxesServiceImpl.java
CommentaryServiceImpl.java
DataTransferServiceImpl.java
ProductDataServiceImpl.java
ValuationsServiceImpl.java)


com.vanguard.corp.ics.sdt.service.impl.attributionsummary
	AttributionSummaryConverter.java

package com.vanguard.corp.ics.sdt.service.impl.attributionsummary;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.inject.Named;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.util.Assert;

import com.vanguard.corp.ics.dao.target.AttributionTargetDAO;
import com.vanguard.corp.ics.sdt.dao.impl.entity.report.AttributionSummary;
import com.vanguard.corp.ics.sdt.service.api.constants.AttributionSummaryOrderType;


@Named
public class AttributionSummaryConverter {
	
	private static final Logger LOG = LoggerFactory.getLogger(AttributionSummaryConverter.class);

	public List<AttributionSummary> convert(final List<AttributionTargetDAO> attributionTargetDAOs, final String calledByUserId) {
		Assert.notEmpty(attributionTargetDAOs);
		Assert.noNullElements(attributionTargetDAOs.toArray());
		Assert.hasText(calledByUserId);
		final List<AttributionSummary> converted = new ArrayList<>(attributionTargetDAOs.size());
		Map<String, AttributionSummary> attributionSummaryMap = new HashMap<String, AttributionSummary>();
		AttributionSummary attributionSummary;

		for (AttributionTargetDAO targetDao : attributionTargetDAOs) {
			String key = targetDao.getPortfolioCode() + "_"
					+ targetDao.getAttrtnName();
			if (attributionSummaryMap.containsKey(key)) {
				attributionSummary = attributionSummaryMap.get(key);
			} else {
				attributionSummary = new AttributionSummary();
				attributionSummary.setEffectiveDate(targetDao.getEffectiveDate());
				attributionSummary.setPortId(targetDao.getPortfolioCode());
				attributionSummary.setName(targetDao.getAttrtnName());
				attributionSummary.setLastUpdatedUserId(calledByUserId);
				if (null != targetDao.getDatasourceFileDAO()) {
					attributionSummary.setDatasourceFileDAO(targetDao.getDatasourceFileDAO());
					
				}
				AttributionSummaryOrderType displayOrder = getDisplayOrder(targetDao.getAttrtnName());
				if( displayOrder !=null){
					attributionSummary.setDisplayOrder(displayOrder.getAttributionOrder());
				}
				else {
					attributionSummary.setDisplayOrder(99);
				}
				
				attributionSummaryMap.put(key, attributionSummary);
			}

			getAttributionTypeCodeValues(attributionSummary, targetDao);

		}

		// Iterate Map to prepare converted list
		for (AttributionSummary attSummary : attributionSummaryMap.values()) {
			converted.add(attSummary);
		}
		return converted;
	}

	private void getAttributionTypeCodeValues(AttributionSummary attributionSummary, AttributionTargetDAO targetDao) {

		if (("1MON").equalsIgnoreCase(targetDao.getAttrtnTypeCd())) {
			attributionSummary.setOneMonthVal(targetDao.getAttrtnTypeVal());
		}

		else if (("3MON").equalsIgnoreCase(targetDao.getAttrtnTypeCd())) {
			attributionSummary.setThreeMonthVal(targetDao.getAttrtnTypeVal());

		}

		else if (("6MON").equalsIgnoreCase(targetDao.getAttrtnTypeCd())) {
			attributionSummary.setSixMonthVal(targetDao.getAttrtnTypeVal());

		}

		else if (("9MON").equalsIgnoreCase(targetDao.getAttrtnTypeCd())) {
			attributionSummary.setNineMonthVal(targetDao.getAttrtnTypeVal());

		}

		else if (("12MO").equalsIgnoreCase(targetDao.getAttrtnTypeCd())) {
			attributionSummary.setTwelveMonthVal(targetDao.getAttrtnTypeVal());

		}

		else if (("CYTD").equalsIgnoreCase(targetDao.getAttrtnTypeCd())) {
			attributionSummary.setYearToDateVal(targetDao.getAttrtnTypeVal());

		}
		
		else {
			LOG.warn("[AttributionSummaryConverter.getAttributionTypeCodeValues] AttributionTypeCodeValues does not match the expected values.targetDao.getAttrtnTypeCd():{},targetDao.getPortfolioCode():{} ", targetDao.getAttrtnTypeCd(), targetDao.getPortfolioCode());
		}
	}

	private AttributionSummaryOrderType getDisplayOrder(String attributionName) {
		return AttributionSummaryOrderType.byAttributionName(attributionName);
	}

}


		AttributionSummaryTransferService.java


package com.vanguard.corp.ics.sdt.service.impl.attributionsummary;

import java.util.Date;
import java.util.List;

import javax.inject.Inject;
import javax.inject.Named;
import javax.servlet.http.HttpServletRequest;

import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.lang.StringUtils;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.Assert;

import com.vanguard.corp.ics.dao.target.AttributionTargetDAO;
import com.vanguard.corp.ics.repository.target.AttributionSummaryTargetRepository;
import com.vanguard.corp.ics.sdt.dao.impl.entity.report.AttributionSummary;
import com.vanguard.corp.ics.sdt.dao.impl.repository.AttributionSummaryRepository;
import com.vanguard.corp.ics.sdt.service.api.TransferService;
import com.vanguard.corp.ics.sdt.service.api.constants.DataSetType;
import com.vanguard.corp.ics.sdt.service.api.exception.ReadAttributeSummaryException;
import com.vanguard.corp.ics.sdt.service.api.exception.SaveAttributeSummaryException;

@Named
public class AttributionSummaryTransferService implements TransferService {

	@Inject
	private AttributionSummaryRepository repo;

	@Inject
	private AttributionSummaryTargetRepository readRepo;
	
	@Inject AttributionSummaryConverter dataConverter;

	@Override
	public Priority getPriority() {
		return TransferService.Priority.MEDIUM;
	}

	@Override
	public boolean handles(final Date effectiveDate, final String portId, final DataSetType dataSetType,
			final HttpServletRequest request) {
		return dataSetType == null || dataSetType == DataSetType.ATTRIBUTION_SUMMARY;
	}

	@Override
	@Transactional
	public void transfer(final Date effectiveDate, final String portId, final String calledByUserId, final HttpServletRequest request) {

		Assert.notNull(effectiveDate, "[AttributionSummaryTransferService.transfer] effectiveDate cannot be null");
		Assert.hasText(calledByUserId, "[AttributionSummaryTransferService.transfer] calledByUserId is required");

		List<AttributionTargetDAO> targetData = readAttributionSummary(effectiveDate, portId);

		if (CollectionUtils.isNotEmpty(targetData)) {
			saveAttributionSummary(targetData, effectiveDate, portId, calledByUserId);
		}
	}
	
	/**
	 * Retrieves L2 Data  
	 * @param effectiveDate
	 * @param portId
	 * @return
	 */
	private List<AttributionTargetDAO> readAttributionSummary(final Date effectiveDate, final String portId) {
		List<AttributionTargetDAO> readList;
		try {
			if (StringUtils.isEmpty(portId)) {
				readList = readRepo.findAllByEffectiveDate(effectiveDate);
			} else {
				readList = readRepo.findAllByEffectiveDateAndPortfolioCode(effectiveDate, portId);
			}
		} catch (Exception e) {
			final String msg = String.format(
					"[AttributionSummaryTransferService.transfer] %s thrown while reading attribution summary; msg:%s"
					, e.getClass().getSimpleName()
					, e.getMessage()
					);
			throw new ReadAttributeSummaryException(msg, e);
		}

		return readList;
	}
	
	/**
	 * 1. L2 data is converted to L2 data structure.
	 * 2. Existing L3 data is end dated.
	 * 3. L3 data is persisted into DB 
	 * @param readList
	 */

	private void saveAttributionSummary(List<AttributionTargetDAO> readList, final Date effectiveDate,
			final String portId,final String calledByUserId) {


		try {
			// Convert
			final List<AttributionSummary> attributionSummaries = dataConverter.convert(readList, calledByUserId);

			// Update existing records
			updateExistingData(effectiveDate, portId);

			// insert new records
			repo.save(attributionSummaries);

		} catch (Exception e) {
			final String msg = String.format(
				"[AttributionSummaryTransferService.transfer] %s thrown while saving Attribution; msg:%s"
				, e.getClass().getSimpleName()
				, e.getMessage()
				);
			throw new SaveAttributeSummaryException(msg, e);
		}
	}
	

	/**
	 * Existing L3 data is end dated.
	 * @param effectiveDate
	 * @param portId
	 */
	private void updateExistingData(final Date effectiveDate, final String portId) {
		List<AttributionSummary> storedAttributionSummary = repo.findByEffectiveDateAndPortIdAndEffectiveEndDateIsNull(effectiveDate, portId);
		for (AttributionSummary attributionSummary : storedAttributionSummary) {
			attributionSummary.setEffectiveEndDate(new Date());
		}
	}

}


com.vanguard.corp.ics.sdt.service.impl.characteristics(CharacteristicsConverter.java
CharacteristicsHelperService.java
CharacteristicsRounder.java
CharacteristicsTransferService.java
MagicRounder.java
MundaneRounder.java
TopTenHoldingsRounder.java)


com.vanguard.corp.ics.sdt.service.impl.performancesummary
	PerformanceSummaryDataConverter
package com.vanguard.corp.ics.sdt.service.impl.performancesummary;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.inject.Named;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.vanguard.corp.ics.dao.target.PerformanceCalculationDAO;
import com.vanguard.corp.ics.enums.CalculationPeriodEnum;
import com.vanguard.corp.ics.sdt.dao.impl.entity.report.PerformanceSummary;
import com.vanguard.corp.ics.sdt.service.api.constants.PerformanceSummaryCode;
import com.vanguard.corp.ics.sdt.service.api.constants.PerformanceSummaryName;

@Named
public class PerformanceSummaryDataConverter {
	private Logger log = LoggerFactory.getLogger(PerformanceSummaryDataConverter.class);
	/**
	 * Converts Target data(L2) to report readable data(L1).
	 * If no L2 data is available and Port Id is not null, then default records (Portfolio Gross / BMK Net, Diff) are created.
	 * Diff is calculated by subtracting BMK Net values from Portfolio Gross values.
	 * @param readList - List containing the data from L2 table
	 * @param effectiveDate - Effective Date
	 * @param portId - Port ID
	 * @param calledByUserId - User Id
	 * @return
	 */
	public List<PerformanceSummary> convert(List<PerformanceCalculationDAO> readList, Date effectiveDate,
			String portId, String calledByUserId) {
		log.info("Data size form L2 for EffectiveDate: [" + effectiveDate + "] portId: [" + portId+"] - "+readList.size());
		//1. Group L2 data with port id as key.
		Map<String, List<PerformanceCalculationDAO>> performanceSummayDAOMap = new HashMap<>();
		for (PerformanceCalculationDAO performanceCalculationDao : readList) {
			String key = performanceCalculationDao.getPrtCd();
			if (performanceSummayDAOMap.containsKey(key)) {
				performanceSummayDAOMap.get(key).add(performanceCalculationDao);
			} else {
				List<PerformanceCalculationDAO> list = new ArrayList<>();
				list.add(performanceCalculationDao);
				performanceSummayDAOMap.put(key, list);
			}
		}
		log.info("Number of port id's in the list [Note: multiple ports id's are got only when port id in the endpoint is null] "+performanceSummayDAOMap.size());

		List<PerformanceSummary> performanceSummaries = new ArrayList<>();
		// 2. If L2 data is empty, create default records (Portfolio Gross / BMK Net, Diff).
		if(performanceSummayDAOMap.isEmpty()) {
			if(null != portId) {
				performanceSummaries.add(createPerformanceSummaryNullData(PerformanceSummaryName.PORTFOLIO_GROSS.getName(), PerformanceSummaryCode.PFT_CODE.getCode(), effectiveDate, portId));
				performanceSummaries.add(createPerformanceSummaryNullData(PerformanceSummaryName.BMK_NET.getName(), PerformanceSummaryCode.BMK_CODE.getCode(), effectiveDate, portId));
				performanceSummaries.add(createDiffRecord(performanceSummaries.get(0), performanceSummaries.get(1)));
			}
		} else {
			// 3. If L2 data is not empty, group data under each port id based on the Type.
			for (Map.Entry<String, List<PerformanceCalculationDAO>> entry : performanceSummayDAOMap.entrySet()) {
				performanceSummaries.addAll(createPortfolioGrossData(entry.getValue(), effectiveDate, portId));
				log.info("L1 records for port id: "+entry.getKey()+" is "+performanceSummaries.size());
			}
		}
		// 4. Update all records with User ID.
		for(PerformanceSummary summary : performanceSummaries){
			summary.setLastUpdatedUserId(calledByUserId);
		}
		return performanceSummaries;
	}

	/**
	 * Each L2 record will be split into Portfolio and benchmark records. L2 will have more than 1 records for a single portfolio / bmk map. 
	 * Each of these records will have different periods (@CalculationPeriodEnum). All these periods for a single portfolio / bmk map will 
	 * be converted into a single PerfomanceSummary (L1) record.
	 * @param readList - List containing the data from L2 table
	 * @param effectiveDate - Effective Date
	 * @param portId - Port ID
	 * @return
	 */
	private List<PerformanceSummary> createPortfolioGrossData(List<PerformanceCalculationDAO> readList, Date effectiveDate, String portId) {
		List<PerformanceSummary> convertedData = new ArrayList<>();
		Map<String, PerformanceSummary> prtData = new HashMap<>();
		//1. Group L2 data based on the portfolio type
		for (PerformanceCalculationDAO dao : readList) {
			String prtTypeKey = dao.getPrtType();
			if(prtData.containsKey(prtTypeKey)) {
				addCommonPortfolioData(prtData.get(prtTypeKey), dao, prtTypeKey);
			} else {
				PerformanceSummary data = new PerformanceSummary();
				data.setPerformanceTypeName(prtTypeKey);
				data.setEffectiveDate(dao.getCalcDt());
				data.setPortId(dao.getPrtCd());
				prtData.put(prtTypeKey,addCommonPortfolioData(data, dao, prtTypeKey));
			}
		}
		//1. Group L2 data based on the bmk type
		Map<String, PerformanceSummary> bmkData = new HashMap<>();
		for (PerformanceCalculationDAO dao : readList) {
			String key = dao.getBmkType();
			if(bmkData.containsKey(key)) {
				addCommonBmkData(bmkData.get(key), dao, key);
			} else {
				PerformanceSummary data = new PerformanceSummary();
				data.setPerformanceTypeName(key);
				data.setEffectiveDate(dao.getCalcDt());
				data.setPortId(dao.getPrtCd());
				bmkData.put(key, addCommonBmkData(data, dao, key));
			}
		}
		convertedData.addAll(prtData.values());
		convertedData.addAll(bmkData.values());
		return calculateDifferenceBetweenPortfolioAndBenchMark(convertedData, effectiveDate, portId);
	}

	private PerformanceSummary addCommonPortfolioData(PerformanceSummary data, PerformanceCalculationDAO dao, String name) {
		data.setPerformanceTypeCode(PerformanceSummaryCode.PFT_CODE.getCode());
		if (dao.getPeriod().equals(CalculationPeriodEnum.CYTD)) {
			data.setYearToDateValue(dao.getPrtVal());
		} else if (dao.getPeriod().equals(CalculationPeriodEnum.P1M)) {
			data.setOneMonthValue(dao.getPrtVal());
		} else if (dao.getPeriod().equals(CalculationPeriodEnum.P3M)) {
			data.setThreeMonthValue(dao.getPrtVal());
		} else if (dao.getPeriod().equals(CalculationPeriodEnum.P6M)) {
			data.setSixMonthValue(dao.getPrtVal());
		} else if (dao.getPeriod().equals(CalculationPeriodEnum.P1Y)) {
			data.setOneYearValue(dao.getPrtVal());
		} else if (dao.getPeriod().equals(CalculationPeriodEnum.P3YPA)) {
			data.setThreeYearValue(dao.getPrtVal());
		} else if (dao.getPeriod().equals(CalculationPeriodEnum.P5YPA)) {
			data.setFiveYearValue(dao.getPrtVal());
		} else if (dao.getPeriod().equals(CalculationPeriodEnum.PINCP)) {
			data.setInceptionValue(dao.getPrtVal());
		} else if (dao.getPeriod().equals(CalculationPeriodEnum.PINCEPPA)) {
			data.setInceptionPerformanceAdjustedValue(dao.getPrtVal());
		} else {
			data.setYearToDateValue(dao.getPrtVal());
		}
		return data;
	}
	
	private PerformanceSummary addCommonBmkData(PerformanceSummary data, PerformanceCalculationDAO dao, String name) {
		data.setPerformanceTypeCode(PerformanceSummaryCode.BMK_CODE.getCode());
		if (dao.getPeriod().equals(CalculationPeriodEnum.CYTD)) {
			data.setYearToDateValue(dao.getBmkVal());
		} else if (dao.getPeriod().equals(CalculationPeriodEnum.P1M)) {
			data.setOneMonthValue(dao.getBmkVal());
		} else if (dao.getPeriod().equals(CalculationPeriodEnum.P3M)) {
			data.setThreeMonthValue(dao.getBmkVal());
		} else if (dao.getPeriod().equals(CalculationPeriodEnum.P6M)) {
			data.setSixMonthValue(dao.getBmkVal());
		} else if (dao.getPeriod().equals(CalculationPeriodEnum.P1Y)) {
			data.setOneYearValue(dao.getBmkVal());
		} else if (dao.getPeriod().equals(CalculationPeriodEnum.P3YPA)) {
			data.setThreeYearValue(dao.getBmkVal());
		} else if (dao.getPeriod().equals(CalculationPeriodEnum.P5YPA)) {
			data.setFiveYearValue(dao.getBmkVal());
		} else if (dao.getPeriod().equals(CalculationPeriodEnum.PINCP)) {
			data.setInceptionValue(dao.getBmkVal());
		} else if (dao.getPeriod().equals(CalculationPeriodEnum.PINCEPPA)) {
			data.setInceptionPerformanceAdjustedValue(dao.getBmkVal());
		} else {
			data.setYearToDateValue(dao.getBmkVal());
		}
		return data;
	}

	private List<PerformanceSummary> calculateDifferenceBetweenPortfolioAndBenchMark(
			List<PerformanceSummary> performanceSummaries, Date effectiveDate, String portId) {
		List<PerformanceSummary> convertedData = new ArrayList<>();
		PerformanceSummary portfolio = null;
		PerformanceSummary bmk = null;

		for (PerformanceSummary data : performanceSummaries) {
			portId = data.getPortId();
			if (data.getPerformanceTypeName().equals(PerformanceSummaryName.PORTFOLIO_GROSS.getName())) {
				portfolio = data;
			} else if (data.getPerformanceTypeName().equals(PerformanceSummaryName.BMK_NET.getName())) {
				bmk = data;
			} else {
				addNotNullOptionalRecords(data, convertedData);
			}
		}
		// create default records (Portfolio Gross / BMK Net, Diff).
		if (null == portfolio) {
			portfolio = createPerformanceSummaryNullData(PerformanceSummaryName.PORTFOLIO_GROSS.getName(), PerformanceSummaryCode.PFT_CODE.getCode(), effectiveDate, portId);
		}
		if (null == bmk) {
			bmk = createPerformanceSummaryNullData(PerformanceSummaryName.BMK_NET.getName(), PerformanceSummaryCode.BMK_CODE.getCode(), effectiveDate, portId);
		}
		convertedData.add(createDiffRecord(portfolio, bmk));
		convertedData.add(portfolio);
		convertedData.add(bmk);

		return convertedData;

	}

	private void addNotNullOptionalRecords(PerformanceSummary ps, List<PerformanceSummary> convertedData) {
		if (isValidPerformanceSummaryName(ps.getPerformanceTypeName())) {
			if (checkIfNotNullValueExist(ps.getOneMonthValue(), ps.getThreeMonthValue(), ps.getSixMonthValue(),
					ps.getNineMonthValue(), ps.getOneYearValue(), ps.getThreeYearValue(), ps.getFiveYearValue(),
					ps.getTenYearValue(), ps.getInceptionValue(), ps.getYearToDateValue())) {
				convertedData.add(ps);
			}
		}
	}

	private boolean isValidPerformanceSummaryName(String performanceTypeName) {
		return PerformanceSummaryName.of(performanceTypeName) != null;
	}

	boolean checkIfNotNullValueExist(Object... args) {
		for (Object arg : args) {
			if (arg != null) {
				return true;
			}
		}
		return false;
	}

	private PerformanceSummary createPerformanceSummaryNullData(String name, String code, Date effectiveDate, String portId) {
		PerformanceSummary performanceSummary = new PerformanceSummary();
		performanceSummary.setPerformanceTypeName(name);
		performanceSummary.setPerformanceTypeCode(code);
		performanceSummary.setEffectiveDate(effectiveDate);
		performanceSummary.setPortId(portId);
		performanceSummary.setOneMonthValue(null);
		performanceSummary.setThreeMonthValue(null);
		performanceSummary.setSixMonthValue(null);
		performanceSummary.setNineMonthValue(null);
		performanceSummary.setOneYearValue(null);
		performanceSummary.setThreeYearValue(null);
		performanceSummary.setFiveYearValue(null);
		performanceSummary.setTenYearValue(null);
		performanceSummary.setInceptionValue(null);
		performanceSummary.setYearToDateValue(null);
		return performanceSummary;
	}

	private PerformanceSummary createDiffRecord(PerformanceSummary portfolio, PerformanceSummary bmk) {
		PerformanceSummary performanceSummary = new PerformanceSummary();
		performanceSummary.setEffectiveDate(portfolio.getEffectiveDate());
		performanceSummary.setPortId(portfolio.getPortId());
		performanceSummary.setPerformanceTypeName(PerformanceSummaryName.DIFF.getName());
		performanceSummary.setPerformanceTypeCode(PerformanceSummaryCode.DIFF_CODE.getCode());
		performanceSummary.setOneMonthValue(getDiffValue(portfolio.getOneMonthValue(), bmk.getOneMonthValue()));
		performanceSummary.setThreeMonthValue(getDiffValue(portfolio.getThreeMonthValue(), bmk.getThreeMonthValue()));
		performanceSummary.setSixMonthValue(getDiffValue(portfolio.getSixMonthValue(), bmk.getSixMonthValue()));
		performanceSummary.setNineMonthValue(getDiffValue(portfolio.getNineMonthValue(), bmk.getNineMonthValue()));
		performanceSummary.setOneYearValue(getDiffValue(portfolio.getOneYearValue(), bmk.getOneYearValue()));
		performanceSummary.setThreeYearValue(getDiffValue(portfolio.getThreeYearValue(), bmk.getThreeYearValue()));
		performanceSummary.setFiveYearValue(getDiffValue(portfolio.getFiveYearValue(), bmk.getFiveYearValue()));
		performanceSummary.setTenYearValue(getDiffValue(portfolio.getTenYearValue(), bmk.getTenYearValue()));
		performanceSummary.setInceptionValue(getDiffValue(portfolio.getInceptionValue(), bmk.getInceptionValue()));
		performanceSummary.setYearToDateValue(getDiffValue(portfolio.getYearToDateValue(), bmk.getYearToDateValue()));

		return performanceSummary;
	}

	private BigDecimal getDiffValue(BigDecimal portfolioGross, BigDecimal bmkNet) {
		BigDecimal result = null;
		if (null != portfolioGross && null != bmkNet) {
			result = portfolioGross.subtract(bmkNet);
		}
		return result;
	}

}


	PerformanceSummaryTransferService.java


package com.vanguard.corp.ics.sdt.service.impl.performancesummary;

import java.util.Date;
import java.util.List;

import javax.inject.Inject;
import javax.inject.Named;
import javax.servlet.http.HttpServletRequest;

import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.lang.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.Assert;

import com.vanguard.corp.ics.dao.target.PerformanceCalculationDAO;
import com.vanguard.corp.ics.repository.target.PerformanceCalculationRepository;
import com.vanguard.corp.ics.sdt.dao.impl.entity.report.PerformanceSummary;
import com.vanguard.corp.ics.sdt.dao.impl.repository.PerformanceSummarayRepository;
import com.vanguard.corp.ics.sdt.service.api.TransferService;
import com.vanguard.corp.ics.sdt.service.api.constants.DataSetType;
import com.vanguard.corp.ics.sdt.service.api.exception.ReadPerformanceSummaryException;
import com.vanguard.corp.ics.sdt.service.api.exception.SavePerformanceSummaryException;

@Named
public class PerformanceSummaryTransferService implements TransferService {
	private Logger log = LoggerFactory.getLogger(PerformanceSummaryTransferService.class);

	@Inject
	private PerformanceCalculationRepository readRepo;

	@Inject
	private PerformanceSummarayRepository repo;

	@Inject
	PerformanceSummaryDataConverter dataConverter;

	@Override
	public Priority getPriority() {
		return TransferService.Priority.MEDIUM;
	}

	@Override
	public boolean handles(final Date effectiveDate, final String portId, final DataSetType dataSetType,
			final HttpServletRequest request) {
		return dataSetType == null || dataSetType == DataSetType.PERFORMANCE_SUMMARY;
	}

	@Override
	@Transactional
	public void transfer(Date effectiveDate, String portId, String calledByUserId, HttpServletRequest request) {
		log.info("Transfer service input params - EffectiveDate: [" + effectiveDate + "] portId: [" + portId
				+ "] calledByUser: [" + calledByUserId + "]");
		Assert.notNull(effectiveDate, "[PerformanceSummaryTransferService.transfer] effectiveDate cannot be null");
		Assert.hasText(calledByUserId, "[PerformanceSummaryTransferService.transfer] calledByUserId is required");

		List<PerformanceCalculationDAO> targetData = readPerformanceSummary(effectiveDate, portId);
		savePerformanceSummary(targetData, effectiveDate, portId, calledByUserId);
	}

	private List<PerformanceCalculationDAO> readPerformanceSummary(Date effectiveDate, String portId) {
		List<PerformanceCalculationDAO> readList;
		try {
			if (StringUtils.isEmpty(portId)) {
				readList = readRepo.findByCalculationDateAndLastestVersion(effectiveDate);
			} else {
				readList = readRepo.findByCalculationDateAndPortCodeAndLastestVersion(effectiveDate, portId);
			}
			log.info("Is there data for EffectiveDate: [" + effectiveDate + "] portId: [" + portId+"] - "+CollectionUtils.isEmpty(readList));
		} catch (Exception e) {
			final String msg = String.format(
					"[PerformanceSummaryTransferService.transfer] %s thrown while reading performance summary; msg:%s",
					e.getClass().getSimpleName(), e.getMessage());
			throw new ReadPerformanceSummaryException(msg, e);
		}
		return readList;
	}

	private void savePerformanceSummary(List<PerformanceCalculationDAO> readList, Date effectiveDate, String portId,
			String calledByUserId) {
		try {
			/*
			 * 1. Convert 2. Calculate difference = Portfolio (Gross) - Bmk
			 * (Net). Add null values if either of Portfolio (Gross) - Bmk (Net)
			 * are not present.
			 */
			List<PerformanceSummary> performanceSummaries = dataConverter.convert(readList, effectiveDate, portId,
					calledByUserId);

			if (CollectionUtils.isNotEmpty(performanceSummaries)) {
				// Update existing recors
				updateExistingData(effectiveDate, portId);

				// insert new records
				repo.save(performanceSummaries);
			}

		} catch (Exception e) {
			final String msg = String.format(
					"[PerformanceSummaryTransferService.transfer] %s thrown while saving Performance; msg:%s",
					e.getClass().getSimpleName(), e.getMessage());
			throw new SavePerformanceSummaryException(msg, e);
		}
	}

	private void updateExistingData(Date effectiveDate, String portId) {
		List<PerformanceSummary> storedPerformanceSummary = repo
				.findByEffectiveDateAndPortIdAndEffectiveEndDateIsNull(effectiveDate, portId);
		for (PerformanceSummary performanceSummary : storedPerformanceSummary) {
			performanceSummary.setEffectiveEndDate(new Date());
		}
	}
}


com.vanguard.corp.ics.sdt.service.impl.risksummary
		LimitValidator

package com.vanguard.corp.ics.sdt.service.impl.risksummary;

import java.math.BigDecimal;

import javax.inject.Named;

import com.vanguard.corp.ics.sdt.service.api.constants.AnalyticsTypeCode;

@Named
public class LimitValidator {

	public boolean isValid(AnalyticsTypeCode analyticType, BigDecimal lowerLimit, BigDecimal upperLimit,
			BigDecimal splitLimit) {

		// Analytic type is not ExAnte. This is independent of upper limit and split limit. Lower limit can be empty or populated
		boolean valid = analyticType != AnalyticsTypeCode.EX_ANTE_RISK;

		// Analytic type is ExAnte and all limits are empty
		valid = valid || (lowerLimit == null && upperLimit == null && splitLimit == null);

		// Analytic type is ExAnte. Only lower limit is populated or lower, upper, and split are all populated
		valid = valid || (lowerLimit != null && ((upperLimit == null && splitLimit == null) || (upperLimit != null && splitLimit != null)));

		return valid;
	}
}



	RiskSummaryServiceImpl

package com.vanguard.corp.ics.sdt.service.impl.risksummary;

import java.math.BigDecimal;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.inject.Inject;
import javax.inject.Named;
import javax.servlet.http.HttpServletRequest;

import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.lang.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.Assert;

import com.vanguard.corp.ics.sdt.dao.api.domain.portal.PortalProduct;
import com.vanguard.corp.ics.sdt.dao.api.portal.ProductPortalService;
import com.vanguard.corp.ics.sdt.dao.impl.entity.report.Limit;
import com.vanguard.corp.ics.sdt.dao.impl.repository.PortfolioLimitRepository;
import com.vanguard.corp.ics.sdt.service.api.TransferService;
import com.vanguard.corp.ics.sdt.service.api.constants.AnalyticsTypeCode;
import com.vanguard.corp.ics.sdt.service.api.constants.DataSetType;
import com.vanguard.corp.ics.sdt.service.api.exception.GenerateLimitException;
import com.vanguard.corp.ics.sdt.service.api.exception.ReadProductPortalException;

@Named
public class RiskSummaryServiceImpl implements TransferService {
	
	private static final Logger LOG = LoggerFactory.getLogger(RiskSummaryServiceImpl.class);
	
	private static final BigDecimal hundred = new BigDecimal("100");

	@Inject
	ProductPortalService productPortalService;
	
	@Inject
	LimitValidator limitValidator;

	@Inject
	PortfolioLimitRepository portfolioLimitRepository;
	
	@Override
	public Priority getPriority() {
		return TransferService.Priority.MEDIUM;
	}
	
	@Override
	public boolean handles(final Date asOfDate, final String portId, final DataSetType dataSetType, final HttpServletRequest request) {
		return dataSetType == null || dataSetType == DataSetType.RISK_SUMMARY;
	}
	
	@Override
	@Transactional
	public void transfer(Date asOfDate, String portId, String calledByUserId, HttpServletRequest request) {
		Assert.hasText(calledByUserId);
		final SimpleDateFormat f = new SimpleDateFormat("yyyy-MM-dd");
		List<PortalProduct> products;
		
		try {
			products = productPortalService.getProducts(request);
		} catch (Exception e) {
			final String msg = String.format("[RiskSummaryServiceImpl.transfer] asOfDate:%s portId:%s threw %s; msg:%s ",
					f.format(asOfDate), portId, e.getClass().getSimpleName(), e.getMessage());
			throw new ReadProductPortalException(msg, e);
		}
		
		if (CollectionUtils.isNotEmpty(products)) {
	        if (StringUtils.isEmpty(portId)) {
				for (PortalProduct product : products) {
					moveRiskSummaryDataToReport(product, calledByUserId);
				}
			}
			else {
				PortalProduct product = productPortalService.getProduct(products, portId);
				moveRiskSummaryDataToReport(product, calledByUserId);
			}
	    }
		else {
	        final String msg = "[ProductDataServiceImpl.transfer] No products retrieved.";
	        throw new ReadProductPortalException(msg);
	    }
	}

	private void moveRiskSummaryDataToReport(PortalProduct product, String calledByUserId) {
		Assert.notNull(product);
	
		List<Limit> existinglimits;
		List<Limit> limits;

		limits = generateRiskSummaryLimitReportRecords(product, calledByUserId);
		existinglimits = portfolioLimitRepository.findByPortfolioCodeAndEffectiveEndDateIsNull(product.getProductCode());
		
		for (Limit existingLimit : existinglimits) {
			existingLimit.setEffectiveEndDate(new Date());
			portfolioLimitRepository.save(existingLimit);
		}
		
		portfolioLimitRepository.save(limits);
	}

	private List<Limit> generateRiskSummaryLimitReportRecords(PortalProduct product, String calledByUserId) {
		org.springframework.util.Assert.notNull(product);
		
		String portId = product.getProductCode();
		List<Limit> limits = new ArrayList<>();
		
		for (AnalyticsTypeCode analyticType : AnalyticsTypeCode.values()) {
			
			if (!analyticType.hasLimit()) {
				continue;
			}
			
			Limit limit = new Limit();
			limit.setEffectiveBeginDate(new Date());
			
			limit.setPortfolioCode(portId);
			limit.setLimitTypeCode(analyticType.getCode());
			limit.setLimitName(analyticType.getName());	
			limit.setUpdatedUser(calledByUserId);
			
			BigDecimal lowerLimit = getLowerLimit(product, analyticType);
			BigDecimal upperLimit = getUpperLimit(product, analyticType);
			BigDecimal splitLimit = (analyticType == AnalyticsTypeCode.EX_ANTE_RISK) ? product.getFumLimitexAnte() : null;
			
			if (limitValidator.isValid(analyticType, lowerLimit, upperLimit, splitLimit)) {
				LOG.info("Valid limits lower:{} upper:{} split:{} for {} on {} portfolio", lowerLimit, upperLimit, splitLimit, analyticType, portId);
				
			    limit.setLowerLimitValue(lowerLimit);
			    limit.setUpperLimitValue(upperLimit);
			    limit.setFumSplitLimitValue(splitLimit);
			    
			    limits.add(limit);
			} else {
				LOG.error("Invalid limits lower:{} upper:{} split:{} for {} on {} portfolio", lowerLimit, upperLimit, splitLimit, analyticType, portId);
				throw new GenerateLimitException("Received invalid limits for " + portId + " portfolio", null);
			}
		}
		
		return limits;
	}
	
	private BigDecimal getLowerLimit(PortalProduct product, AnalyticsTypeCode analyticType) {
		BigDecimal limit;
		
		if (analyticType == AnalyticsTypeCode.EX_ANTE_RISK && product.getExAnteMaxBreachIMA() != null) {
			BigDecimal benchmarkValue = product.getExAnteMaxBreachIMA();	
			limit = benchmarkValue.divide(hundred);
		}  else if ((analyticType == AnalyticsTypeCode.ONE_YR_EX_POST || analyticType == AnalyticsTypeCode.THREE_YR_EX_POST) && product.getExPostMaxBreachIMA() != null) {
			BigDecimal benchmarkValue = product.getExPostMaxBreachIMA();
			limit = benchmarkValue.divide(hundred);
		} else {
			limit = null;
		}

		return limit;
	}
	
	private BigDecimal getUpperLimit(PortalProduct product, AnalyticsTypeCode analyticType) {
		BigDecimal limit;
		
		if (analyticType == AnalyticsTypeCode.EX_ANTE_RISK && product.getExAnteMaxBreachIMAAbove() != null) {
			BigDecimal benchmarkValue = product.getExAnteMaxBreachIMAAbove();
			limit = benchmarkValue.divide(hundred);
		} else {
			limit = null;
		}
		
		return limit;
	}
}


com.vanguard.corp.ics.sdt.webservice(Application.java
NonProductionCondition.java
NTHeaderFilter.java)


com.vanguard.corp.ics.sdt.webservice.resource
	CalculationEngineResource.java


package com.vanguard.corp.ics.sdt.webservice.resource;

import java.text.ParseException;
import java.util.Optional;

import javax.annotation.security.PermitAll;
import javax.ws.rs.Consumes;
import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;

import com.vanguard.corp.ics.portal.PortalService;
import com.vanguard.corp.ics.portal.domain.Product;
import com.vanguard.corp.ics.sdt.service.calculation.PerformanceCalculationService;

@PermitAll
@Path(CalculationEngineResource.PATH)
@Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })
@Consumes({ MediaType.APPLICATION_JSON })
public class CalculationEngineResource {

	private static Logger LOGGER = LoggerFactory.getLogger(CalculationEngineResource.class);

	public static final String PATH = "calculation";

	@Autowired
	private PerformanceCalculationService calcService;

	@Autowired
	private PortalService portal;

	@GET
	@Path("{month}/{year}")
	public Response finalCalcsAll(@PathParam("month") Integer month, @PathParam("year") Integer year)
			throws ParseException {

		LOGGER.debug("Running final calcs for {}-{}", month, year);

		calcService.calculate(month, year);

		return Response.ok("Finished Calcs").build();
	}

	@GET
	@Path("{portfolioCode}/{month}/{year}")
	public Response finalCalcsSingle(@PathParam("portfolioCode") String portfolioCode,
			@PathParam("month") Integer month, @PathParam("year") Integer year) {

		final Optional<Product> p = portal.getProduct(portfolioCode);

		if (!p.isPresent()) {
			LOGGER.debug("Error fetching product: {}", portfolioCode);
			return Response.serverError().build();
		}

		LOGGER.debug("Running final calcs for {}-{}", month, year);
		LOGGER.debug("Calculating with Code={}", portfolioCode);

		calcService.calculate(p.get(), month, year);

		return Response.ok("Finished Calcs").build();
	}

}


	CommentaryDTO.java


package com.vanguard.corp.ics.sdt.webservice.resource;

import javax.validation.constraints.NotNull;
import javax.validation.constraints.Pattern;

import com.vanguard.validator.constraints.SafeString;

public class CommentaryDTO {
	public static final String PARM_AS_OF_DATE = "asOfDate";
	public static final String PARM_PORT_ID = "portId";
	public static final String PARM_DATA_SET = "dataSet";
	public static final String DATE_PATTERN = "^(\\d{4})-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])$"; // yyyy-MM-dd
	public static final String ALLOWED_CHARS = "_";

	private String Id;
	
	@NotNull
	@Pattern(regexp=DATE_PATTERN)
	private String asOfDate;

	@NotNull
	@SafeString
	private String portId;

	@NotNull
	@SafeString
	private String commentary;

	public String getAsOfDate() {
		return asOfDate;
	}

	public String getCommentary() {
		return commentary;
	}

	public String getId() {
		return Id;
	}

	public String getPortId() {
		return portId;
	}

	public void setAsOfDate(final String asOfDate) {
		this.asOfDate = asOfDate;
	}

	public void setCommentary(final String commentary) {
		this.commentary = commentary;
	}

	public void setId(String id) {
		Id = id;
	}

	public void setPortId(final String portId) {
		this.portId = portId;
	}
}


	CommentaryResource.java


package com.vanguard.corp.ics.sdt.webservice.resource;

import java.util.Date;

import javax.annotation.security.PermitAll;
import javax.inject.Inject;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import javax.validation.constraints.NotNull;
import javax.ws.rs.Consumes;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.QueryParam;
import javax.ws.rs.container.ResourceContext;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.vanguard.corp.ics.sdt.service.api.CommentaryService;
import com.vanguard.corp.ics.sdt.service.api.util.DateParser;

@PermitAll
@Path(CommentaryResource.PATH)
@Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })
@Consumes({ MediaType.APPLICATION_JSON })
public class CommentaryResource {

	public static final String PATH = "commentary";

	private static Logger LOGGER = LoggerFactory.getLogger(CommentaryResource.class);
	private final DateParser dateParser = new DateParser();

	@Context
	private ResourceContext resourceContext;

	@Context
	private HttpServletRequest request;

	@Inject
	private CommentaryService commentaryService;

	@GET
	public Response retrieveCommentary(@NotNull @Valid @QueryParam(value = "asOfDate") String asOfDate,
			@NotNull @Valid @QueryParam(value = "portId") String portId) {
		Date inputDate;

		try {
			inputDate = dateParser.parse(asOfDate);
		} catch (Exception e) {
			LOGGER.error(String.format("[CommentaryResource.retrieveCommentary] %s thrown; msg:%s",
					e.getClass().getSimpleName(), e.getMessage()), e);
			return Response.status(Response.Status.BAD_REQUEST).build();
		}

		CommentaryDTO commentary = commentaryService.getCommentary(portId, inputDate);

		if (commentary != null) {
			System.out.println("Commentary Id: " + commentary.getId());
			System.out.println("Commentary Port Id: " + commentary.getPortId());
			System.out.println("Commentary Date: " + commentary.getAsOfDate());
			System.out.println("Commentary Text: " + commentary.getCommentary());
			System.out.println("Status is: " + Response.ok().entity(commentary).build().getStatus());
			
			return Response.ok().entity(commentary).build();
			
		}else{
			System.out.println("Could not find Mandate with asOfDate: " + asOfDate + " and portId: " + portId);
			System.out.println("Reponse: " + Response.status(Response.Status.BAD_REQUEST).build());
			
			return Response.status(Response.Status.BAD_REQUEST).build();
		}
		
	}

	@POST
	public Response updateCommentary(@Valid CommentaryDTO commentary) {

		commentaryService.saveOrUpdateCommentary(commentary);

		return Response.ok().entity(commentary).build();
	}
}


	DataTransferParameters.java

package com.vanguard.corp.ics.sdt.webservice.resource;

import javax.validation.constraints.NotNull;
import javax.validation.constraints.Pattern;
import javax.ws.rs.HeaderParam;
import javax.ws.rs.QueryParam;

import com.vanguard.validator.constraints.SafeString;
import com.vanguard.validator.constraints.UserName;

public class DataTransferParameters {

	public static final String PARM_AS_OF_DATE = "asOfDate";
	public static final String PARM_PORT_ID = "portId";
	public static final String PARM_DATA_SET = "dataSet";
	public static final String PARM_UID = "UID"; // from siteminder
	public static final String DATE_PATTERN = "^(\\d{4})-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])$"; // yyyy-MM-dd
	public static final String ALLOWED_CHARS = "_";

	@NotNull
	@Pattern(regexp=DATE_PATTERN)
	@QueryParam(PARM_AS_OF_DATE)
	private String asOfDate;

	@SafeString
	@QueryParam(PARM_PORT_ID)
	private String portId;

	@SafeString(allow=ALLOWED_CHARS)
	@QueryParam(PARM_DATA_SET)
	private String dataSet;

	@NotNull
	@UserName
	@HeaderParam(PARM_UID)
	private String uid;

	public String getAsOfDate() {
		return asOfDate;
	}

	public void setAsOfDate(final String asOfDate) {
		this.asOfDate = asOfDate;
	}

	public String getPortId() {
		return portId;
	}

	public void setPortId(final String portId) {
		this.portId = portId;
	}

	public String getDataSet() {
		return dataSet;
	}

	public void setDataSet(final String dataSet) {
		this.dataSet = dataSet;
	}

	public String getUid() {
		return uid;
	}

	public void setUid(String uid) {
		this.uid = uid;
	}
}

	DataTransferResource.java



package com.vanguard.corp.ics.sdt.webservice.resource;

import java.util.Date;

import javax.annotation.security.PermitAll;
import javax.inject.Inject;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import javax.ws.rs.BeanParam;
import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.container.ResourceContext;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.vanguard.corp.ics.sdt.service.api.DataTransferService;
import com.vanguard.corp.ics.sdt.service.api.constants.DataSetType;
import com.vanguard.corp.ics.sdt.service.api.util.DateParser;

@PermitAll
@Path(DataTransferResource.PATH)
@Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })
public class DataTransferResource {

	public static final String PATH = "transfer";
	public static final String DATE_FORMAT = "yyyy-MM-dd";
	
	private static Logger LOGGER = LoggerFactory.getLogger(DataTransferResource.class);
	private final DateParser dateParser = new DateParser();

	@Context
	private ResourceContext resourceContext;

	@Context
	private HttpServletRequest request;

	@Inject
	private DataTransferService service;

	@GET
	public Response transfer(@Valid @BeanParam DataTransferParameters parms) {
		Date asOfDate;
		DataSetType dataSetType;

		try {
			asOfDate = dateParser.parse(parms.getAsOfDate());
			dataSetType = parseDataSet(parms.getDataSet());
			
			// temporary log to make sure user id is retrieved successfully
			LOGGER.info("Request by {} for date:{}, portId:{}, dataSet:{}", parms.getUid(), parms.getAsOfDate(), parms.getPortId(), parms.getDataSet());
		}
		catch (Exception e) {
			LOGGER.error(String.format("[DataTransferResource.transfer] %s thrown; msg:%s",
					e.getClass().getSimpleName(), e.getMessage()), e);
			return Response.status(Response.Status.BAD_REQUEST).build();
		}

		service.transfer(asOfDate, parms.getPortId(), dataSetType, parms.getUid(), request);
		return Response.ok().build();
	}

	private DataSetType parseDataSet(final String dataSet) {
		return dataSet == null ? null : DataSetType.valueOf(dataSet);
	}
}

	TomcatDefaultErrorResource.java



package com.vanguard.corp.ics.sdt.webservice.resource;

import java.io.IOException;

import javax.servlet.RequestDispatcher;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.core.Context;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;

/**
 * Embedded tomcat is forwarding 500s to this url as the catch all error handler
 * This will inspect the incoming request and log something.
 * Removing this resource causes the 500s to convert to 404s.
 * 
 * TODO This should be moved to spring-boot-common
 * 
 * @author ush8
 *
 */
@Component
@Path("/error")
public class TomcatDefaultErrorResource {

	private static final String ERROR = "ERROR";
	private Logger logger = LoggerFactory.getLogger(TomcatDefaultErrorResource.class);

	@GET
	public String handleError(@Context HttpServletResponse response, @Context HttpServletRequest request) throws IOException {

		// this is from tomcat's default error handler logic. See StandardHostValve.throwable
		if (ERROR.equals(getDispatcherType(request))) {
			Integer originalStatusCode = (Integer) request.getAttribute(RequestDispatcher.ERROR_STATUS_CODE);
			String originalURL = (String) request.getAttribute(RequestDispatcher.ERROR_REQUEST_URI);
			String originalMessage = (String) request.getAttribute(RequestDispatcher.ERROR_MESSAGE);
			Throwable originalThrown = (Throwable) request.getAttribute(RequestDispatcher.ERROR_EXCEPTION);

			response.setStatus(originalStatusCode.intValue());
			logger.error("Error From URL:" + originalURL + " Message:" + originalMessage + " StatusCode:" + originalStatusCode, originalThrown);
		} else {
			response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
		}
		response.setContentLength(0);
		response.getOutputStream().flush();
		response.getOutputStream().close();
		
		return null;
	}

	protected String getDispatcherType(HttpServletRequest request) {
		return request.getDispatcherType().toString();
	}
	
}


src/main/resources

deployment

dev
	env.properties
SPRING_PROFILES_ACTIVE=internal

	jvm.properties
RTEID=inte
user.timezone=America/New_York
publicCloud=false

# HVLM Properties
# 0trace 1 info  2warn 3 error 4 alert
DiagnosticsLogThreshold=0
LogSink=HVLM=DIAG,REP
LOG_MANAGER_HOST=devcrploghost.vanguard.com
LOG_MANAGER_PORT=17326
LOG_MANAGER_REPORT_HOST=devcrploghost.vanguard.com
LOG_MANAGER_REPORT_PORT=17326
FailoverDirectory=/home/vcap/logs
FailoverDirectory_Report=/home/vcap/logs


	vault.properties
# Dev Oracle User 1
ORACLE_GMRADM_SRS_USER_ID1=IDVAULT;type=USERNAME;appId=SRS_NONPRD;query=safe:ORA_SRS_NONPRD,folder:Root,object:Database-Oracle_RD-GMRDEV00_ALL-WOSRS08D;IDVAULTEND
ORACLE_GMRADM_SRS_PASSWORD1=IDVAULT;type=PASSWORD;appId=SRS_NONPRD;query=safe:ORA_SRS_NONPRD,folder:Root,object:Database-Oracle_RD-GMRDEV00_ALL-WOSRS08D;IDVAULTEND

# Dev Oracle User 2
ORACLE_GMRADM_SRS_USER_ID2=IDVAULT;type=USERNAME;appId=SRS_NONPRD;query=safe:ORA_SRS_NONPRD,folder:Root,object:Database-Oracle_RD-GMRDEV00_ALL-WOSRS09D;IDVAULTEND
ORACLE_GMRADM_SRS_PASSWORD2=IDVAULT;type=PASSWORD;appId=SRS_NONPRD;query=safe:ORA_SRS_NONPRD,folder:Root,object:Database-Oracle_RD-GMRDEV00_ALL-WOSRS09D;IDVAULTEND


deve-us-east1
prod
prod-us-east1
test

META-INF
	RTE
		deve
			security-database-override.properties
#SECURITY_JDBC_URL=jdbc:db2://db2cdd0g-aws.vanguard.com:5030/VGIDD0G:sslConnection=true;
#SECURITY_JDBC_URL=jdbc:db2://db2cdd0g.vanguard.com:5030/VGIDD0G

#SAT
SECURITY_JDBC_URL=jdbc:db2://db2cdq0g.vanguard.com:5032/VGIDQ0G
SECURITY_USER_ID=TESRSSAT
SECURITY_PASSWORD=FAnb7r62

		sma-data-transformer.webservice-override.properties

#Oracle 
ORACLE_GMRADM_JDBC_URL=jdbc:oracle:thin:@ldap://oidprd40.vanguard.com:3060/gmrdev00_all,cn=OracleContext,dc=vanguard,dc=com ldap://oidprd50.vanguard.com:3060/gmrdev00_all,cn=OracleContext,dc=vanguard,dc=com ldap://oidprd60.vanguard.com:3060/gmrdev00_all,cn=OracleContext,dc=vanguard,dc=com

# Portal Config
portal.products.endpoint=http://satapii.vanguard.com:1080/rs/cf/portal-product-webservice/rs/products
portal.references.endpoint=http://satapii.vanguard.com:1080/rs/cf/global-product-portal-webservice/rs
#portal.maxConnectionAttempts=3 (commented out to use default value)

# Portal SDK Config
portal.tokenURL=https://satspx.vanguard.com:1443/ssgtokenprovider/CreateToken
portal.retryCount=3
portal.username=ASDL01Q
portal.password=plh2Gcc4

# Security Master Configuration
security.master.username=VIAWebMethods 
security.master.password=VIAWebMethods
security.master.connectionURL=jdbc:sqlserver://devp-sqlinv.vanguard.com.au:1433;databaseName=SecurityMaster
security.master.driverClassName=com.microsoft.sqlserver.jdbc.SQLServerDriver
security.master.showsql=true

# JPA Properties
jpa.hibernate.show_sql=true
jpa.hibernate.format_sql=true
jpa.hibernate.use_sql_comments=true

		suds-lib-override.properties
#SERVICE_SUB_SERVICE_FLAG=N - default yes needed Y
EXCEPTION_IF_HEADER_MISSING=false
#AEMS_CACHE_TIME_TO_LIVE in seconds
AEMS_CACHE_TIME_TO_LIVE=120
#AEMS_CACHE_TIME_TO_IDLE in seconds
AEMS_CACHE_TIME_TO_IDLE=120 

SUDS_LOCAL_CACHE_TIME_TO_LIVE=120
SUDS_LOCAL_CACHE_TIME_TO_IDLE=120

#PERMISSION_EVALUATOR=com.vanguard.ics.aum.RegionAndCoverageAwarePermissionEvaluator
#PERMISSION_EVALUATOR=com.vanguard.services.suds.VGPermissionEvaluator

# Needed for security DB connection - check ssi for bamboo
JDBC_DB2_PACKAGE_NAME=AVGI07
JDBC_DB2_SCHEMA_NAME=DQ0GWSAT


#INT
#JDBC_DB2_PACKAGE_NAME=AVGI02
#JDBC_DB2_SCHEMA_NAME=DD0GWUN1


		inte

			security-database-override.properties
#SECURITY_JDBC_URL=jdbc:db2://db2cdd0g-aws.vanguard.com:5030/VGIDD0G:sslConnection=true;
#SECURITY_JDBC_URL=jdbc:db2://db2cdd0g.vanguard.com:5030/VGIDD0G

#SAT
SECURITY_JDBC_URL=jdbc:db2://db2cdq0g.vanguard.com:5032/VGIDQ0G
SECURITY_USER_ID=TESRSSAT
SECURITY_PASSWORD=FAnb7r62


			sma-data-transformer.webservice-override.properties

#Oracle 
ORACLE_GMRADM_JDBC_URL=jdbc:oracle:thin:@ldap://oidprd40.vanguard.com:3060/gmrdev00_all,cn=OracleContext,dc=vanguard,dc=com ldap://oidprd50.vanguard.com:3060/gmrdev00_all,cn=OracleContext,dc=vanguard,dc=com ldap://oidprd60.vanguard.com:3060/gmrdev00_all,cn=OracleContext,dc=vanguard,dc=com

# Portal config
portal.products.endpoint=http://satapii.vanguard.com:1080/rs/cf/portal-product-webservice/rs/products
portal.references.endpoint=http://satapii.vanguard.com:1080/rs/cf/global-product-portal-webservice/rs
#portal.maxConnectionAttempts=3 (commented out to use default value)

# Portal SDK Config
portal.tokenURL=https://satspx.vanguard.com:1443/ssgtokenprovider/CreateToken
portal.retryCount=3
portal.username=ASDL01Q
portal.password=plh2Gcc4

# Security Master Configuration
security.master.username=VIAWebMethods 
security.master.password=VIAWebMethods
security.master.connectionURL=jdbc:sqlserver://DVNM1A2A6.vanguard.com.au:1433;databaseName=SecurityMaster
security.master.driverClassName=com.microsoft.sqlserver.jdbc.SQLServerDriver
security.master.showsql=true

# JPA Properties
jpa.hibernate.show_sql=false
jpa.hibernate.format_sql=false
jpa.hibernate.use_sql_comments=false

		suds-lib-override.properties

#SERVICE_SUB_SERVICE_FLAG=N - default yes needed Y
EXCEPTION_IF_HEADER_MISSING=false
#AEMS_CACHE_TIME_TO_LIVE in seconds
AEMS_CACHE_TIME_TO_LIVE=120
#AEMS_CACHE_TIME_TO_IDLE in seconds
AEMS_CACHE_TIME_TO_IDLE=120 

SUDS_LOCAL_CACHE_TIME_TO_LIVE=120
SUDS_LOCAL_CACHE_TIME_TO_IDLE=120

#PERMISSION_EVALUATOR=com.vanguard.ics.aum.RegionAndCoverageAwarePermissionEvaluator
#PERMISSION_EVALUATOR=com.vanguard.services.suds.VGPermissionEvaluator

# Needed for security DB connection - check ssi for bamboo
JDBC_DB2_PACKAGE_NAME=AVGI07
JDBC_DB2_SCHEMA_NAME=DQ0GWSAT


#INT
#JDBC_DB2_PACKAGE_NAME=AVGI02
#JDBC_DB2_SCHEMA_NAME=DD0GWUN1


		prdprd
			enterprise-database-override.properties
ENTERPRISE_JDBC_URL=jdbc:db2://db2cdp0g-aws.vanguard.com:5034/VGIDP0G:sslConnection=true;
#ENTERPRISE_JDBC_URL=jdbc:db2://db2cdp0g.vanguard.com:5034/VGIDP0G

# In a real production app, user and password should NEVER be stored
# in this properties file.  These are stored in the SSI file managed by BAM.
#
# These are overridden by [internal|external]-vault.properties
ENTERPRISE_USER_ID=
ENTERPRISE_PASSWORD=

		security-database-override-properties

SECURITY_JDBC_URL=jdbc:db2://db2cdp0g-aws.vanguard.com:5034/VGIDP0G:sslConnection=true;
#SECURITY_JDBC_URL=jdbc:db2://db2cdp0g.vanguard.com:5034/VGIDP0G


	sma-data-transformer
			security.xml
<?xml version="1.0" encoding="UTF-8" ?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:beans="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd 
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!--create-session="stateless" should be used carefully.
      By using stateless mode, user's state/authorizations are not cached.
      they are retrieved every time from the database and could hava performance impact    
      <http create-session="stateless" entry-point-ref="entryPoint">
     -->
	   
	<http create-session="stateless" auto-config="true" use-expressions="true">	
		<intercept-url pattern="/rs/**" access="permitAll" />
		<intercept-url pattern="/**" access="permitAll" />
 		<access-denied-handler ref="accessDeniedHandler"></access-denied-handler>			
		<custom-filter ref="siteminderFilter" position="PRE_AUTH_FILTER" />
 	</http> 
	
</beans:beans>

	spring-bootstrap-standalone.xml

<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:config="http://www.vanguard.com/schema/config"
	xmlns:jee="http://www.springframework.org/schema/jee" xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.vanguard.com/schema/config http://www.vanguard.com/schema/config/vanguard-config.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd">

	<config:vanguard-property-placeholder
		moduleId="sma-data-transformer.webservice" />
	
	<context:component-scan base-package="com.vanguard.corp.ics.sdt, com.vanguard.corp.ics,com.vanguard.corp.security.master" />

	<!-- cache configuration -->
	<import
		resource="classpath*:/META-INF/caching-provider/spring-bootstrap-autowire.xml" />

</beans>


	spring-bootstrap.xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:config="http://www.vanguard.com/schema/config"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
	    http://www.vanguard.com/schema/config http://www.vanguard.com/schema/config/vanguard-config.xsd">

    <config:vanguard-property-placeholder
		moduleId="sma-data-transformer.webservice" />	    
	    
    <import resource="spring-services.xml" />
    <import resource="security.xml" />
</beans>
	    
	    
	    spring-services.xml

<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:config="http://www.vanguard.com/schema/config"
	xmlns:jee="http://www.springframework.org/schema/jee" xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.vanguard.com/schema/config http://www.vanguard.com/schema/config/vanguard-config.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd">

	

	<context:component-scan base-package="com.vanguard.corp.ics.sdt.webservice"/>
	
	
</beans>


	sma-data-transformer.webservice
			sma-data-transformer.webservice-default.properties

# Portal config
portal.products.endpoint=products-endpoint-must-be-defined-in-rte-override-properties-file
portal.references.endpoint=references-endpoint-must-be-defined-in-rte-override-properties-file
portal.maxConnectionAttempts=3

# Portal SDK Config
portal.tokenURL=https://satspx.vanguard.com:1443/ssgtokenprovider/CreateToken
portal.retryCount=3
portal.username=ASDL01Q
portal.password=plh2Gcc4



siteminder
	internal
		overrides-internal-prd.properties
SM_AUTHN_BACKEND=crew_ad_authn
SM_AUTHZ_BACKEND=crew_prod_authz


		overrides-internal-satf.properties

SM_AUTHN_BACKEND=crew_ad_authn
SM_AUTHZ_BACKEND=crew_f_authz

		overrides.properties

# Need to comment out test / sat region properties
# and uncomment prod config before each prod elevation
SM_AUTHN_BACKEND=crew_ad_authn
SM_AUTHZ_BACKEND=crew_f_authz
#SM_AUTHZ_BACKEND=crew_prod_authz

		srs_domain.xml

<?xml version="1.0" encoding="utf-8"?>
<siteminder xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
	<application description="Separately Managed Account Data Transformer (SRS) Internal Region"
		name="[SM_POLICY_DOMAIN_NAME]" network="internal">
        <authenticationdirectory name="[SM_AUTHN_BACKEND]"/>
	
		 <protectedresources agent="[SM_AGENTGROUP_NAME]" 
        					authorizationdirectory="[SM_AUTHZ_BACKEND]" 
        					authscheme="[SM_IWA_AUTHSCHEME]"
        					idletimeout="120"
        					absolutetimeout="720">
				
			<url name="/rs/cf/sma-data-transformer-webservice" pattern="/rs/cf/sma-data-transformer-webservice">
				<allowrule action="GET POST PUT DELETE" filter="*" name="SRS_GET_POST_PUT_DELETE"
					policy="SRS_ALLOW_POLICY" />
				<accessdenyrule filter="*" name="SRS_FAIL_AUTHZ" policy="ACCESS_DENIED"/>
			</url>
		</protectedresources>
		
		<unprotectedresources agent="[SM_AGENTGROUP_NAME]">
			<url name="spring_actuator_development" pattern="/rs/cf/sma-data-transformer-webservice-development-current/spring"/>
        	<url name="spring_actuator_test" pattern="/rs/cf/sma-data-transformer-webservic-test-current/spring"/>
		</unprotectedresources>
		
		<allowresponse name="ALL_HEADERS">
			<responseattribute name="HTTP-Header-Variable" value="UID=&lt;%userattr=&quot;uid&quot;%&gt;"/>
            <responseattribute name="HTTP-Header-Variable" value="SRV_TYPE=INTR"/>
            <responseattribute name="HTTP-Header-Variable" value="UNAME=&lt;%userattr=&quot;uname&quot;%&gt;"/>
            <responseattribute name="HTTP-Header-Variable" value="POID=&lt;%userattr=&quot;poid&quot;%&gt;"/>  
			<responseattribute name="HTTP-Header-Variable" 	value="Cache-control=no-store, no-cache, must-revalidate"/>
			<responseattribute name="HTTP-Header-Variable" 	value="Pragma=no-cache"/>
			<responseattribute name="HTTP-Header-Variable"	value="Expires=Sun, 16 Apr 1995 21:00:00 GMT"/>
			<!-- SUDS required headers -->
			<responseattribute name="HTTP-Header-Variable" value="APP_CODE=SRS"/>
			<responseattribute name="HTTP-Header-Variable" value="CREMS_DOMAIN=0"/>			
		</allowresponse>
		
		<accessdenyresponse name="ON_ACCESS_REJECT" redirect="/rs/AAAccessDenied" />
			
		<allowpolicy name="SRS_ALLOW_POLICY" response="ALL_HEADERS">
			<role class="User Attribute" filter="(role=*)"
				userdirectory="[SM_AUTHZ_BACKEND]" />
		</allowpolicy>
		
		<accessdenypolicy name="ACCESS_DENIED" response="ON_ACCESS_REJECT">
			<role class="User Attribute" filter="(role=*)" userdirectory="[SM_AUTHZ_BACKEND]" />
		</accessdenypolicy>
		
	</application>
</siteminder>


		srs_system.xml

<?xml version="1.0" encoding="UTF-8"?>
<siteminder>
	<system network="internal">
		<agent name="[SM_WEBAGENT_NAME]" description="SRS_WEB_AGENT" />
		<agentconfig webserver="apache" name="[SM_WEBAGENT_NAME]"
			webserverpath="[WEBSVR_BASEDIR]/https-[ENV_WS_DNS_VIRTUAL_HOSTNAME]">
			<parameter name="ReqCookieErrorFile" value="[USA_SM_ReqCookieErrorFile]" />
			<parameter name="ServerErrorFile" value="[USA_SM_ServerErrorFile]" />
			<parameter name="TraceFile" value="[USA_SM_WebAgentTraceLoggingEnabled]" />
			<!-- Probably should use the default domain unless there is a good reason 
				to override it -->
			<!-- <parameter name="CookieDomain" value="[SM_COOKIE_DOMAIN]" /> -->
			<parameter name="LogOffUri" value="[USA_SM_LogOffUri]" />
		</agentconfig>
		<agentgroup name="[SM_AGENT_GROUP]">
			<member>[SM_WEBAGENT_NAME]</member>
		</agentgroup>
	</system>
</siteminder>



application.properties

	## Favor Vanguard Spring Core over Spring Boot.
# https://vanguard.haydle.com/questions/5127-is-there-a-heirachy-for-bamboo-properties
#
# Spring Boot configuration
# Hierarchy: http://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-external-config.html
# Common properties: http://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#appendix
#
# This file should be used to set properties that are safe to inherit by any profile
spring.application.name=sma-data-transformer.webservice

# HVLM log level
# 0=TRACE 
# 1=INFO 
# 2=WARNING 
# 3=ERROR 
# 4=ALERT 
DiagnosticsLogThreshold=0
LogSink=CONSOLE;FILE(C:/logs)=DIAG,REP;
AppName=APP

# Tomcat gzip compression
server.tomcat.compressableMimeTypes=application/json,application/xml,text/html,text/xml,text/plain,text/css,application/javascript,application/x-javascript,csv/comma-separated-values,image/png,image/gif,image/jpeg
# Min response length in bytes, can use server.tomcat.compression=on for default 2048 byte size
server.tomcat.compression=100

# Jersey default properties
jersey.config.server.debug=false

# JPA default properties
spring.jpa.show-sql=false

# Hystrix default properties
hystrix.command.default.execution.isolation.strategy=THREAD
hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds=30000
hystrix.command.default.execution.timeout.enabled=true
hystrix.command.default.fallback.enabled=true
hystrix.command.default.circuitBreaker.enabled=true
hystrix.command.default.circuitBreaker.requestVolumeThreshold=20
hystrix.command.default.circuitBreaker.sleepWindowInMilliseconds=5000
hystrix.command.default.circuitBreaker.errorThresholdPercentage=50
hystrix.threadpool.default.coreSize=10 


build-plan.properties

ephemeral.organization=ICS
ephemeral.space=EPHEMERAL
ephemeral.qualifier=pre
non.prod.organization=ICS
non.prod.space=DEVELOPMENT
non.prod.qualifier=pre
prod.organization=ICS
prod.space=PRODUCTION
prod.qualifier=pre
deployment.type=internal

change-management.properties

app.prefix=SRS
service.now.app.id=SRS-SMA Service
business.unit.affected=ICS
group.email.list=service_manager_notifications@vanguard.com
post.certifier.email=
individual.email.list=
tech.lead.number=
project.lead.number=

manifest-template.yml

timeout: 180
instances: 1
applications:
- name: $application.name$-$application.version$
  path: target/$application.name$-$application.version$.jar


src/test/java

com.vanguard.corp.ics.portal.config
	PortalSDKConfigurationTest.java

package com.vanguard.corp.ics.portal.config;

import static org.junit.Assert.assertEquals;

import org.junit.Test;

public class PortalSDKConfigurationTest {

	private static final String TEST_TOKEN_URL = "testTokenUrl";
	private static final String TEST_USERNAME = "testUsername";
	private static final String TEST_REFERENCE_END_POINT = "testReferenceEndPoint";
	private static final String TEST_ENDPOINT = "testEndpoint";
	private static final String TEST_PASSWORD = "testPassword";
	private static final int TEST_RETRY_COUNT = 1;

	private PortalSDKConfiguration unitUnderTest = new PortalSDKConfiguration();

	@Test
	public void setup() {
		unitUnderTest.setPortalPassword(TEST_PASSWORD);
		unitUnderTest.setPortalProductEndpoint(TEST_ENDPOINT);
		unitUnderTest.setPortalReferenceEndpoint(TEST_REFERENCE_END_POINT);
		unitUnderTest.setPortalUsername(TEST_USERNAME);
		unitUnderTest.setRetryCount(TEST_RETRY_COUNT);
		unitUnderTest.setTokenURL(TEST_TOKEN_URL);

		assertEquals(TEST_PASSWORD, unitUnderTest.getPortalPassword());
		assertEquals(TEST_ENDPOINT, unitUnderTest.getPortalProductEndpoint());
		assertEquals(TEST_REFERENCE_END_POINT, unitUnderTest.getPortalReferenceEndpoint());
		assertEquals(TEST_USERNAME, unitUnderTest.getPortalUsername());
		assertEquals(TEST_RETRY_COUNT, unitUnderTest.getRetryCount());
		assertEquals(TEST_TOKEN_URL, unitUnderTest.getTokenURL());
	}

}

com.vanguard.corp.ics.sdt.behaviors.commentary
	CommentaryDtoDataTest.java

package com.vanguard.corp.ics.sdt.behaviors.commentary;

import static org.junit.Assert.*;

import org.junit.Test;

import com.vanguard.corp.ics.sdt.webservice.resource.CommentaryDTO;

public class CommentaryDtoDataTest {
	
	private final String TEST_ID = "1";
	private final String TEST_PORTFOLIO_ID = "TestPortId";
	private final String TEST_AS_OF_DATE = "2017-01-01";
	private final String TEST_COMMENTARY_TEXT = "Test Commentary.";

	/**
	 * Test getters and setters
	 */
	@Test
	public void shouldGetAndSetValues() {
		CommentaryDTO commentary = new CommentaryDTO();
		
		commentary.setId(TEST_ID);
		commentary.setPortId(TEST_PORTFOLIO_ID);
		commentary.setAsOfDate(TEST_AS_OF_DATE);
		commentary.setCommentary(TEST_COMMENTARY_TEXT);
		
		assertEquals(commentary.getId(), TEST_ID);
		assertEquals(commentary.getPortId(), TEST_PORTFOLIO_ID);
		assertEquals(commentary.getAsOfDate(), TEST_AS_OF_DATE);
		assertEquals(commentary.getCommentary(), TEST_COMMENTARY_TEXT);
		
	}

}

	CommentaryEndpointTest.java


package com.vanguard.corp.ics.sdt.behaviors.commentary;

import static org.junit.Assert.assertEquals;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.doNothing;
import static org.mockito.Mockito.doThrow;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;

import javax.ws.rs.client.Entity;
import javax.ws.rs.client.WebTarget;
import javax.ws.rs.core.Response;

import org.junit.Before;
import org.junit.Test;
import org.mockito.MockitoAnnotations;

import com.vanguard.corp.ics.sdt.service.api.CommentaryService;
import com.vanguard.corp.ics.sdt.test.commentary.CommentaryServiceApplicationTester;
import com.vanguard.corp.ics.sdt.webservice.resource.CommentaryDTO;
import com.vanguard.corp.ics.sdt.webservice.resource.CommentaryResource;
import com.vanguard.corp.ics.sdt.webservice.resource.DataTransferParameters;

public class CommentaryEndpointTest extends CommentaryServiceApplicationTester {

	private CommentaryService mockService;

	@Before
	public void init() {
		MockitoAnnotations.initMocks(this);
		mockService = this.getMockService();
	}

	@Test
	public void endpointHandlesRetrieveWithAsOfDateAndPortIdParameters() throws ParseException {
		String asOf = "2017-07-04";
		String portId = "ABC123";
		String comments = "This is some commentary.";
		
		CommentaryDTO commentary = new CommentaryDTO();
		commentary.setAsOfDate(asOf);
		commentary.setPortId(portId);
		commentary.setCommentary(comments);
		
		Date asOfDate = (new SimpleDateFormat("yyyy-MM-dd")).parse(asOf);
		when(mockService.getCommentary(eq(portId), eq(asOfDate))).thenReturn(commentary);

		WebTarget webTarget = this.target(CommentaryResource.PATH);
		webTarget = webTarget.queryParam(DataTransferParameters.PARM_AS_OF_DATE, asOf);
		webTarget = webTarget.queryParam(DataTransferParameters.PARM_PORT_ID, portId);
		Response response = webTarget.request().get();
		assertEquals(Response.Status.Family.SUCCESSFUL, response.getStatusInfo().getFamily());

		verify(mockService, times(1)).getCommentary(eq(portId), eq(asOfDate));
	}
	
	@Test
	public void endpointRespondsWithBadRequestIfNoMatchingCommentaryForAsOfDateAndPortIdParameters() throws ParseException {
		String asOf = "2017-07-04";
		String portId = "ABC123";
		
		Date asOfDate = (new SimpleDateFormat("yyyy-MM-dd")).parse(asOf);
		when(mockService.getCommentary(eq(portId), eq(asOfDate))).thenReturn(null);
		
		WebTarget webTarget = this.target(CommentaryResource.PATH);
		webTarget = webTarget.queryParam(DataTransferParameters.PARM_AS_OF_DATE, asOf);
		webTarget = webTarget.queryParam(DataTransferParameters.PARM_PORT_ID, portId);
		Response response = webTarget.request().get();
		assertEquals(Response.Status.BAD_REQUEST.getStatusCode(), response.getStatusInfo().getStatusCode());
		
		verify(mockService, times(1)).getCommentary(eq(portId), eq(asOfDate));
	}
	
	@Test
	public void asOfDateIsRequiredOnRetrieve() {
		String portId = "ABC123";
		String comments = "This is some commentary.";
		
		CommentaryDTO commentary = new CommentaryDTO();
		commentary.setPortId(portId);
		commentary.setCommentary(comments);
		
		when(mockService.getCommentary(any(String.class), any(Date.class))).thenReturn(commentary);
		
		WebTarget webTarget = this.target(CommentaryResource.PATH);
		webTarget = webTarget.queryParam(DataTransferParameters.PARM_PORT_ID, portId);
		Response response = webTarget.request().get();
		assertEquals(Response.Status.BAD_REQUEST.getStatusCode(), response.getStatus());
		
		verify(mockService, times(0)).getCommentary(any(String.class), any(Date.class));
	}
	
	@Test
	public void asOfDateMustHaveCorrectFormatOnRetrieve() {
		String asOf = "2017-07-04";
		String portId = "ABC123";
		String comments = "This is some commentary.";
		
		CommentaryDTO commentary = new CommentaryDTO();
		commentary.setAsOfDate(asOf);
		commentary.setPortId(portId);
		commentary.setCommentary(comments);
		
		when(mockService.getCommentary(any(String.class), any(Date.class))).thenReturn(commentary);
		
		WebTarget webTarget = this.target(CommentaryResource.PATH);
		webTarget = webTarget.queryParam(DataTransferParameters.PARM_AS_OF_DATE, "12/31/2016");
		webTarget = webTarget.queryParam(DataTransferParameters.PARM_PORT_ID, portId);
		Response response = webTarget.request().get();
		assertEquals(Response.Status.BAD_REQUEST.getStatusCode(), response.getStatus());
		
		verify(mockService, times(0)).getCommentary(any(String.class), any(Date.class));;
	}

	@Test
	public void asOfDateMustBeAnActualDateOnRetrieve() {
		String asOf = "2017-07-04";
		String portId = "ABC123";
		String comments = "This is some commentary.";
		
		CommentaryDTO commentary = new CommentaryDTO();
		commentary.setAsOfDate(asOf);
		commentary.setPortId(portId);
		commentary.setCommentary(comments);
		
		when(mockService.getCommentary(any(String.class), any(Date.class))).thenReturn(commentary);

		WebTarget webTarget = this.target(CommentaryResource.PATH);
		webTarget = webTarget.queryParam(DataTransferParameters.PARM_AS_OF_DATE, "2017-02-29");
		Response response = webTarget.request().get();
		assertEquals(Response.Status.BAD_REQUEST.getStatusCode(), response.getStatus());

		verify(mockService, times(0)).getCommentary(any(String.class), any(Date.class));
	}

	@Test
	public void portIdIsRequiredOnRetrieve() {
		String asOf = "2017-07-04";
		String portId = "ABC123";
		String comments = "This is some commentary.";
		
		CommentaryDTO commentary = new CommentaryDTO();
		commentary.setAsOfDate(asOf);
		commentary.setPortId(portId);
		commentary.setCommentary(comments);
		
		when(mockService.getCommentary(any(String.class), any(Date.class))).thenReturn(commentary);
		
		WebTarget webTarget = this.target(CommentaryResource.PATH);
		webTarget = webTarget.queryParam(DataTransferParameters.PARM_AS_OF_DATE, asOf);
		Response response = webTarget.request().get();
		assertEquals(Response.Status.BAD_REQUEST.getStatusCode(), response.getStatus());
		
		verify(mockService, times(0)).getCommentary(any(String.class), any(Date.class));		
	}
	
	@Test
	public void endpointHandlesUpdateWithCommentary() {
		String asOf = "2017-07-04";
		String portId = "ABC123";
		String comments = "This is some commentary.";
		
		CommentaryDTO commentary = new CommentaryDTO();
		commentary.setAsOfDate(asOf);
		commentary.setPortId(portId);
		commentary.setCommentary(comments);
		
		doNothing().when(mockService).saveOrUpdateCommentary(any(CommentaryDTO.class));

		WebTarget webTarget = this.target(CommentaryResource.PATH);
		Response response = webTarget.request().post(Entity.json(commentary));
		assertEquals(Response.Status.Family.SUCCESSFUL, response.getStatusInfo().getFamily());

		verify(mockService, times(1)).saveOrUpdateCommentary(any(CommentaryDTO.class));		
	}
	
	@Test
	public void asOfDateIsRequiredOnUpdate() {
		String portId = "ABC123";
		String comments = "This is some commentary.";
		
		CommentaryDTO commentary = new CommentaryDTO();
		commentary.setPortId(portId);
		commentary.setCommentary(comments);
		
		doNothing().when(mockService).saveOrUpdateCommentary(any(CommentaryDTO.class));
		
		WebTarget webTarget = this.target(CommentaryResource.PATH);
		Response response = webTarget.request().post(Entity.json(commentary));
		assertEquals(Response.Status.BAD_REQUEST.getStatusCode(), response.getStatus());
		
		verify(mockService, times(0)).saveOrUpdateCommentary(any(CommentaryDTO.class));		
	}
	
	@Test
	public void asOfDateMustHaveCorrectFormatOnUpdate() {
		String asOf = "17-07-04";
		String portId = "ABC123";
		String comments = "This is some commentary.";
		
		CommentaryDTO commentary = new CommentaryDTO();
		commentary.setAsOfDate(asOf);
		commentary.setPortId(portId);
		commentary.setCommentary(comments);
		
		doNothing().when(mockService).saveOrUpdateCommentary(any(CommentaryDTO.class));
		
		WebTarget webTarget = this.target(CommentaryResource.PATH);
		Response response = webTarget.request().post(Entity.json(commentary));
		assertEquals(Response.Status.BAD_REQUEST.getStatusCode(), response.getStatus());
		
		verify(mockService, times(0)).saveOrUpdateCommentary(any(CommentaryDTO.class));
	}

	@Test
	public void asOfDateMustBeAnActualDateOnUpdate() {
		String asOf = "2017-07-32";
		String portId = "ABC123";
		String comments = "This is some commentary.";
		
		CommentaryDTO commentary = new CommentaryDTO();
		commentary.setAsOfDate(asOf);
		commentary.setPortId(portId);
		commentary.setCommentary(comments);
		
		doNothing().when(mockService).saveOrUpdateCommentary(any(CommentaryDTO.class));

		WebTarget webTarget = this.target(CommentaryResource.PATH);
		Response response = webTarget.request().post(Entity.json(commentary));
		assertEquals(Response.Status.BAD_REQUEST.getStatusCode(), response.getStatus());

		verify(mockService, times(0)).saveOrUpdateCommentary(any(CommentaryDTO.class));
	}
	
	@Test
	public void portIdIsRequiredOnUpdate() {
		String asOf = "2017-07-04";
		String comments = "This is some commentary.";
		
		CommentaryDTO commentary = new CommentaryDTO();
		commentary.setAsOfDate(asOf);
		commentary.setCommentary(comments);
		
		doNothing().when(mockService).saveOrUpdateCommentary(any(CommentaryDTO.class));
		
		WebTarget webTarget = this.target(CommentaryResource.PATH);
		Response response = webTarget.request().post(Entity.json(commentary));
		assertEquals(Response.Status.BAD_REQUEST.getStatusCode(), response.getStatus());
		
		verify(mockService, times(0)).saveOrUpdateCommentary(any(CommentaryDTO.class));		
	}
	
	@Test
	public void commentaryIsRequiredOnUpdate() {
		String asOf = "2017-07-32";
		String portId = "ABC123";
		
		CommentaryDTO commentary = new CommentaryDTO();
		commentary.setAsOfDate(asOf);
		commentary.setPortId(portId);
	
		doNothing().when(mockService).saveOrUpdateCommentary(any(CommentaryDTO.class));
		
		WebTarget webTarget = this.target(CommentaryResource.PATH);
		Response response = webTarget.request().post(Entity.json(commentary));
		assertEquals(Response.Status.BAD_REQUEST.getStatusCode(), response.getStatus());
		
		verify(mockService, times(0)).saveOrUpdateCommentary(any(CommentaryDTO.class));	
	}
	
	@Test
	public void endpointRespondsWithInternalServerErrorIfExceptionsOccurDuringRetrieve() throws ParseException {
		String asOf = "2017-07-04";
		String portId = "ABC123";
		Date asOfDate = (new SimpleDateFormat("yyyy-MM-dd")).parse(asOf);
		doThrow(new RuntimeException()).when(mockService).getCommentary(eq(portId), eq(asOfDate));

		WebTarget webTarget = this.target(CommentaryResource.PATH);
		webTarget = webTarget.queryParam(DataTransferParameters.PARM_AS_OF_DATE, asOf);
		webTarget = webTarget.queryParam(DataTransferParameters.PARM_PORT_ID, portId);
		Response response = webTarget.request().get();
		assertEquals(Response.Status.INTERNAL_SERVER_ERROR.getStatusCode(), response.getStatus());

		verify(mockService, times(1)).getCommentary(eq(portId), eq(asOfDate));
	}
	
	@Test
	public void endpointRespondsWithInternalServerErrorIfExceptionsOccurDuringUpdate() {
		String asOf = "2017-07-04";
		String portId = "ABC123";
		String comments = "This is some commentary.";
		
		CommentaryDTO commentary = new CommentaryDTO();
		commentary.setAsOfDate(asOf);
		commentary.setPortId(portId);
		commentary.setCommentary(comments);
		doThrow(new RuntimeException()).when(mockService).saveOrUpdateCommentary(any(CommentaryDTO.class));

		WebTarget webTarget = this.target(CommentaryResource.PATH);
		Response response = webTarget.request().post(Entity.json(commentary));
		assertEquals(Response.Status.INTERNAL_SERVER_ERROR.getStatusCode(), response.getStatus());

		verify(mockService, times(1)).saveOrUpdateCommentary(any(CommentaryDTO.class));	
	}
	
}


	CommentaryEntityTest.java

package com.vanguard.corp.ics.sdt.behaviors.commentary;

import static org.junit.Assert.*;

import java.util.Date;

import org.junit.Test;

import com.vanguard.corp.ics.dao.target.DatasourceFileDAO;
import com.vanguard.corp.ics.sdt.dao.impl.entity.report.Commentary;

public class CommentaryEntityTest {
	
	private final Long TEST_ID = Long.valueOf(1);
	private final String TEST_PORTFOLIO_ID = "Portfolio ID1";
	private final Date TEST_EFFECTIVE_DATE = new Date(1);
	private final String TEST_COMMENTARY_TEXT = "Test commentary text";
	private final String TEST_COMMENTARY_REASON = "Test commentary reason type";
	private final Date TEST_EFFECTIVE_BEGIN_DATE = new Date(2);
	private final Date TEST_EFFECTIVE_END_DATE = new Date(3);
	private final Date TEST_UPDATED_DATE = new Date();
	private final String TEST_UPDATED_USER = "updated user";
	private final DatasourceFileDAO DATASOURCE_FILE_DAO = new DatasourceFileDAO();

	/**
	 * Test getters and setters 
	 */
	@Test
	public void shouldGetAndSetValues(){
		Commentary commentary = new Commentary();
		
		commentary.setId(TEST_ID);
		commentary.setPortfolioId(TEST_PORTFOLIO_ID);
		commentary.setEffectiveDate(TEST_EFFECTIVE_DATE);
		commentary.setCommentaryText(TEST_COMMENTARY_TEXT);
		commentary.setCommentaryReason(TEST_COMMENTARY_REASON);
		commentary.setEffectiveBeginDate(TEST_EFFECTIVE_BEGIN_DATE);
		commentary.setEffectiveEndDate(TEST_EFFECTIVE_END_DATE);
		commentary.setUpdatedDate(TEST_UPDATED_DATE);
		commentary.setUpdatedUser(TEST_UPDATED_USER);
		
		assertEquals(commentary.getId(), TEST_ID);
		assertEquals(commentary.getPortfolioId(), TEST_PORTFOLIO_ID);
		assertEquals(commentary.getEffectiveDate(), TEST_EFFECTIVE_DATE);
		assertEquals(commentary.getCommentaryText(), TEST_COMMENTARY_TEXT);
		assertEquals(commentary.getCommentaryReason(), TEST_COMMENTARY_REASON);
		assertEquals(commentary.getEffectiveBeginDate(), TEST_EFFECTIVE_BEGIN_DATE);
		assertEquals(commentary.getEffectiveEndDate(), TEST_EFFECTIVE_END_DATE);
		assertEquals(TEST_UPDATED_DATE, commentary.getUpdatedDate());
		assertEquals(TEST_UPDATED_USER, commentary.getUpdatedUser());
	}

}


	CommentaryServiceFunctionalityTest.java


package com.vanguard.corp.ics.sdt.behaviors.commentary;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;
import static org.mockito.Mockito.when;

import org.junit.Before;
import org.junit.Test;
import org.mockito.InjectMocks;
import org.mockito.MockitoAnnotations;
import org.mockito.Spy;

import com.vanguard.corp.ics.sdt.dao.impl.repository.TestCommentaryRepository;
import com.vanguard.corp.ics.sdt.service.api.util.DateParser;
import com.vanguard.corp.ics.sdt.service.impl.CommentaryServiceImpl;
import com.vanguard.corp.ics.sdt.webservice.resource.CommentaryDTO;

public class CommentaryServiceFunctionalityTest {

	@InjectMocks
	CommentaryServiceImpl commentaryService = new CommentaryServiceImpl();

	@Spy
	TestCommentaryRepository testCommentaryRepository = new TestCommentaryRepository();

	private CommentaryDTO existingCommentary;
	private final DateParser dateParser = new DateParser();

	private static final String AS_OF_DATE = "2017-09-25";
	private static final String PORT_ID = "ONE88";
	private static final String COMMENTARY_TXT = "This is sample commentary";
	
	@Before
	public void init() {
		MockitoAnnotations.initMocks(this);

		testCommentaryRepository.testCommentaryEntity.setEffectiveDate(dateParser.parse(AS_OF_DATE));
		testCommentaryRepository.testCommentaryEntity.setPortfolioId(PORT_ID);
		testCommentaryRepository.testCommentaryEntity.setCommentaryText(COMMENTARY_TXT);
		
		existingCommentary = new CommentaryDTO();

		existingCommentary.setAsOfDate(AS_OF_DATE);
		existingCommentary.setPortId(PORT_ID);
		existingCommentary.setCommentary(COMMENTARY_TXT);
	}

	@Test
	public void serviceReturnsExistingCommentaryThatMatchesGivenDateAndPortId() {

		CommentaryDTO commentary = commentaryService.getCommentary(PORT_ID, dateParser.parse(AS_OF_DATE));

		assertNotNull(commentary);
		assertEquals(dateParser.parse(AS_OF_DATE).toString(), commentary.getAsOfDate());
		assertEquals(PORT_ID, commentary.getPortId());
		assertEquals(COMMENTARY_TXT, commentary.getCommentary());
	}

	@Test
	public void serviceReturnsNullWhenNoMatchForGivenDateAndPortId() {
		when(testCommentaryRepository.findByAsOfDateAndPortId(dateParser.parse(AS_OF_DATE), PORT_ID)).thenReturn(null);
		
		CommentaryDTO commentary = commentaryService.getCommentary(PORT_ID, dateParser.parse(AS_OF_DATE));

		assertNull(commentary);
	}
	
	@Test
	public void serviceUpdatesExistingCommentaryForGivenDateAndPortId() {
		commentaryService.saveOrUpdateCommentary(existingCommentary);
		
		assertEquals(dateParser.parse(AS_OF_DATE), testCommentaryRepository.testCommentaryEntity.getEffectiveDate());
		assertEquals(PORT_ID, testCommentaryRepository.testCommentaryEntity.getPortfolioId());
		assertEquals(COMMENTARY_TXT, testCommentaryRepository.testCommentaryEntity.getCommentaryText());
	}
	
	@Test
	public void serviceInsertsNewCommentaryWhenThereIsNoExistingCommentaryForGivenDateAndPortId() {
		String date = "2000-01-01";
		String portId = "ABC123";
		String text = "Hi!  I'm a comment!";
		
		when(testCommentaryRepository.findByAsOfDateAndPortId(dateParser.parse(date), portId)).thenReturn(null);
		
		CommentaryDTO commentary = new CommentaryDTO();
		commentary.setAsOfDate(date);
		commentary.setPortId(portId);
		commentary.setCommentary(text);
		
		commentaryService.saveOrUpdateCommentary(commentary);
		
		assertEquals(dateParser.parse(date), testCommentaryRepository.testCommentaryEntity.getEffectiveDate());
		assertEquals(portId, testCommentaryRepository.testCommentaryEntity.getPortfolioId());
		assertEquals(text, testCommentaryRepository.testCommentaryEntity.getCommentaryText());
	}
	

}



com.vanguard.corp.ics.sdt.behaviors.datatransfer
	DataTransferEndpointTest.java


package com.vanguard.corp.ics.sdt.behaviors.datatransfer;

import static org.junit.Assert.assertEquals;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.ArgumentMatchers.isNull;
import static org.mockito.ArgumentMatchers.nullable;
import static org.mockito.Mockito.doNothing;
import static org.mockito.Mockito.doThrow;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;

import javax.servlet.http.HttpServletRequest;
import javax.ws.rs.client.Invocation.Builder;
import javax.ws.rs.client.WebTarget;
import javax.ws.rs.core.Response;

import org.junit.Before;
import org.junit.Test;
import org.mockito.MockitoAnnotations;

import com.vanguard.corp.ics.sdt.service.api.DataTransferService;
import com.vanguard.corp.ics.sdt.service.api.constants.DataSetType;
import com.vanguard.corp.ics.sdt.test.characteristics.DataTransferServiceApplicationTester;
import com.vanguard.corp.ics.sdt.webservice.resource.DataTransferParameters;
import com.vanguard.corp.ics.sdt.webservice.resource.DataTransferResource;

public class DataTransferEndpointTest extends DataTransferServiceApplicationTester {

	private DataTransferService mockService;

	@Before
	public void init() {
		MockitoAnnotations.initMocks(this);
		mockService = this.getMockService();
	}

	@Test
	public void endpointHandlesRequestWithAsOfDateParameter() throws ParseException {
		String asOf = "2017-07-04";
		Date asOfDate = (new SimpleDateFormat("yyyy-MM-dd")).parse(asOf);
		String userId = "UXYZ";
		doNothing().when(mockService).transfer(eq(asOfDate), isNull(), isNull(), eq(userId), nullable(HttpServletRequest.class));

		WebTarget webTarget = this.target(DataTransferResource.PATH);
		webTarget = webTarget.queryParam(DataTransferParameters.PARM_AS_OF_DATE, asOf);
		Builder builder = webTarget.request();
		builder = builder.header(DataTransferParameters.PARM_UID, userId);
		Response response = builder.get();
		assertEquals(Response.Status.Family.SUCCESSFUL, response.getStatusInfo().getFamily());

		verify(mockService, times(1)).transfer(eq(asOfDate), isNull(), isNull(), eq(userId), nullable(HttpServletRequest.class));
	}

	@Test
	public void endpointHandlesRequestWithAsOfDateAndPortIdParameters() throws ParseException {
		String asOf = "2017-07-04";
		String portId = "ABC123";
		Date asOfDate = (new SimpleDateFormat("yyyy-MM-dd")).parse(asOf);
		String userId = "UXYZ";
		doNothing().when(mockService).transfer(eq(asOfDate), eq(portId), isNull(), eq(userId), nullable(HttpServletRequest.class));

		WebTarget webTarget = this.target(DataTransferResource.PATH);
		webTarget = webTarget.queryParam(DataTransferParameters.PARM_AS_OF_DATE, asOf);
		webTarget = webTarget.queryParam(DataTransferParameters.PARM_PORT_ID, portId);
		Builder builder = webTarget.request();
		builder = builder.header(DataTransferParameters.PARM_UID, userId);
		Response response = builder.get();
		assertEquals(Response.Status.Family.SUCCESSFUL, response.getStatusInfo().getFamily());

		verify(mockService, times(1)).transfer(eq(asOfDate), eq(portId), isNull(), eq(userId), nullable(HttpServletRequest.class));
	}

	@Test
	public void endpointHandlesRequestWithAsOfDateAndDataSetParameters() throws ParseException {
		String asOf = "2017-07-04";
		String dataSet = DataSetType.CHARACTERISTICS.toString();
		Date asOfDate = (new SimpleDateFormat("yyyy-MM-dd")).parse(asOf);
		DataSetType dataSetType = DataSetType.valueOf(dataSet);
		String userId = "UXYZ";
		doNothing().when(mockService).transfer(eq(asOfDate), isNull(), eq(dataSetType), eq(userId), nullable(HttpServletRequest.class));

		WebTarget webTarget = this.target(DataTransferResource.PATH);
		webTarget = webTarget.queryParam(DataTransferParameters.PARM_AS_OF_DATE, asOf);
		webTarget = webTarget.queryParam(DataTransferParameters.PARM_DATA_SET, dataSet);
		Builder builder = webTarget.request();
		builder = builder.header(DataTransferParameters.PARM_UID, userId);
		Response response = builder.get();
		assertEquals(Response.Status.Family.SUCCESSFUL, response.getStatusInfo().getFamily());

		verify(mockService, times(1)).transfer(eq(asOfDate), isNull(), eq(dataSetType), eq(userId), nullable(HttpServletRequest.class));
	}

	@Test
	public void endpointHandlesRequestWithAsOfDateAndPortIdAndDataSetParameters() throws ParseException {
		String asOf = "2017-07-04";
		String portId = "ABC123";
		String dataSet = DataSetType.CHARACTERISTICS.toString();
		Date asOfDate = (new SimpleDateFormat("yyyy-MM-dd")).parse(asOf);
		DataSetType dataSetType = DataSetType.valueOf(dataSet);
		String userId = "UXYZ";
		doNothing().when(mockService).transfer(eq(asOfDate), eq(portId), eq(dataSetType), eq(userId), nullable(HttpServletRequest.class));

		WebTarget webTarget = this.target(DataTransferResource.PATH);
		webTarget = webTarget.queryParam(DataTransferParameters.PARM_AS_OF_DATE, asOf);
		webTarget = webTarget.queryParam(DataTransferParameters.PARM_PORT_ID, portId);
		webTarget = webTarget.queryParam(DataTransferParameters.PARM_DATA_SET, dataSet);
		Builder builder = webTarget.request();
		builder = builder.header(DataTransferParameters.PARM_UID, userId);
		Response response = builder.get();
		assertEquals(Response.Status.Family.SUCCESSFUL, response.getStatusInfo().getFamily());

		verify(mockService, times(1)).transfer(eq(asOfDate), eq(portId), eq(dataSetType), eq(userId), nullable(HttpServletRequest.class));
	}
	
	@Test
	public void asOfDateIsRequired() {
		String userId = "UXYZ";
		doNothing().when(mockService).transfer(any(Date.class), any(String.class), any(DataSetType.class), eq(userId), any(HttpServletRequest.class));
		
		WebTarget webTarget = this.target(DataTransferResource.PATH);
		Builder builder = webTarget.request();
		builder = builder.header(DataTransferParameters.PARM_UID, userId);
		Response response = builder.get();
		assertEquals(Response.Status.BAD_REQUEST.getStatusCode(), response.getStatus());
		
		verify(mockService, times(0)).transfer(any(Date.class), any(String.class), any(DataSetType.class), eq(userId), any(HttpServletRequest.class));
	}
	
	@Test
	public void asOfDateMustHaveCorrectFormat() {
		String userId = "UXYZ";
		doNothing().when(mockService).transfer(any(Date.class), any(String.class), any(DataSetType.class), eq(userId), any(HttpServletRequest.class));
		
		WebTarget webTarget = this.target(DataTransferResource.PATH);
		webTarget = webTarget.queryParam(DataTransferParameters.PARM_AS_OF_DATE, "12/31/2016");
		Builder builder = webTarget.request();
		builder = builder.header(DataTransferParameters.PARM_UID, userId);
		Response response = builder.get();
		assertEquals(Response.Status.BAD_REQUEST.getStatusCode(), response.getStatus());
		
		verify(mockService, times(0)).transfer(any(Date.class), any(String.class), any(DataSetType.class), eq(userId), any(HttpServletRequest.class));
	}

	@Test
	public void asOfDateMustBeAnActualDate() {
		String userId = "UXYZ";
		doNothing().when(mockService).transfer(any(Date.class), any(String.class), any(DataSetType.class), eq(userId), any(HttpServletRequest.class));

		WebTarget webTarget = this.target(DataTransferResource.PATH);
		webTarget = webTarget.queryParam(DataTransferParameters.PARM_AS_OF_DATE, "2017-02-29");
		Builder builder = webTarget.request();
		builder = builder.header(DataTransferParameters.PARM_UID, userId);
		Response response = builder.get();
		assertEquals(Response.Status.BAD_REQUEST.getStatusCode(), response.getStatus());

		verify(mockService, times(0)).transfer(any(Date.class), any(String.class), any(DataSetType.class), eq(userId), any(HttpServletRequest.class));
	}

	@Test
	public void dataSetMustBeAnActualDataSetType() {
		String userId = "UXYZ";
		doNothing().when(mockService).transfer(any(Date.class), any(String.class), any(DataSetType.class), eq(userId), any(HttpServletRequest.class));

		WebTarget webTarget = this.target(DataTransferResource.PATH);
		webTarget = webTarget.queryParam(DataTransferParameters.PARM_AS_OF_DATE, "2017-07-04");
		webTarget = webTarget.queryParam(DataTransferParameters.PARM_DATA_SET, "UNKNOWN_VALUE");
		Builder builder = webTarget.request();
		builder = builder.header(DataTransferParameters.PARM_UID, userId);
		Response response = builder.get();
		assertEquals(Response.Status.BAD_REQUEST.getStatusCode(), response.getStatus());

		verify(mockService, times(0)).transfer(any(Date.class), any(String.class), any(DataSetType.class), eq(userId), any(HttpServletRequest.class));
	}

	@Test
	public void endpointRespondsWithInternalServerErrorIfExceptionsOccurDuringDataTransfer() throws ParseException {
		String asOf = "2017-07-04";
		Date asOfDate = (new SimpleDateFormat("yyyy-MM-dd")).parse(asOf);
		String userId = "UXYZ";
		doThrow(new RuntimeException()).when(mockService).transfer(eq(asOfDate), isNull(), isNull(), eq(userId), nullable(HttpServletRequest.class));

		WebTarget webTarget = this.target(DataTransferResource.PATH);
		webTarget = webTarget.queryParam(DataTransferParameters.PARM_AS_OF_DATE, asOf);
		Builder builder = webTarget.request();
		builder = builder.header(DataTransferParameters.PARM_UID, userId);
		Response response = builder.get();
		assertEquals(Response.Status.INTERNAL_SERVER_ERROR.getStatusCode(), response.getStatus());

		verify(mockService, times(1)).transfer(eq(asOfDate), isNull(), isNull(), eq(userId), nullable(HttpServletRequest.class));
	}
}


		DataTransferParmsTest.java	


package com.vanguard.corp.ics.sdt.behaviors.datatransfer;

import static org.junit.Assert.assertEquals;

import org.junit.Test;

import com.vanguard.corp.ics.sdt.webservice.resource.DataTransferParameters;

public class DataTransferParmsTest {

	private DataTransferParameters classUnderTest = new DataTransferParameters();

	@Test
	public void parametersHasPortId() {
		String portId = "ABC123";
		classUnderTest.setPortId(portId);
		assertEquals(portId, classUnderTest.getPortId());
	}

	@Test
	public void parametersHasAsOfDate() {
		String asOfDate = "2017-09-11";
		classUnderTest.setAsOfDate(asOfDate);
		assertEquals(asOfDate, classUnderTest.getAsOfDate());
	}

	@Test
	public void parametersHasDataSetType() {
		String dataSetType = "CHARACTERISTICS";
		classUnderTest.setDataSet(dataSetType);
		assertEquals(dataSetType, classUnderTest.getDataSet());
	}

	@Test
	public void parametersHasUid() {
		String uid = "UABC";
		classUnderTest.setUid(uid);
		assertEquals(uid, classUnderTest.getUid());
	}
}


		DataTransferServiceFunctionalityTest.java


package com.vanguard.corp.ics.sdt.behaviors.datatransfer;

import static org.junit.Assert.assertEquals;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.nullable;
import static org.mockito.Mockito.atLeastOnce;
import static org.mockito.Mockito.doNothing;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.*;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpServletRequest;

import org.junit.Before;
import org.junit.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.powermock.reflect.Whitebox;

import com.vanguard.corp.ics.sdt.service.api.TransferService;
import com.vanguard.corp.ics.sdt.service.api.TransferServiceComparator;
import com.vanguard.corp.ics.sdt.service.api.constants.DataSetType;
import com.vanguard.corp.ics.sdt.service.api.exception.DataTransferException;
import com.vanguard.corp.ics.sdt.service.impl.DataTransferServiceImpl;


public class DataTransferServiceFunctionalityTest {

	private DataTransferServiceImpl classUnderTest = new DataTransferServiceImpl();
	private List<TransferService> services;
	
	@Mock
	private TransferService mock1;
	
	@Mock
	private TransferService mock2;
	
	@Mock
	private TransferService mock3;

	@Before
	public void setup() {
		MockitoAnnotations.initMocks(this);
		services = new ArrayList<>();
		services.add(mock1);
		services.add(mock2);
		services.add(mock3);
		Whitebox.setInternalState(classUnderTest, "services", services);
	}

	@Test
	public void serviceCallsMultipleTransferHandlersWhenTheyAgreeToHandleTheRequest() {
		Date asOfDate = new Date();
		String portId = null;
		DataSetType dataSetType = null;
		String calledByUserId = "UXYZ";
		HttpServletRequest request = null;
		
		when(mock1.getPriority()).thenReturn(TransferService.Priority.MEDIUM);
		when(mock2.getPriority()).thenReturn(TransferService.Priority.MEDIUM);
		when(mock3.getPriority()).thenReturn(TransferService.Priority.MEDIUM);
		when(mock1.handles(any(Date.class), nullable(String.class), nullable(DataSetType.class), nullable(HttpServletRequest.class))).thenReturn(Boolean.TRUE);
		when(mock2.handles(any(Date.class), nullable(String.class), nullable(DataSetType.class), nullable(HttpServletRequest.class))).thenReturn(Boolean.TRUE);
		when(mock3.handles(any(Date.class), nullable(String.class), nullable(DataSetType.class), nullable(HttpServletRequest.class))).thenReturn(Boolean.TRUE);
		doNothing().when(mock1).transfer(any(Date.class), nullable(String.class), eq(calledByUserId), nullable(HttpServletRequest.class));
		doNothing().when(mock2).transfer(any(Date.class), nullable(String.class), eq(calledByUserId), nullable(HttpServletRequest.class));
		doNothing().when(mock3).transfer(any(Date.class), nullable(String.class), eq(calledByUserId), nullable(HttpServletRequest.class));
		
		classUnderTest.transfer(asOfDate, portId, dataSetType, calledByUserId, request);
		
		verify(mock1, atLeastOnce()).getPriority();
		verify(mock2, atLeastOnce()).getPriority();
		verify(mock3, atLeastOnce()).getPriority();
		verify(mock1, times(1)).handles(any(Date.class), nullable(String.class), nullable(DataSetType.class), nullable(HttpServletRequest.class));
		verify(mock2, times(1)).handles(any(Date.class), nullable(String.class), nullable(DataSetType.class), nullable(HttpServletRequest.class));
		verify(mock3, times(1)).handles(any(Date.class), nullable(String.class), nullable(DataSetType.class), nullable(HttpServletRequest.class));
		verify(mock1, times(1)).transfer(any(Date.class), nullable(String.class), eq(calledByUserId), nullable(HttpServletRequest.class));
		verify(mock2, times(1)).transfer(any(Date.class), nullable(String.class), eq(calledByUserId), nullable(HttpServletRequest.class));
		verify(mock3, times(1)).transfer(any(Date.class), nullable(String.class), eq(calledByUserId), nullable(HttpServletRequest.class));
	}

	@Test
	public void serviceCallsOnlyTransferHandlersThatAgreeToHandleTheRequest() {
		Date asOfDate = new Date();
		String portId = null;
		DataSetType dataSetType = null;
		String calledByUserId = "UXYZ";
		HttpServletRequest request = null;
		
		when(mock1.getPriority()).thenReturn(TransferService.Priority.MEDIUM);
		when(mock2.getPriority()).thenReturn(TransferService.Priority.MEDIUM);
		when(mock3.getPriority()).thenReturn(TransferService.Priority.MEDIUM);
		when(mock1.handles(any(Date.class), nullable(String.class), nullable(DataSetType.class), nullable(HttpServletRequest.class))).thenReturn(Boolean.FALSE);
		when(mock2.handles(any(Date.class), nullable(String.class), nullable(DataSetType.class), nullable(HttpServletRequest.class))).thenReturn(Boolean.TRUE);
		when(mock3.handles(any(Date.class), nullable(String.class), nullable(DataSetType.class), nullable(HttpServletRequest.class))).thenReturn(Boolean.FALSE);
		doNothing().when(mock1).transfer(any(Date.class), nullable(String.class), eq(calledByUserId), nullable(HttpServletRequest.class));
		doNothing().when(mock2).transfer(any(Date.class), nullable(String.class), eq(calledByUserId), nullable(HttpServletRequest.class));
		doNothing().when(mock3).transfer(any(Date.class), nullable(String.class), eq(calledByUserId), nullable(HttpServletRequest.class));
		
		classUnderTest.transfer(asOfDate, portId, dataSetType, calledByUserId, request);
		
		verify(mock1, atLeastOnce()).getPriority();
		verify(mock2, atLeastOnce()).getPriority();
		verify(mock3, atLeastOnce()).getPriority();
		verify(mock1, times(1)).handles(any(Date.class), nullable(String.class), nullable(DataSetType.class), nullable(HttpServletRequest.class));
		verify(mock2, times(1)).handles(any(Date.class), nullable(String.class), nullable(DataSetType.class), nullable(HttpServletRequest.class));
		verify(mock3, times(1)).handles(any(Date.class), nullable(String.class), nullable(DataSetType.class), nullable(HttpServletRequest.class));
		verify(mock1, times(0)).transfer(any(Date.class), nullable(String.class), eq(calledByUserId), nullable(HttpServletRequest.class));
		verify(mock2, times(1)).transfer(any(Date.class), nullable(String.class), eq(calledByUserId), nullable(HttpServletRequest.class));
		verify(mock3, times(0)).transfer(any(Date.class), nullable(String.class), eq(calledByUserId), nullable(HttpServletRequest.class));
	}

	@Test
	public void serviceCallsNoTransferHandlersWhenNoneAgreeToHandleTheRequest() {
		Date asOfDate = new Date();
		String portId = null;
		DataSetType dataSetType = null;
		String calledByUserId = "UXYZ";
		HttpServletRequest request = null;
		
		when(mock1.getPriority()).thenReturn(TransferService.Priority.MEDIUM);
		when(mock2.getPriority()).thenReturn(TransferService.Priority.MEDIUM);
		when(mock3.getPriority()).thenReturn(TransferService.Priority.MEDIUM);
		when(mock1.handles(any(Date.class), nullable(String.class), nullable(DataSetType.class), nullable(HttpServletRequest.class))).thenReturn(Boolean.FALSE);
		when(mock2.handles(any(Date.class), nullable(String.class), nullable(DataSetType.class), nullable(HttpServletRequest.class))).thenReturn(Boolean.FALSE);
		when(mock3.handles(any(Date.class), nullable(String.class), nullable(DataSetType.class), nullable(HttpServletRequest.class))).thenReturn(Boolean.FALSE);
		doNothing().when(mock1).transfer(any(Date.class), nullable(String.class), eq(calledByUserId), nullable(HttpServletRequest.class));
		doNothing().when(mock2).transfer(any(Date.class), nullable(String.class), eq(calledByUserId), nullable(HttpServletRequest.class));
		doNothing().when(mock3).transfer(any(Date.class), nullable(String.class), eq(calledByUserId), nullable(HttpServletRequest.class));
		
		classUnderTest.transfer(asOfDate, portId, dataSetType, calledByUserId, request);
		
		verify(mock1, atLeastOnce()).getPriority();
		verify(mock2, atLeastOnce()).getPriority();
		verify(mock3, atLeastOnce()).getPriority();
		verify(mock1, times(1)).handles(any(Date.class), nullable(String.class), nullable(DataSetType.class), nullable(HttpServletRequest.class));
		verify(mock2, times(1)).handles(any(Date.class), nullable(String.class), nullable(DataSetType.class), nullable(HttpServletRequest.class));
		verify(mock3, times(1)).handles(any(Date.class), nullable(String.class), nullable(DataSetType.class), nullable(HttpServletRequest.class));
		verify(mock1, times(0)).transfer(any(Date.class), nullable(String.class), eq(calledByUserId), nullable(HttpServletRequest.class));
		verify(mock2, times(0)).transfer(any(Date.class), nullable(String.class), eq(calledByUserId), nullable(HttpServletRequest.class));
		verify(mock3, times(0)).transfer(any(Date.class), nullable(String.class), eq(calledByUserId), nullable(HttpServletRequest.class));
	}

	@Test
	public void servicePrioritizesTransferServicesFromHighestPriorityFirstToLowestPriorityLast() {
		TransferService highest = new TransferService() {
			@Override public void transfer(Date asOfDate, String portId, String calledByUserId, HttpServletRequest request) { }
			@Override public boolean handles(Date asOfDate, String portId, DataSetType dataSetType, HttpServletRequest request) { return false; }
			@Override public Priority getPriority() { return TransferService.Priority.valueOf("HIGHEST"); }
		};
		TransferService high = new TransferService() {
			@Override public void transfer(Date asOfDate, String portId, String calledByUserId, HttpServletRequest request) { }
			@Override public boolean handles(Date asOfDate, String portId, DataSetType dataSetType, HttpServletRequest request) { return false; }
			@Override public Priority getPriority() { return TransferService.Priority.HIGH; }
		};
		TransferService medium = new TransferService() {
			@Override public void transfer(Date asOfDate, String portId, String calledByUserId, HttpServletRequest request) { }
			@Override public boolean handles(Date asOfDate, String portId, DataSetType dataSetType, HttpServletRequest request) { return false; }
			@Override public Priority getPriority() { return TransferService.Priority.MEDIUM; }
		};
		TransferService low = new TransferService() {
			@Override public void transfer(Date asOfDate, String portId, String calledByUserId, HttpServletRequest request) { }
			@Override public boolean handles(Date asOfDate, String portId, DataSetType dataSetType, HttpServletRequest request) { return false; }
			@Override public Priority getPriority() { return TransferService.Priority.LOW; }
		};
		TransferService lowest = new TransferService() {
			@Override public void transfer(Date asOfDate, String portId, String calledByUserId, HttpServletRequest request) { }
			@Override public boolean handles(Date asOfDate, String portId, DataSetType dataSetType, HttpServletRequest request) { return false; }
			@Override public Priority getPriority() { return TransferService.Priority.LOWEST; }
		};
		
		List<TransferService> list = new ArrayList<>();
		list.add(lowest);
		list.add(low);
		list.add(medium);
		list.add(high);
		list.add(highest);
		assertEquals(highest, list.get(4));
		assertEquals(high, list.get(3));
		assertEquals(medium, list.get(2));
		assertEquals(low, list.get(1));
		assertEquals(lowest, list.get(0));
		
		TransferServiceComparator comparator = new TransferServiceComparator();
		Collections.sort(list, comparator);
		assertEquals(highest, list.get(0));
		assertEquals(high, list.get(1));
		assertEquals(medium, list.get(2));
		assertEquals(low, list.get(3));
		assertEquals(lowest, list.get(4));
		
		list.clear();
		list.add(medium);
		list.add(lowest);
		list.add(highest);
		list.add(low);
		list.add(high);
		assertEquals(highest, list.get(2));
		assertEquals(high, list.get(4));
		assertEquals(medium, list.get(0));
		assertEquals(low, list.get(3));
		assertEquals(lowest, list.get(1));
		
		Collections.sort(list, comparator);
		assertEquals(highest, list.get(0));
		assertEquals(high, list.get(1));
		assertEquals(medium, list.get(2));
		assertEquals(low, list.get(3));
		assertEquals(lowest, list.get(4));
	}

	@Test(expected=DataTransferException.class)
	public void serviceLogsCaughtExceptionsAndIndicatesFailureResponse() {
		Date asOfDate = new Date();
		String portId = null;
		DataSetType dataSetType = null;
		String calledByUserId = "UXYZ";
		HttpServletRequest request = null;
		
		when(mock1.getPriority()).thenReturn(TransferService.Priority.MEDIUM);
		when(mock2.getPriority()).thenReturn(TransferService.Priority.MEDIUM);
		when(mock3.getPriority()).thenReturn(TransferService.Priority.MEDIUM);
		when(mock1.handles(any(Date.class), nullable(String.class), nullable(DataSetType.class), nullable(HttpServletRequest.class))).thenReturn(Boolean.FALSE);
		when(mock2.handles(any(Date.class), nullable(String.class), nullable(DataSetType.class), nullable(HttpServletRequest.class))).thenReturn(Boolean.TRUE);
		when(mock3.handles(any(Date.class), nullable(String.class), nullable(DataSetType.class), nullable(HttpServletRequest.class))).thenThrow(new RuntimeException());
		doNothing().when(mock1).transfer(any(Date.class), nullable(String.class), eq(calledByUserId), nullable(HttpServletRequest.class));
		doNothing().when(mock2).transfer(any(Date.class), nullable(String.class), eq(calledByUserId), nullable(HttpServletRequest.class));
		doNothing().when(mock3).transfer(any(Date.class), nullable(String.class), eq(calledByUserId), nullable(HttpServletRequest.class));
		
		classUnderTest.transfer(asOfDate, portId, dataSetType, calledByUserId, request);
		
		verify(mock1, atLeastOnce()).getPriority();
		verify(mock2, atLeastOnce()).getPriority();
		verify(mock3, atLeastOnce()).getPriority();
		verify(mock1, times(1)).handles(any(Date.class), nullable(String.class), nullable(DataSetType.class), nullable(HttpServletRequest.class));
		verify(mock2, times(1)).handles(any(Date.class), nullable(String.class), nullable(DataSetType.class), nullable(HttpServletRequest.class));
		verify(mock3, times(1)).handles(any(Date.class), nullable(String.class), nullable(DataSetType.class), nullable(HttpServletRequest.class));
		verify(mock1, times(0)).transfer(any(Date.class), nullable(String.class), eq(calledByUserId), nullable(HttpServletRequest.class));
		verify(mock2, times(1)).transfer(any(Date.class), nullable(String.class), eq(calledByUserId), nullable(HttpServletRequest.class));
		verify(mock3, times(1)).transfer(any(Date.class), nullable(String.class), eq(calledByUserId), nullable(HttpServletRequest.class));
	}

	@Test(expected=DataTransferException.class)
	public void serviceHandlesExceptionsAndContinuesToProcessDataTransfersBeforeIndicatingFailureResponse() {
		Date asOfDate = new Date();
		String portId = null;
		DataSetType dataSetType = null;
		String calledByUserId = "UXYZ";
		HttpServletRequest request = null;
		
		when(mock1.getPriority()).thenReturn(TransferService.Priority.MEDIUM);
		when(mock2.getPriority()).thenReturn(TransferService.Priority.MEDIUM);
		when(mock3.getPriority()).thenReturn(TransferService.Priority.MEDIUM);
		when(mock1.handles(any(Date.class), nullable(String.class), nullable(DataSetType.class), nullable(HttpServletRequest.class))).thenThrow(new RuntimeException());
		when(mock2.handles(any(Date.class), nullable(String.class), nullable(DataSetType.class), nullable(HttpServletRequest.class))).thenThrow(new RuntimeException());
		when(mock3.handles(any(Date.class), nullable(String.class), nullable(DataSetType.class), nullable(HttpServletRequest.class))).thenThrow(new RuntimeException());
		
		classUnderTest.transfer(asOfDate, portId, dataSetType, calledByUserId, request);
		
		verify(mock1, atLeastOnce()).getPriority();
		verify(mock2, atLeastOnce()).getPriority();
		verify(mock3, atLeastOnce()).getPriority();
		verify(mock1, times(1)).handles(any(Date.class), nullable(String.class), nullable(DataSetType.class), nullable(HttpServletRequest.class));
		verify(mock2, times(1)).handles(any(Date.class), nullable(String.class), nullable(DataSetType.class), nullable(HttpServletRequest.class));
		verify(mock3, times(1)).handles(any(Date.class), nullable(String.class), nullable(DataSetType.class), nullable(HttpServletRequest.class));
	}

	@Test(expected=IllegalArgumentException.class)
	public void serviceRequiresCalledByUserIdParameter() {
		classUnderTest.transfer(null, null, null, null, null);
		
		verify(mock1, never()).getPriority();
		verify(mock2, never()).getPriority();
		verify(mock3, never()).getPriority();
	}
}

com.vanguard.corp.ics.sdt.behaviors.datatransfer.attributionsummary

	AttributionSummaryConversionTest.java


package com.vanguard.corp.ics.sdt.behaviors.datatransfer.attributionsummary;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertTrue;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.junit.Test;

import com.vanguard.corp.ics.dao.target.AttributionTargetDAO;
import com.vanguard.corp.ics.dao.target.DatasourceFileDAO;
import com.vanguard.corp.ics.sdt.dao.impl.entity.report.AttributionSummary;
import com.vanguard.corp.ics.sdt.service.api.constants.AttributionSummaryOrderType;
import com.vanguard.corp.ics.sdt.service.impl.attributionsummary.AttributionSummaryConverter;


public class AttributionSummaryConversionTest {

	private AttributionSummaryConverter converter = new AttributionSummaryConverter();
	
	@Test(expected=IllegalArgumentException.class)
	public void throwsExceptionIfAttributionSummaryListParameterIsNull() {
		converter.convert(null, "abc");
	}

	@Test(expected=IllegalArgumentException.class)
	public void throwsExceptionIfAttributionSummaryListParameterIsEmpty() {
		converter.convert(new ArrayList<AttributionTargetDAO>(), "abc");
	}

	@Test(expected=IllegalArgumentException.class)
	public void throwsExceptionIfAttributionSummaryListParameterContainsNulls() {
		List<AttributionTargetDAO> attributionSummaries = new ArrayList<>();
		attributionSummaries.add(new AttributionTargetDAO());
		attributionSummaries.add(null);
		attributionSummaries.add(new AttributionTargetDAO());
		converter.convert(attributionSummaries, "abc");
	}

	@Test(expected=IllegalArgumentException.class)
	public void throwsExceptionIfCalledByUserIdParameterIsNull() {
		List<AttributionTargetDAO> attributionSummaries = new ArrayList<>();
		attributionSummaries.add(new AttributionTargetDAO());
		converter.convert(attributionSummaries, null);
	}

	@Test(expected=IllegalArgumentException.class)
	public void throwsExceptionIfCalledByUserIdParameterIsEmpty() {
		List<AttributionTargetDAO> attributionSummaries = new ArrayList<>();
		attributionSummaries.add(new AttributionTargetDAO());
		converter.convert(attributionSummaries, "");
	}

	@Test
	public void convertsTargetAttributionSummaryEntitiesIntoReportingAttributionSummaryEntities() {
		List<AttributionTargetDAO> attributionSummaries = new ArrayList<>();
		DatasourceFileDAO datasourceFileDAO = new DatasourceFileDAO();
		datasourceFileDAO.setId(660L);
		attributionSummaries.add(AttributionSummaryTestHelper.buildAttributionSummary(new Date(), "portId", "name","3MON", 10,datasourceFileDAO));
		String calledByUserId = "UXYZ";
		
		@SuppressWarnings("rawtypes")
		List converted = converter.convert(attributionSummaries, calledByUserId);
		assertFalse(converted.isEmpty());
		
		Object ob = converted.get(0);
		assertTrue(ob instanceof AttributionSummary);
	}

	@Test
	public void doesNotCopyPrimaryKey() {
		List<AttributionTargetDAO> attributionSummaries = new ArrayList<>();
		DatasourceFileDAO datasourceFileDAO = new DatasourceFileDAO();
		datasourceFileDAO.setId(660L);
		attributionSummaries.add(AttributionSummaryTestHelper.buildAttributionSummary(new Date(), "portId", "name","3MON", 10,datasourceFileDAO));
		String calledByUserId = "UXYZ";
		
		List<AttributionSummary> converted = converter.convert(attributionSummaries, calledByUserId);
		assertFalse(converted.isEmpty());
		
		AttributionSummary as = converted.get(0);
		assertNull(as.getId());
		assertNotNull(attributionSummaries.get(0).getId());
	}

	@Test
	public void copiesEffectiveDate() {
		DatasourceFileDAO datasourceFileDAO = new DatasourceFileDAO();
		datasourceFileDAO.setId(660L);
		AttributionTargetDAO targetAttributionSummary = AttributionSummaryTestHelper.buildAttributionSummary(new Date(), "portId", "name","3MON", 10,datasourceFileDAO);
		Date effectiveDate = new Date();
		targetAttributionSummary.setEffectiveDate(effectiveDate);
		
		List<AttributionTargetDAO> attributionSummaries = new ArrayList<>();
		attributionSummaries.add(targetAttributionSummary);
		String calledByUserId = "UXYZ";
		
		List<AttributionSummary> converted = converter.convert(attributionSummaries, calledByUserId);
		assertFalse(converted.isEmpty());
		
		AttributionSummary as = converted.get(0);
		assertEquals(effectiveDate, as.getEffectiveDate());
	}

	@Test
	public void copiesPortId() {
		DatasourceFileDAO datasourceFileDAO = new DatasourceFileDAO();
		datasourceFileDAO.setId(660L);
		AttributionTargetDAO targetAttributionSummary = AttributionSummaryTestHelper.buildAttributionSummary(new Date(), "portId", "name","3MON", 10,datasourceFileDAO);
		String portId = "ABC123";
		targetAttributionSummary.setPortfolioCode(portId);
		
		List<AttributionTargetDAO> attributionSummaries = new ArrayList<>();
		attributionSummaries.add(targetAttributionSummary);
		String calledByUserId = "UXYZ";
		
		List<AttributionSummary> converted = converter.convert(attributionSummaries, calledByUserId);
		assertFalse(converted.isEmpty());
		
		AttributionSummary as = converted.get(0);
		assertEquals(portId, as.getPortId());
	}

	@Test
	public void copiesAttributionName() {
		DatasourceFileDAO datasourceFileDAO = new DatasourceFileDAO();
		datasourceFileDAO.setId(660L);
		AttributionTargetDAO targetAttributionSummary =  AttributionSummaryTestHelper.buildAttributionSummary(new Date(), "portId", "name","3MON", 10,datasourceFileDAO);
		String name = "big fancy name";
		targetAttributionSummary.setAttrtnName(name);
		
		List<AttributionTargetDAO> attributionSummaries = new ArrayList<>();
		attributionSummaries.add(targetAttributionSummary);
		String calledByUserId = "UXYZ";
		
		List<AttributionSummary> converted = converter.convert(attributionSummaries, calledByUserId);
		assertFalse(converted.isEmpty());
		
		AttributionSummary as = converted.get(0);
		assertEquals(name, as.getName());
	}

	@Test
	public void copiesOneMonthValue() {
		DatasourceFileDAO datasourceFileDAO = new DatasourceFileDAO();
		datasourceFileDAO.setId(660L);
		AttributionTargetDAO targetAttributionSummary = AttributionSummaryTestHelper.buildAttributionSummary(new Date(), "portId", "name","1MON", 10,datasourceFileDAO);
		BigDecimal val = BigDecimal.valueOf(1.23456);
		targetAttributionSummary.setAttrtnTypeVal(val);
		
		List<AttributionTargetDAO> attributionSummaries = new ArrayList<>();
		attributionSummaries.add(targetAttributionSummary);
		String calledByUserId = "UXYZ";
		
		List<AttributionSummary> converted = converter.convert(attributionSummaries, calledByUserId);
		assertFalse(converted.isEmpty());
		
		AttributionSummary as = converted.get(0);
		assertEquals(val, as.getOneMonthVal());
	}

	@Test
	public void copiesThreeMonthValue() {
		DatasourceFileDAO datasourceFileDAO = new DatasourceFileDAO();
		datasourceFileDAO.setId(660L);
		AttributionTargetDAO targetAttributionSummary = AttributionSummaryTestHelper.buildAttributionSummary(new Date(), "portId", "name","3MON", 10,datasourceFileDAO);
		BigDecimal val = BigDecimal.valueOf(1.23456);
		targetAttributionSummary.setAttrtnTypeVal(val);
		
		List<AttributionTargetDAO> attributionSummaries = new ArrayList<>();
		attributionSummaries.add(targetAttributionSummary);
		String calledByUserId = "UXYZ";
		
		List<AttributionSummary> converted = converter.convert(attributionSummaries, calledByUserId);
		assertFalse(converted.isEmpty());
		
		AttributionSummary as = converted.get(0);
		assertEquals(val, as.getThreeMonthVal());
	}

	@Test
	public void copiesSixMonthValue() {
		DatasourceFileDAO datasourceFileDAO = new DatasourceFileDAO();
		datasourceFileDAO.setId(660L);
		AttributionTargetDAO targetAttributionSummary = AttributionSummaryTestHelper.buildAttributionSummary(new Date(), "portId", "name","6MON", 10,datasourceFileDAO);
		BigDecimal val = BigDecimal.valueOf(1.23456);
		targetAttributionSummary.setAttrtnTypeVal(val);
		
		List<AttributionTargetDAO> attributionSummaries = new ArrayList<>();
		attributionSummaries.add(targetAttributionSummary);
		String calledByUserId = "UXYZ";
		
		List<AttributionSummary> converted = converter.convert(attributionSummaries, calledByUserId);
		assertFalse(converted.isEmpty());
		
		AttributionSummary as = converted.get(0);
		assertEquals(val, as.getSixMonthVal());
	}

	@Test
	public void copiesNineMonthValue() {
		DatasourceFileDAO datasourceFileDAO = new DatasourceFileDAO();
		datasourceFileDAO.setId(660L);
		AttributionTargetDAO targetAttributionSummary = AttributionSummaryTestHelper.buildAttributionSummary(new Date(), "portId", "name","9MON", 10,datasourceFileDAO);
		BigDecimal val = BigDecimal.valueOf(1.23456);
		targetAttributionSummary.setAttrtnTypeVal(val);
		
		List<AttributionTargetDAO> attributionSummaries = new ArrayList<>();
		attributionSummaries.add(targetAttributionSummary);
		String calledByUserId = "UXYZ";
		
		List<AttributionSummary> converted = converter.convert(attributionSummaries, calledByUserId);
		assertFalse(converted.isEmpty());
		
		AttributionSummary as = converted.get(0);
		assertEquals(val, as.getNineMonthVal());
	}

	@Test
	public void copiesTwelveMonthValue() {
		DatasourceFileDAO datasourceFileDAO = new DatasourceFileDAO();
		datasourceFileDAO.setId(660L);
		AttributionTargetDAO targetAttributionSummary = AttributionSummaryTestHelper.buildAttributionSummary(new Date(), "portId", "name","12MO", 10,datasourceFileDAO);
		BigDecimal val = BigDecimal.valueOf(1.23456);
		targetAttributionSummary.setAttrtnTypeVal(val);
		
		List<AttributionTargetDAO> attributionSummaries = new ArrayList<>();
		attributionSummaries.add(targetAttributionSummary);
		String calledByUserId = "UXYZ";
		
		List<AttributionSummary> converted = converter.convert(attributionSummaries, calledByUserId);
		assertFalse(converted.isEmpty());
		
		AttributionSummary as = converted.get(0);
		assertEquals(val, as.getTwelveMonthVal());
	}

	@Test
	public void copiesYearToDateValue() {
		DatasourceFileDAO datasourceFileDAO = new DatasourceFileDAO();
		datasourceFileDAO.setId(660L);
		AttributionTargetDAO targetAttributionSummary = AttributionSummaryTestHelper.buildAttributionSummary(new Date(), "portId", "name","CYTD", 10,datasourceFileDAO);
		BigDecimal val = BigDecimal.valueOf(1.23456);
		targetAttributionSummary.setAttrtnTypeVal(val);
		
		List<AttributionTargetDAO> attributionSummaries = new ArrayList<>();
		attributionSummaries.add(targetAttributionSummary);
		String calledByUserId = "UXYZ";
		
		List<AttributionSummary> converted = converter.convert(attributionSummaries, calledByUserId);
		assertFalse(converted.isEmpty());
		
		AttributionSummary as = converted.get(0);
		assertEquals(val, as.getYearToDateVal());
	}

	@Test
	public void copiesCalledByUserId() {
		DatasourceFileDAO datasourceFileDAO = new DatasourceFileDAO();
		datasourceFileDAO.setId(660L);
		AttributionTargetDAO targetAttributionSummary = AttributionSummaryTestHelper.buildAttributionSummary(new Date(), "portId", "name","3MON", 10,datasourceFileDAO);
		BigDecimal val = BigDecimal.valueOf(1.23456);
		targetAttributionSummary.setAttrtnTypeVal(val);
		
		List<AttributionTargetDAO> attributionSummaries = new ArrayList<>();
		attributionSummaries.add(targetAttributionSummary);
		String calledByUserId = "UXYZ";
		
		List<AttributionSummary> converted = converter.convert(attributionSummaries, calledByUserId);
		assertFalse(converted.isEmpty());
		
		AttributionSummary as = converted.get(0);
		assertEquals(calledByUserId, as.getLastUpdatedUserId());
	}

	@Test
	public void doesNotSetLastUpdatedTimestamp() {
		DatasourceFileDAO datasourceFileDAO = new DatasourceFileDAO();
		datasourceFileDAO.setId(660L);
		AttributionTargetDAO targetAttributionSummary = AttributionSummaryTestHelper.buildAttributionSummary(new Date(), "portId", "name","3MON", 10,datasourceFileDAO);
		List<AttributionTargetDAO> attributionSummaries = new ArrayList<>();
		attributionSummaries.add(targetAttributionSummary);
		String calledByUserId = "UXYZ";
		
		List<AttributionSummary> converted = converter.convert(attributionSummaries, calledByUserId);
		assertFalse(converted.isEmpty());
		
		AttributionSummary as = converted.get(0);
		assertNull(as.getLastUpdatedDate());
	}

	@Test
	public void doesNotSetEffectiveBeginDate() {
		DatasourceFileDAO datasourceFileDAO = new DatasourceFileDAO();
		datasourceFileDAO.setId(660L);
		AttributionTargetDAO targetAttributionSummary = AttributionSummaryTestHelper.buildAttributionSummary(new Date(), "portId", "name","3MON", 10,datasourceFileDAO);
		List<AttributionTargetDAO> attributionSummaries = new ArrayList<>();
		attributionSummaries.add(targetAttributionSummary);
		String calledByUserId = "UXYZ";
		
		List<AttributionSummary> converted = converter.convert(attributionSummaries, calledByUserId);
		assertFalse(converted.isEmpty());
		
		AttributionSummary as = converted.get(0);
		assertNull(as.getEffectiveBeginDate());
	}

	@Test
	public void doesNotSetEffectiveEndDate() {
		DatasourceFileDAO datasourceFileDAO = new DatasourceFileDAO();
		datasourceFileDAO.setId(660L);
		AttributionTargetDAO targetAttributionSummary = AttributionSummaryTestHelper.buildAttributionSummary(new Date(), "portId", "name","3MON", 10,datasourceFileDAO);
		List<AttributionTargetDAO> attributionSummaries = new ArrayList<>();
		attributionSummaries.add(targetAttributionSummary);
		String calledByUserId = "UXYZ";
		
		List<AttributionSummary> converted = converter.convert(attributionSummaries, calledByUserId);
		assertFalse(converted.isEmpty());
		
		AttributionSummary as = converted.get(0);
		assertNull(as.getEffectiveEndDate());
	}

	@Test
	public void assignsAppropriateDisplayOrderForRecognizedAttributionNames() {
		DatasourceFileDAO datasourceFileDAO = new DatasourceFileDAO();
		datasourceFileDAO.setId(660L);
		AttributionTargetDAO targetAttributionSummary = AttributionSummaryTestHelper.buildAttributionSummary(new Date(), "portId", "name","3MON", 10,datasourceFileDAO);
		String name = AttributionSummaryOrderType.STOCK_SELECTION_IMPACT.getAttributionName();
		targetAttributionSummary.setAttrtnName(name);
		
		List<AttributionTargetDAO> attributionSummaries = new ArrayList<>();
		attributionSummaries.add(targetAttributionSummary);
		String calledByUserId = "UXYZ";
		
		List<AttributionSummary> converted = converter.convert(attributionSummaries, calledByUserId);
		assertFalse(converted.isEmpty());
		
		AttributionSummary as = converted.get(0);
		assertEquals(1, as.getDisplayOrder().intValue());
		
		name = AttributionSummaryOrderType.FUTURES_IMPACT.getAttributionName();
		targetAttributionSummary.setAttrtnName(name);
		converted = converter.convert(attributionSummaries, calledByUserId);
		as = converted.get(0);
		assertEquals(2, as.getDisplayOrder().intValue());
		
		name = AttributionSummaryOrderType.LIQUIDITY_MANAGEMENT_IMPACT.getAttributionName();
		targetAttributionSummary.setAttrtnName(name);
		converted = converter.convert(attributionSummaries, calledByUserId);
		as = converted.get(0);
		assertEquals(3, as.getDisplayOrder().intValue());
		
		name = AttributionSummaryOrderType.SECURITY_PRICE_EXECUTION.getAttributionName();
		targetAttributionSummary.setAttrtnName(name);
		converted = converter.convert(attributionSummaries, calledByUserId);
		as = converted.get(0);
		assertEquals(4, as.getDisplayOrder().intValue());
		
		name = AttributionSummaryOrderType.TRADING_COST.getAttributionName();
		targetAttributionSummary.setAttrtnName(name);
		converted = converter.convert(attributionSummaries, calledByUserId);
		as = converted.get(0);
		assertEquals(5, as.getDisplayOrder().intValue());
		
		name = AttributionSummaryOrderType.CURRENCY_PRICE_EXECUTION.getAttributionName();
		targetAttributionSummary.setAttrtnName(name);
		converted = converter.convert(attributionSummaries, calledByUserId);
		as = converted.get(0);
		assertEquals(6, as.getDisplayOrder().intValue());
		
		name = AttributionSummaryOrderType.DIVIDEND_WITHOLDING_IMPACT.getAttributionName();
		targetAttributionSummary.setAttrtnName(name);
		converted = converter.convert(attributionSummaries, calledByUserId);
		as = converted.get(0);
		assertEquals(7, as.getDisplayOrder().intValue());
		
		name = AttributionSummaryOrderType.SECURITY_LENDING_INCOME.getAttributionName();
		targetAttributionSummary.setAttrtnName(name);
		converted = converter.convert(attributionSummaries, calledByUserId);
		as = converted.get(0);
		assertEquals(8, as.getDisplayOrder().intValue());
		
		name = AttributionSummaryOrderType.MGMT_AND_CUSTODY_FEES.getAttributionName();
		targetAttributionSummary.setAttrtnName(name);
		converted = converter.convert(attributionSummaries, calledByUserId);
		as = converted.get(0);
		assertEquals(9, as.getDisplayOrder().intValue());
		
		name = AttributionSummaryOrderType.SUBSTITUTES_IMPACT.getAttributionName();
		targetAttributionSummary.setAttrtnName(name);
		converted = converter.convert(attributionSummaries, calledByUserId);
		as = converted.get(0);
		assertEquals(10, as.getDisplayOrder().intValue());
		
		name = AttributionSummaryOrderType.RESTRICTIONS_IMPACT.getAttributionName();
		targetAttributionSummary.setAttrtnName(name);
		converted = converter.convert(attributionSummaries, calledByUserId);
		as = converted.get(0);
		assertEquals(11, as.getDisplayOrder().intValue());
		
		name = AttributionSummaryOrderType.INTERNAL_LIQUIDITY.getAttributionName();
		targetAttributionSummary.setAttrtnName(name);
		converted = converter.convert(attributionSummaries, calledByUserId);
		as = converted.get(0);
		assertEquals(12, as.getDisplayOrder().intValue());
		
		name = AttributionSummaryOrderType.RESIDUAL.getAttributionName();
		targetAttributionSummary.setAttrtnName(name);
		converted = converter.convert(attributionSummaries, calledByUserId);
		as = converted.get(0);
		assertEquals(13, as.getDisplayOrder().intValue());
	}

	@Test
	public void assignsHighValueForDisplayOrderForUnrecognizedAttributionNames() {
		DatasourceFileDAO datasourceFileDAO = new DatasourceFileDAO();
		datasourceFileDAO.setId(660L);
		AttributionTargetDAO targetAttributionSummary = AttributionSummaryTestHelper.buildAttributionSummary(new Date(), "portId", "name","3MON", 10,datasourceFileDAO);
		String name = "Super Fun Attribution Name";
		targetAttributionSummary.setAttrtnName(name);
		
		List<AttributionTargetDAO> attributionSummaries = new ArrayList<>();
		attributionSummaries.add(targetAttributionSummary);
		String calledByUserId = "UXYZ";
		
		List<AttributionSummary> converted = converter.convert(attributionSummaries, calledByUserId);
		assertFalse(converted.isEmpty());
		
		AttributionSummary as = converted.get(0);
		assertEquals(99, as.getDisplayOrder().intValue());
	}
}


		AttributionSummaryDataTest.java

package com.vanguard.corp.ics.sdt.behaviors.datatransfer.attributionsummary;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotEquals;

import java.math.BigDecimal;
import java.util.Calendar;
import java.util.Date;

import org.junit.Test;

import com.vanguard.corp.ics.dao.target.DatasourceFileDAO;
import com.vanguard.corp.ics.sdt.dao.impl.entity.report.AttributionSummary;

public class AttributionSummaryDataTest {
	
	private AttributionSummary classUnderTest = new AttributionSummary();

	
	@Test
	public void attributionSummaryHasAttributionSummaryId() {
		final Long id = Long.valueOf(123L);
		classUnderTest.setId(id);
		assertEquals(id, classUnderTest.getId());
	}
	
	@Test
	public void AttributionSummaryHasDataSrcFileId() {
		final Long id = Long.valueOf(123L);
		DatasourceFileDAO datasourceFileDAO = new DatasourceFileDAO();
		datasourceFileDAO.setId(id);
		classUnderTest.setDatasourceFileDAO(datasourceFileDAO);
		assertEquals(datasourceFileDAO, classUnderTest.getDatasourceFileDAO());
	}
	
	
	@Test
	public void attributeSummaryHasPortId() {
		String portId = "PORT_ID";
		classUnderTest.setPortId(portId);
		assertEquals(classUnderTest.getPortId(), portId );
	}

	@Test
	public void attributeSummaryHasEffectiveDates() {
		Calendar cal = Calendar.getInstance();
		final Date effectiveEnd = cal.getTime();
		cal.add(Calendar.YEAR, -1); // last year
		final Date effectiveBegin = cal.getTime();
		assertNotEquals(effectiveBegin, effectiveEnd);
		
		classUnderTest.setEffectiveBeginDate(effectiveBegin);
		classUnderTest.setEffectiveEndDate(effectiveEnd);
		classUnderTest.setEffectiveDate(effectiveBegin);
		assertEquals(effectiveBegin, classUnderTest.getEffectiveBeginDate());
		assertEquals(effectiveEnd, classUnderTest.getEffectiveEndDate());
		assertEquals(effectiveBegin, classUnderTest.getEffectiveDate());
	}

	@Test
	public void attributeSummaryHasName() {
		String name = "TEST_NAME";
		classUnderTest.setName(name);
		assertEquals(classUnderTest.getName(), name );
	}

	@Test
	public void attributeSummaryHasOneMonthVal() {
		final BigDecimal oneMonthVal = new BigDecimal("1234567890.12345");
		classUnderTest.setOneMonthVal(oneMonthVal);
		assertEquals(oneMonthVal, classUnderTest.getOneMonthVal());
	}

	@Test
	public void attributeSummaryHasThreeMonthVal() {
		final BigDecimal threeMonthVal = new BigDecimal("1234567890.12345");
		classUnderTest.setThreeMonthVal(threeMonthVal);
		assertEquals(threeMonthVal, classUnderTest.getThreeMonthVal());
	}

	@Test
	public void attributeSummaryHasSixMonthVal() {
		final BigDecimal sixMonthVal = new BigDecimal("1234567890.12345");
		classUnderTest.setSixMonthVal(sixMonthVal);
		assertEquals(sixMonthVal, classUnderTest.getSixMonthVal());
	}

	@Test
	public void attributeSummaryHasNineMonthVal() {
		final BigDecimal nineMonthVal = new BigDecimal("1234567890.12345");
		classUnderTest.setNineMonthVal(nineMonthVal);
		assertEquals(nineMonthVal, classUnderTest.getNineMonthVal());
	}

	@Test
	public void attributeSummaryHasTwelveMonthVal() {
		final BigDecimal twelveMonthVal = new BigDecimal("1234567890.12345");
		classUnderTest.setTwelveMonthVal(twelveMonthVal);
		assertEquals(twelveMonthVal, classUnderTest.getTwelveMonthVal());
	}

	@Test
	public void attributeSummaryHasYearToDateVal() {
		final BigDecimal yearToDate = new BigDecimal("1234567890.12345");
		classUnderTest.setYearToDateVal(yearToDate);
		assertEquals(yearToDate, classUnderTest.getYearToDateVal());
	}

	@Test
	public void attributeSummaryHasLastUpdatedUserId() {
		String name = "TEST_NAME";
		classUnderTest.setLastUpdatedUserId(name);
		assertEquals(classUnderTest.getLastUpdatedUserId(), name );
	}

	@Test
	public void attributeSummaryHasLastUpdatedDate() {
		Calendar cal = Calendar.getInstance();
		final Date lastUpdatedDate = cal.getTime();
		classUnderTest.setLastUpdatedDate(lastUpdatedDate);
		assertEquals(lastUpdatedDate, classUnderTest.getLastUpdatedDate());
	}

	@Test
	public void attributeSummaryHasDisplayOrder() {
		final Integer displayOrder = 1;
		classUnderTest.setDisplayOrder(displayOrder);
		assertEquals(displayOrder, classUnderTest.getDisplayOrder());
	}
	
	@Test
	public void attributeSummaryHasDatasourceFileDao() {
		final DatasourceFileDAO datasourceFileDao = new DatasourceFileDAO();
		classUnderTest.setDatasourceFileDAO(datasourceFileDao);
		assertEquals(datasourceFileDao, classUnderTest.getDatasourceFileDAO());
	}

}


	AttributionSummaryTestHelper.java


package com.vanguard.corp.ics.sdt.behaviors.datatransfer.attributionsummary;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Random;

import com.vanguard.corp.ics.dao.target.AttributionTargetDAO;
import com.vanguard.corp.ics.dao.target.DatasourceFileDAO;
import com.vanguard.corp.ics.sdt.service.api.constants.AttributionSummaryOrderType;

public class AttributionSummaryTestHelper {

	public static List<AttributionTargetDAO> buildAttributionSummaryTargetList(final Date effectiveDate,
			final String portId) {
		List<AttributionTargetDAO> attributionTargetDAO = new ArrayList<>();
		DatasourceFileDAO datasourceFileDAO = new DatasourceFileDAO();
		datasourceFileDAO.setId(660L);
		attributionTargetDAO.add(buildAttributionSummary(effectiveDate, portId, AttributionSummaryOrderType.STOCK_SELECTION_IMPACT.getAttributionName(), "1MON", Integer.MAX_VALUE, datasourceFileDAO));
		attributionTargetDAO.add(buildAttributionSummary(effectiveDate, portId, AttributionSummaryOrderType.FUTURES_IMPACT.getAttributionName(), "1MON", Integer.MAX_VALUE, datasourceFileDAO));
		attributionTargetDAO.add(buildAttributionSummary(effectiveDate, portId, AttributionSummaryOrderType.LIQUIDITY_MANAGEMENT_IMPACT.getAttributionName(), "1MON", Integer.MAX_VALUE, datasourceFileDAO));
		attributionTargetDAO.add(buildAttributionSummary(effectiveDate, portId, AttributionSummaryOrderType.SECURITY_PRICE_EXECUTION.getAttributionName(), "1MON", 100, datasourceFileDAO));
		attributionTargetDAO.add(buildAttributionSummary(effectiveDate, portId, AttributionSummaryOrderType.TRADING_COST.getAttributionName(), "1MON", 5000, datasourceFileDAO));
		attributionTargetDAO.add(buildAttributionSummary(effectiveDate, portId, AttributionSummaryOrderType.CURRENCY_PRICE_EXECUTION.getAttributionName(), "1MON",5000, datasourceFileDAO));
		attributionTargetDAO.add(buildAttributionSummary(effectiveDate, portId, AttributionSummaryOrderType.DIVIDEND_WITHOLDING_IMPACT.getAttributionName(), "1MON",5000, datasourceFileDAO));
		attributionTargetDAO.add(buildAttributionSummary(effectiveDate, portId, AttributionSummaryOrderType.SECURITY_LENDING_INCOME.getAttributionName(), "1MON", 5000,datasourceFileDAO));
		attributionTargetDAO.add(buildAttributionSummary(effectiveDate, portId, AttributionSummaryOrderType.MGMT_AND_CUSTODY_FEES.getAttributionName(), "1MON", 5000,datasourceFileDAO));
		attributionTargetDAO.add(buildAttributionSummary(effectiveDate, portId, AttributionSummaryOrderType.SUBSTITUTES_IMPACT.getAttributionName(), "1MON", 100, datasourceFileDAO));
		attributionTargetDAO.add(buildAttributionSummary(effectiveDate, portId, AttributionSummaryOrderType.RESTRICTIONS_IMPACT.getAttributionName(), "1MON", 5000, datasourceFileDAO));
		attributionTargetDAO.add(buildAttributionSummary(effectiveDate, portId, AttributionSummaryOrderType.INTERNAL_LIQUIDITY.getAttributionName(), "1MON", 5000, datasourceFileDAO));
		attributionTargetDAO.add(buildAttributionSummary(effectiveDate, portId, AttributionSummaryOrderType.RESIDUAL.getAttributionName(), "1MON", 5000, datasourceFileDAO));
		
		attributionTargetDAO.add(buildAttributionSummary(effectiveDate, portId, AttributionSummaryOrderType.STOCK_SELECTION_IMPACT.getAttributionName(), "3MON",Integer.MAX_VALUE, datasourceFileDAO));
		attributionTargetDAO.add(buildAttributionSummary(effectiveDate, portId, AttributionSummaryOrderType.FUTURES_IMPACT.getAttributionName(), "3MON",Integer.MAX_VALUE, datasourceFileDAO));
		attributionTargetDAO.add(buildAttributionSummary(effectiveDate, portId, AttributionSummaryOrderType.LIQUIDITY_MANAGEMENT_IMPACT.getAttributionName(), "3MON",Integer.MAX_VALUE, datasourceFileDAO));
		attributionTargetDAO.add(buildAttributionSummary(effectiveDate, portId, AttributionSummaryOrderType.SECURITY_PRICE_EXECUTION.getAttributionName(), "3MON", 100,datasourceFileDAO));
		attributionTargetDAO.add(buildAttributionSummary(effectiveDate, portId, AttributionSummaryOrderType.TRADING_COST.getAttributionName(), "3MON", 5000, datasourceFileDAO));
		attributionTargetDAO.add(buildAttributionSummary(effectiveDate, portId, AttributionSummaryOrderType.CURRENCY_PRICE_EXECUTION.getAttributionName(), "3MON",5000, datasourceFileDAO));
		attributionTargetDAO.add(buildAttributionSummary(effectiveDate, portId, AttributionSummaryOrderType.DIVIDEND_WITHOLDING_IMPACT.getAttributionName(), "3MON",5000, datasourceFileDAO));
		attributionTargetDAO.add(buildAttributionSummary(effectiveDate, portId, AttributionSummaryOrderType.SECURITY_LENDING_INCOME.getAttributionName(), "3MON", 5000,datasourceFileDAO));
		attributionTargetDAO.add(buildAttributionSummary(effectiveDate, portId, AttributionSummaryOrderType.MGMT_AND_CUSTODY_FEES.getAttributionName(), "3MON", 5000,datasourceFileDAO));
		attributionTargetDAO.add(buildAttributionSummary(effectiveDate, portId, AttributionSummaryOrderType.SUBSTITUTES_IMPACT.getAttributionName(), "3MON", 100, datasourceFileDAO));
		attributionTargetDAO.add(buildAttributionSummary(effectiveDate, portId, AttributionSummaryOrderType.RESTRICTIONS_IMPACT.getAttributionName(), "3MON", 5000, datasourceFileDAO));
		attributionTargetDAO.add(buildAttributionSummary(effectiveDate, portId, AttributionSummaryOrderType.INTERNAL_LIQUIDITY.getAttributionName(), "3MON", 5000, datasourceFileDAO));
		attributionTargetDAO.add(buildAttributionSummary(effectiveDate, portId, AttributionSummaryOrderType.RESIDUAL.getAttributionName(), "3MON", 5000, datasourceFileDAO));
		
		attributionTargetDAO.add(buildAttributionSummary(effectiveDate, portId, AttributionSummaryOrderType.STOCK_SELECTION_IMPACT.getAttributionName(), "6MON",Integer.MAX_VALUE, datasourceFileDAO));
		attributionTargetDAO.add(buildAttributionSummary(effectiveDate, portId, AttributionSummaryOrderType.FUTURES_IMPACT.getAttributionName(), "6MON",Integer.MAX_VALUE, datasourceFileDAO));
		attributionTargetDAO.add(buildAttributionSummary(effectiveDate, portId, AttributionSummaryOrderType.LIQUIDITY_MANAGEMENT_IMPACT.getAttributionName(), "6MON",Integer.MAX_VALUE, datasourceFileDAO));
		attributionTargetDAO.add(buildAttributionSummary(effectiveDate, portId, AttributionSummaryOrderType.SECURITY_PRICE_EXECUTION.getAttributionName(), "6MON", 100,datasourceFileDAO));
		attributionTargetDAO.add(buildAttributionSummary(effectiveDate, portId, AttributionSummaryOrderType.TRADING_COST.getAttributionName(), "6MON", 5000, datasourceFileDAO));
		attributionTargetDAO.add(buildAttributionSummary(effectiveDate, portId, AttributionSummaryOrderType.CURRENCY_PRICE_EXECUTION.getAttributionName(), "6MON",5000, datasourceFileDAO));
		attributionTargetDAO.add(buildAttributionSummary(effectiveDate, portId, AttributionSummaryOrderType.DIVIDEND_WITHOLDING_IMPACT.getAttributionName(), "6MON",5000, datasourceFileDAO));
		attributionTargetDAO.add(buildAttributionSummary(effectiveDate, portId, AttributionSummaryOrderType.SECURITY_LENDING_INCOME.getAttributionName(), "6MON", 5000,datasourceFileDAO));
		attributionTargetDAO.add(buildAttributionSummary(effectiveDate, portId, AttributionSummaryOrderType.MGMT_AND_CUSTODY_FEES.getAttributionName(), "6MON", 5000,datasourceFileDAO));
		attributionTargetDAO.add(buildAttributionSummary(effectiveDate, portId, AttributionSummaryOrderType.SUBSTITUTES_IMPACT.getAttributionName(), "6MON", 100, datasourceFileDAO));
		attributionTargetDAO.add(buildAttributionSummary(effectiveDate, portId, AttributionSummaryOrderType.RESTRICTIONS_IMPACT.getAttributionName(), "6MON", 5000, datasourceFileDAO));
		attributionTargetDAO.add(buildAttributionSummary(effectiveDate, portId, AttributionSummaryOrderType.INTERNAL_LIQUIDITY.getAttributionName(), "6MON", 5000, datasourceFileDAO));
		attributionTargetDAO.add(buildAttributionSummary(effectiveDate, portId, AttributionSummaryOrderType.RESIDUAL.getAttributionName(), "6MON", 5000, datasourceFileDAO));
		
		attributionTargetDAO.add(buildAttributionSummary(effectiveDate, portId, AttributionSummaryOrderType.STOCK_SELECTION_IMPACT.getAttributionName(), "9MON",Integer.MAX_VALUE, datasourceFileDAO));
		attributionTargetDAO.add(buildAttributionSummary(effectiveDate, portId, AttributionSummaryOrderType.FUTURES_IMPACT.getAttributionName(), "9MON",Integer.MAX_VALUE, datasourceFileDAO));
		attributionTargetDAO.add(buildAttributionSummary(effectiveDate, portId, AttributionSummaryOrderType.LIQUIDITY_MANAGEMENT_IMPACT.getAttributionName(), "9MON",Integer.MAX_VALUE, datasourceFileDAO));
		attributionTargetDAO.add(buildAttributionSummary(effectiveDate, portId, AttributionSummaryOrderType.SECURITY_PRICE_EXECUTION.getAttributionName(), "9MON", 100,datasourceFileDAO));
		attributionTargetDAO.add(buildAttributionSummary(effectiveDate, portId, AttributionSummaryOrderType.TRADING_COST.getAttributionName(), "9MON", 5000, datasourceFileDAO));
		attributionTargetDAO.add(buildAttributionSummary(effectiveDate, portId, AttributionSummaryOrderType.CURRENCY_PRICE_EXECUTION.getAttributionName(), "9MON",5000, datasourceFileDAO));
		attributionTargetDAO.add(buildAttributionSummary(effectiveDate, portId, AttributionSummaryOrderType.DIVIDEND_WITHOLDING_IMPACT.getAttributionName(), "9MON",5000, datasourceFileDAO));
		attributionTargetDAO.add(buildAttributionSummary(effectiveDate, portId, AttributionSummaryOrderType.SECURITY_LENDING_INCOME.getAttributionName(), "9MON", 5000,datasourceFileDAO));
		attributionTargetDAO.add(buildAttributionSummary(effectiveDate, portId, AttributionSummaryOrderType.MGMT_AND_CUSTODY_FEES.getAttributionName(), "9MON", 5000,datasourceFileDAO));
		attributionTargetDAO.add(buildAttributionSummary(effectiveDate, portId, AttributionSummaryOrderType.SUBSTITUTES_IMPACT.getAttributionName(), "9MON", 100, datasourceFileDAO));
		attributionTargetDAO.add(buildAttributionSummary(effectiveDate, portId, AttributionSummaryOrderType.RESTRICTIONS_IMPACT.getAttributionName(), "9MON", 5000, datasourceFileDAO));
		attributionTargetDAO.add(buildAttributionSummary(effectiveDate, portId, AttributionSummaryOrderType.INTERNAL_LIQUIDITY.getAttributionName(), "9MON", 5000, datasourceFileDAO));
		attributionTargetDAO.add(buildAttributionSummary(effectiveDate, portId, AttributionSummaryOrderType.RESIDUAL.getAttributionName(), "9MON", 5000, datasourceFileDAO));
		
		attributionTargetDAO.add(buildAttributionSummary(effectiveDate, portId, AttributionSummaryOrderType.STOCK_SELECTION_IMPACT.getAttributionName(), "12MO",Integer.MAX_VALUE, datasourceFileDAO));
		attributionTargetDAO.add(buildAttributionSummary(effectiveDate, portId, AttributionSummaryOrderType.FUTURES_IMPACT.getAttributionName(), "12MO",Integer.MAX_VALUE, datasourceFileDAO));
		attributionTargetDAO.add(buildAttributionSummary(effectiveDate, portId, AttributionSummaryOrderType.LIQUIDITY_MANAGEMENT_IMPACT.getAttributionName(), "12MO",Integer.MAX_VALUE, datasourceFileDAO));
		attributionTargetDAO.add(buildAttributionSummary(effectiveDate, portId, AttributionSummaryOrderType.SECURITY_PRICE_EXECUTION.getAttributionName(), "12MO", 100,datasourceFileDAO));
		attributionTargetDAO.add(buildAttributionSummary(effectiveDate, portId, AttributionSummaryOrderType.TRADING_COST.getAttributionName(), "12MO", 5000, datasourceFileDAO));
		attributionTargetDAO.add(buildAttributionSummary(effectiveDate, portId, AttributionSummaryOrderType.CURRENCY_PRICE_EXECUTION.getAttributionName(), "12MO",5000, datasourceFileDAO));
		attributionTargetDAO.add(buildAttributionSummary(effectiveDate, portId, AttributionSummaryOrderType.DIVIDEND_WITHOLDING_IMPACT.getAttributionName(), "12MO",5000, datasourceFileDAO));
		attributionTargetDAO.add(buildAttributionSummary(effectiveDate, portId, AttributionSummaryOrderType.SECURITY_LENDING_INCOME.getAttributionName(), "12MO", 5000,datasourceFileDAO));
		attributionTargetDAO.add(buildAttributionSummary(effectiveDate, portId, AttributionSummaryOrderType.MGMT_AND_CUSTODY_FEES.getAttributionName(), "12MO", 5000,datasourceFileDAO));
		attributionTargetDAO.add(buildAttributionSummary(effectiveDate, portId, AttributionSummaryOrderType.SUBSTITUTES_IMPACT.getAttributionName(), "12MO", 100, datasourceFileDAO));
		attributionTargetDAO.add(buildAttributionSummary(effectiveDate, portId, AttributionSummaryOrderType.RESTRICTIONS_IMPACT.getAttributionName(), "12MO", 5000, datasourceFileDAO));
		attributionTargetDAO.add(buildAttributionSummary(effectiveDate, portId, AttributionSummaryOrderType.INTERNAL_LIQUIDITY.getAttributionName(), "12MO", 5000, datasourceFileDAO));
		attributionTargetDAO.add(buildAttributionSummary(effectiveDate, portId, AttributionSummaryOrderType.RESIDUAL.getAttributionName(), "12MO", 5000, datasourceFileDAO));
		
		attributionTargetDAO.add(buildAttributionSummary(effectiveDate, portId, AttributionSummaryOrderType.STOCK_SELECTION_IMPACT.getAttributionName(), "CYTD",Integer.MAX_VALUE, datasourceFileDAO));
		attributionTargetDAO.add(buildAttributionSummary(effectiveDate, portId, AttributionSummaryOrderType.FUTURES_IMPACT.getAttributionName(), "CYTD",Integer.MAX_VALUE, datasourceFileDAO));
		attributionTargetDAO.add(buildAttributionSummary(effectiveDate, portId, AttributionSummaryOrderType.LIQUIDITY_MANAGEMENT_IMPACT.getAttributionName(), "CYTD",Integer.MAX_VALUE, datasourceFileDAO));
		attributionTargetDAO.add(buildAttributionSummary(effectiveDate, portId, AttributionSummaryOrderType.SECURITY_PRICE_EXECUTION.getAttributionName(), "CYTD", 100,datasourceFileDAO));
		attributionTargetDAO.add(buildAttributionSummary(effectiveDate, portId, AttributionSummaryOrderType.TRADING_COST.getAttributionName(), "CYTD", 5000, datasourceFileDAO));
		attributionTargetDAO.add(buildAttributionSummary(effectiveDate, portId, AttributionSummaryOrderType.CURRENCY_PRICE_EXECUTION.getAttributionName(), "CYTD",5000, datasourceFileDAO));
		attributionTargetDAO.add(buildAttributionSummary(effectiveDate, portId, AttributionSummaryOrderType.DIVIDEND_WITHOLDING_IMPACT.getAttributionName(), "CYTD",5000, datasourceFileDAO));
		attributionTargetDAO.add(buildAttributionSummary(effectiveDate, portId, AttributionSummaryOrderType.SECURITY_LENDING_INCOME.getAttributionName(), "CYTD", 5000,datasourceFileDAO));
		attributionTargetDAO.add(buildAttributionSummary(effectiveDate, portId, AttributionSummaryOrderType.MGMT_AND_CUSTODY_FEES.getAttributionName(), "CYTD", 5000,datasourceFileDAO));
		attributionTargetDAO.add(buildAttributionSummary(effectiveDate, portId, AttributionSummaryOrderType.SUBSTITUTES_IMPACT.getAttributionName(), "CYTD", 100, datasourceFileDAO));
		attributionTargetDAO.add(buildAttributionSummary(effectiveDate, portId, AttributionSummaryOrderType.RESTRICTIONS_IMPACT.getAttributionName(), "CYTD", 5000, datasourceFileDAO));
		attributionTargetDAO.add(buildAttributionSummary(effectiveDate, portId, AttributionSummaryOrderType.INTERNAL_LIQUIDITY.getAttributionName(), "CYTD", 5000, datasourceFileDAO));
		attributionTargetDAO.add(buildAttributionSummary(effectiveDate, portId, AttributionSummaryOrderType.RESIDUAL.getAttributionName(), "CYTD", 5000, datasourceFileDAO));
		
		attributionTargetDAO.add(buildAttributionSummary(effectiveDate, portId, AttributionSummaryOrderType.SUBSTITUTES_IMPACT.getAttributionName(), "ABCD", 100, datasourceFileDAO));
		attributionTargetDAO.add(buildAttributionSummary(effectiveDate, portId, AttributionSummaryOrderType.RESTRICTIONS_IMPACT.getAttributionName(), "ABCD", 5000, datasourceFileDAO));
		attributionTargetDAO.add(buildAttributionSummary(effectiveDate, portId, AttributionSummaryOrderType.INTERNAL_LIQUIDITY.getAttributionName(), "ABCD", 5000, datasourceFileDAO));
		attributionTargetDAO.add(buildAttributionSummary(effectiveDate, portId, AttributionSummaryOrderType.RESIDUAL.getAttributionName(), "ABCD", 5000, datasourceFileDAO));
		
		return attributionTargetDAO;
	}

	public static AttributionTargetDAO buildAttributionSummary(final Date effectiveDate, final String portId,
			final String name, final String code, final int max, DatasourceFileDAO datasourceFileDAO) {

		Random generator = new Random((new Date()).getTime());
		AttributionTargetDAO c = new AttributionTargetDAO();
		c.setId(generator.nextLong());
		c.setEffectiveDate(effectiveDate);
		c.setPortfolioCode(portId);
		c.setAttrtnName(name);
		c.setAttrtnTypeCd(code);
		c.setDatasourceFileDAO(datasourceFileDAO);
		c.setAttrtnTypeVal(BigDecimal.valueOf(max));
		return c;
	}

	public BigDecimal getRandomBigDecimal(final int max) {
		Random generator = new Random((new Date()).getTime());
		double val = generator.nextDouble() * 2.0 * (double) max;
		val -= max;
		return new BigDecimal(String.format("%.5f", val));
	}

	public Map<Integer, String> getDisplayOrder() {
		Map<Integer, String> displayOrder = new HashMap<>();
		displayOrder.put(1, AttributionSummaryOrderType.STOCK_SELECTION_IMPACT.getAttributionName());
		displayOrder.put(2, AttributionSummaryOrderType.FUTURES_IMPACT.getAttributionName());
		displayOrder.put(3, AttributionSummaryOrderType.LIQUIDITY_MANAGEMENT_IMPACT.getAttributionName());
		displayOrder.put(4, AttributionSummaryOrderType.SECURITY_PRICE_EXECUTION.getAttributionName());
		displayOrder.put(5, AttributionSummaryOrderType.TRADING_COST.getAttributionName());
		displayOrder.put(6, AttributionSummaryOrderType.CURRENCY_PRICE_EXECUTION.getAttributionName());
		displayOrder.put(7, AttributionSummaryOrderType.DIVIDEND_WITHOLDING_IMPACT.getAttributionName());
		displayOrder.put(8, AttributionSummaryOrderType.SECURITY_LENDING_INCOME.getAttributionName());
		displayOrder.put(9, AttributionSummaryOrderType.MGMT_AND_CUSTODY_FEES.getAttributionName());
		displayOrder.put(10, AttributionSummaryOrderType.SUBSTITUTES_IMPACT.getAttributionName());
		displayOrder.put(11, AttributionSummaryOrderType.RESTRICTIONS_IMPACT.getAttributionName());
		displayOrder.put(12, AttributionSummaryOrderType.INTERNAL_LIQUIDITY.getAttributionName());
		displayOrder.put(13, AttributionSummaryOrderType.RESIDUAL.getAttributionName());
		displayOrder.put(14, "Fake Attribution Summary");

		return displayOrder;
	}
}


		AttributionSummaryTransferServiceTest.java


package com.vanguard.corp.ics.sdt.behaviors.datatransfer.attributionsummary;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.Random;

import javax.servlet.http.HttpServletRequest;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;

import com.vanguard.corp.ics.dao.target.AttributionTargetDAO;
import com.vanguard.corp.ics.dao.target.DatasourceFileDAO;
import com.vanguard.corp.ics.repository.target.AttributionSummaryTargetRepository;
import com.vanguard.corp.ics.sdt.dao.impl.entity.report.AttributionSummary;
import com.vanguard.corp.ics.sdt.dao.impl.repository.AttributionSummaryRepository;
import com.vanguard.corp.ics.sdt.service.api.TransferService;
import com.vanguard.corp.ics.sdt.service.api.constants.DataSetType;
import com.vanguard.corp.ics.sdt.service.api.exception.ReadAttributeSummaryException;
import com.vanguard.corp.ics.sdt.service.api.exception.SaveAttributeSummaryException;
import com.vanguard.corp.ics.sdt.service.impl.attributionsummary.AttributionSummaryConverter;
import com.vanguard.corp.ics.sdt.service.impl.attributionsummary.AttributionSummaryTransferService;;

@RunWith(MockitoJUnitRunner.class)
public class AttributionSummaryTransferServiceTest {
	@InjectMocks
	private TransferService classUnderTest = new AttributionSummaryTransferService();

	@Mock
	private AttributionSummaryTargetRepository readRepo;

	@Mock
	private AttributionSummaryRepository jpaRepo;

	@Mock
	private AttributionSummaryConverter dataConverter;

	private static final String PORT_ID_1 = "PORT01";

	@Mock
	private HttpServletRequest request;

	@Before
	public void setUp() throws Exception {
	}

	@Test
	public void serviceHasMediumPriority() {
		assertEquals(TransferService.Priority.MEDIUM, classUnderTest.getPriority());
	}

	@Test
	public void serviceWantsToHandleAttributionSummaryyDataSetTypeRequests() {
		assertTrue(classUnderTest.handles(null, null, DataSetType.ATTRIBUTION_SUMMARY, null));
	}

	@Test
	public void serviceWantsToHandleNullDataSetTypeRequests() {
		assertTrue(classUnderTest.handles(null, null, null, null));
	}

	@Test
	public void serviceDoesNotWantToHandleOtherDataSetTypeRequests() {
		assertFalse(classUnderTest.handles(null, null, DataSetType.CHARACTERISTICS, null));
	}

	@Test(expected = IllegalArgumentException.class)
	public void serviceDoesNotAcceptNullEffectiveDate() {
		classUnderTest.transfer(null, PORT_ID_1, "abc", request);
	}

	@Test(expected = IllegalArgumentException.class)
	public void serviceDoesNotAcceptNullCalledByUserId() {
		classUnderTest.transfer(new Date(), PORT_ID_1, null, request);
	}

	@Test(expected = IllegalArgumentException.class)
	public void serviceDoesNotAcceptEmptyCalledByUserId() {
		classUnderTest.transfer(null, PORT_ID_1, "", request);
	}

	@Test
	public void serviceShouldGetDataByEffectiveDateOnlyWhenPortIdIsNull() {
		Date effectiveDate = new Date();
		String calledByUserId = "UXYZ";
		classUnderTest.transfer(new Date(), null, calledByUserId, request);
		verify(readRepo, times(1)).findAllByEffectiveDate(effectiveDate);
	}

	@Test
	public void serviceShouldGetDataByEffectiveDateAndPortIdWhenPortIdIsNotNull() {
		Date effectiveDate = new Date();
		String calledByUserId = "UXYZ";
		classUnderTest.transfer(new Date(), PORT_ID_1, calledByUserId, request);
		verify(readRepo, times(1)).findAllByEffectiveDateAndPortfolioCode(effectiveDate, PORT_ID_1);
	}

	@Test(expected = ReadAttributeSummaryException.class)
	public void serviceShouldThrowReadCharacteristicsExceptionWithInvalidEffectiveDate() {
		Date invalidEffectiveDate = new Date();
		String calledByUserId = "UXYZ";
		when(readRepo.findAllByEffectiveDate(invalidEffectiveDate)).thenThrow(Exception.class);
		classUnderTest.transfer(invalidEffectiveDate, null, calledByUserId, request);
	}

	@Test(expected = ReadAttributeSummaryException.class)
	public void serviceShouldThrowReadAttributionExceptionWithInvalidPortId() {
		Date validEffectiveDate = new Date();
		String invalidPortId = "INVALID_PORT_ID";
		String calledByUserId = "UXYZ";
		when(readRepo.findAllByEffectiveDateAndPortfolioCode(validEffectiveDate, invalidPortId))
				.thenThrow(Exception.class);
		classUnderTest.transfer(validEffectiveDate, invalidPortId, calledByUserId, request);
	}

	@Test
	public void serviceShouldFetchDataWithvalidEffectiveDate() {
		Date validEffectiveDate = new Date();
		String calledByUserId = "UXYZ";
		List<AttributionTargetDAO> attributionSummaryDAOs = Arrays.asList(new AttributionTargetDAO());
		when(readRepo.findAllByEffectiveDate(validEffectiveDate)).thenReturn(attributionSummaryDAOs);
		classUnderTest.transfer(validEffectiveDate, null, calledByUserId, request);
		verify(readRepo, times(1)).findAllByEffectiveDate(validEffectiveDate);
	}

	@Test(expected = SaveAttributeSummaryException.class)
	public void serviceShouldThrowExceptionWhenDataWriteFails() {
		Date validEffectiveDate = new Date();
		String calledByUserId = "UXYZ";
		AttributionTargetDAO attributionSummaryDAO = new AttributionTargetDAO();
		attributionSummaryDAO.setEffectiveDate(validEffectiveDate);
		attributionSummaryDAO.setPortfolioCode(PORT_ID_1);
		List<AttributionTargetDAO> attributionSummaryDAOs = Arrays.asList(attributionSummaryDAO);
		when(readRepo.findAllByEffectiveDateAndPortfolioCode(validEffectiveDate, PORT_ID_1))
				.thenReturn(attributionSummaryDAOs);
		AttributionSummary attributionSummary = new AttributionSummary();
		attributionSummary.setEffectiveDate(validEffectiveDate);
		attributionSummary.setPortId(PORT_ID_1);
		List<AttributionSummary> attributionSummaries = Arrays.asList(attributionSummary);
		when(dataConverter.convert(attributionSummaryDAOs, calledByUserId)).thenReturn(attributionSummaries);
		when(jpaRepo.save(attributionSummaries)).thenThrow(Exception.class);
		classUnderTest.transfer(validEffectiveDate, PORT_ID_1, calledByUserId, request);
	}

	@Test
	public void serviceShouldNotCallJpaRepoToSaveDataWhenDataListIsEmpty() {
		Date validEffectiveDate = new Date();
		String calledByUserId = "UXYZ";
		List<AttributionSummary> attributionSummaries = new ArrayList<>();
		classUnderTest.transfer(validEffectiveDate, null, calledByUserId, request);
		verify(jpaRepo, times(0)).save(attributionSummaries);
	}

	@Test
	public void serviceShouldExecuteLogicalDelete() {
		Date validEffectiveDate = new Date();
		String calledByUserId = "UXYZ";
		AttributionTargetDAO attributionSummaryDAO = new AttributionTargetDAO();
		attributionSummaryDAO.setEffectiveDate(validEffectiveDate);
		attributionSummaryDAO.setPortfolioCode(PORT_ID_1);
		List<AttributionTargetDAO> attributionSummaryDAOs = Arrays.asList(attributionSummaryDAO);
		AttributionSummary attributionSummary = new AttributionSummary();
		attributionSummary.setEffectiveDate(validEffectiveDate);
		attributionSummary.setPortId(PORT_ID_1);
		List<AttributionSummary> attributionSummaries = Arrays.asList(attributionSummary);
		when(readRepo.findAllByEffectiveDateAndPortfolioCode(validEffectiveDate, PORT_ID_1))
				.thenReturn(attributionSummaryDAOs);
		when(dataConverter.convert(attributionSummaryDAOs, calledByUserId)).thenReturn(attributionSummaries);
		when(jpaRepo.findByEffectiveDateAndPortIdAndEffectiveEndDateIsNull(validEffectiveDate, PORT_ID_1))
				.thenReturn(attributionSummaries);
		classUnderTest.transfer(validEffectiveDate, PORT_ID_1, calledByUserId, request);
		verify(jpaRepo, times(1)).save(attributionSummaries);
	}

	@Test
	public void serviceShouldConvertAttributionSummaryDAOToAttributionSummary() {
		AttributionSummaryConverter converter = new AttributionSummaryConverter();
		Date validEffectiveDate = null;
		String calledByUserId = "UXYZ";
		AttributionTargetDAO attributionTargetDAO = new AttributionTargetDAO();
		attributionTargetDAO.setId(new Random().nextLong());
		attributionTargetDAO.setEffectiveDate(validEffectiveDate);
		attributionTargetDAO.setPortfolioCode(PORT_ID_1);
		attributionTargetDAO.setAttrtnName("FAKE");
		attributionTargetDAO.setAttrtnTypeCd("CYTD");
		attributionTargetDAO.setAttrtnTypeVal(BigDecimal.ONE);

		attributionTargetDAO.setUpdatedUser("FAKE");
		attributionTargetDAO.setUpdatedDate(validEffectiveDate);
		List<AttributionTargetDAO> attributionSummaryDAOs = Arrays.asList(attributionTargetDAO);
		List<AttributionSummary> attributionSummaries = converter.convert(attributionSummaryDAOs, calledByUserId);

		for (AttributionSummary summary : attributionSummaries) {
			assertEquals(summary.getEffectiveDate(), validEffectiveDate);
			assertEquals(summary.getPortId(), PORT_ID_1);
			assertEquals(summary.getName(), "FAKE");
			assertEquals(summary.getOneMonthVal(), null);
			assertEquals(summary.getThreeMonthVal(), null);
			assertEquals(summary.getSixMonthVal(), null);
			assertEquals(summary.getNineMonthVal(), null);
			assertEquals(summary.getTwelveMonthVal(), null);
			assertEquals(summary.getYearToDateVal(), BigDecimal.ONE);
			assertEquals(summary.getEffectiveBeginDate(), validEffectiveDate);
			assertEquals(summary.getEffectiveEndDate(), validEffectiveDate);
			assertEquals(summary.getLastUpdatedUserId(), "UXYZ");
			assertEquals(summary.getLastUpdatedDate(), validEffectiveDate);
		}
	}

	@Test
	public void serviceShouldAddDisplayOrderingToAttributionSummaryWithValidNames() {
		AttributionSummaryConverter converter = new AttributionSummaryConverter();
		Date validEffectiveDate = new Date();
		String calledByUserId = "UXYZ";
		List<AttributionTargetDAO> attributionSummaryDAOs = AttributionSummaryTestHelper
				.buildAttributionSummaryTargetList(validEffectiveDate, PORT_ID_1);
		List<AttributionSummary> attributionSummaries = converter.convert(attributionSummaryDAOs, calledByUserId);
		Comparator<AttributionSummary> comparator = new Comparator<AttributionSummary>() {
			@Override
			public int compare(AttributionSummary o1, AttributionSummary o2) {
				return o1.getDisplayOrder().compareTo(o2.getDisplayOrder());
			}
		};
		Collections.sort(attributionSummaries, comparator);
		AttributionSummaryTestHelper attributionHelper = new AttributionSummaryTestHelper();
		Map<Integer, String> displayOrder = attributionHelper.getDisplayOrder();
		Integer i = 1;
		for(AttributionSummary summary : attributionSummaries){
			assertEquals(i, summary.getDisplayOrder());
			assertEquals(displayOrder.get(summary.getDisplayOrder()), summary.getName());
			i++;
		}
	}

	@Test
	public void serviceShouldAddDisplayOrderingToAttributionSummaryWithInValidNames() {
		AttributionSummaryConverter converter = new AttributionSummaryConverter();
		Date validEffectiveDate = new Date();
		String calledByUserId = "UXYZ";
		List<AttributionTargetDAO> attributionSummaryDAOs = new ArrayList<>();
		DatasourceFileDAO datasourceFileDAO = new DatasourceFileDAO();
		datasourceFileDAO.setId(660L);
		attributionSummaryDAOs.add(AttributionSummaryTestHelper.buildAttributionSummary(validEffectiveDate, PORT_ID_1,
				"INVALID_NAME", "CYTD", 5000, datasourceFileDAO));
		List<AttributionSummary> attributionSummaries = converter.convert(attributionSummaryDAOs, calledByUserId);
		Comparator<AttributionSummary> comparator = new Comparator<AttributionSummary>() {
			@Override
			public int compare(AttributionSummary o1, AttributionSummary o2) {
				return o1.getDisplayOrder().compareTo(o2.getDisplayOrder());
			}
		};
		Collections.sort(attributionSummaries, comparator);
		AttributionSummaryTestHelper attributionHelper = new AttributionSummaryTestHelper();
		Map<Integer, String> displayOrder = attributionHelper.getDisplayOrder();
		for (int i = 0; i < attributionSummaries.size(); i++) {
			assertEquals(new Integer(99), attributionSummaries.get(i).getDisplayOrder());
			assertNull(displayOrder.get(attributionSummaries.get(i).getDisplayOrder()));
		}
	}

}


		AttributionTargetDAOTest.java


package com.vanguard.corp.ics.sdt.behaviors.datatransfer.attributionsummary;

import static org.junit.Assert.assertEquals;

import java.util.Calendar;
import java.util.Date;

import org.junit.Test;

import com.vanguard.corp.ics.dao.target.AttributionTargetDAO;

public class AttributionTargetDAOTest {

	private AttributionTargetDAO dao = new AttributionTargetDAO();

	@Test
	public void testForCoverage() {
		String lastUpdatedUserId = "ABCD";
		Calendar c = Calendar.getInstance();
		c.add(Calendar.MONTH, -1);
		c.add(Calendar.MONTH, -1);
		Date lastUpdatedDate = c.getTime();

		dao.setUpdatedUser(lastUpdatedUserId);
		assertEquals(lastUpdatedUserId, dao.getUpdatedUser());

		dao.setUpdatedDate(lastUpdatedDate);
		assertEquals(lastUpdatedDate, dao.getUpdatedDate());
	}

}


com.vanguard.corp.ics.sdt.behaviors.datatransfer.characteristics(CharacteristicsConversionTest.java
CharacteristicsDataTest.java
CharacteristicsReportingTableDataAccessTest.java
CharacteristicsTransfersTest.java
FullCharacteristicsDataLoadTest.java
MagicRoundingTest.java)

com.vanguard.corp.ics.sdt.behaviors.datatransfer.performancesummary
		PerformanceSummaryTest.java

package com.vanguard.corp.ics.sdt.behaviors.datatransfer.performancesummary;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotEquals;

import java.math.BigDecimal;
import java.math.RoundingMode;
import java.util.Calendar;
import java.util.Date;

import javax.inject.Inject;

import org.junit.Test;

import com.vanguard.corp.ics.dao.target.DatasourceFileDAO;
import com.vanguard.corp.ics.sdt.dao.impl.entity.report.PerformanceSummary;

public class PerformanceSummaryTest {

	@Inject
	PerformanceSummary classUnderTest = new PerformanceSummary();

	@Test
	public void performanceSummaryHasPerformanceSummaryId() {
		classUnderTest.setPerformanceSummaryId(Long.valueOf(10));
		assertEquals(Long.valueOf(10), classUnderTest.getPerformanceSummaryId());
	}
	
	@Test
	public void performanceSummaryHasPortId() {
		String portId = "PORT_ID";
		classUnderTest.setPortId(portId);
		assertEquals(classUnderTest.getPortId(), portId );
	}

	@Test
	public void performanceSummaryHasEffectiveDates() {
		Calendar cal = Calendar.getInstance();
		final Date effectiveEnd = cal.getTime();
		cal.add(Calendar.YEAR, -1); // last year
		final Date effectiveBegin = cal.getTime();
		assertNotEquals(effectiveBegin, effectiveEnd);
		
		classUnderTest.setEffectiveBeginDate(effectiveBegin);
		classUnderTest.setEffectiveEndDate(effectiveEnd);
		classUnderTest.setEffectiveDate(effectiveBegin);
		assertEquals(effectiveBegin, classUnderTest.getEffectiveBeginDate());
		assertEquals(effectiveEnd, classUnderTest.getEffectiveEndDate());
		assertEquals(effectiveBegin, classUnderTest.getEffectiveDate());
	}

	@Test
	public void performanceSummaryHasName() {
		String name = "TEST_NAME";
		classUnderTest.setPerformanceTypeName(name);
		assertEquals(classUnderTest.getPerformanceTypeName(), name );
	}
	
	@Test
	public void performanceSummaryHasCode() {
		String name = "TEST_NAME";
		classUnderTest.setPerformanceTypeCode(name);
		assertEquals(classUnderTest.getPerformanceTypeCode(), name );
	}


	@Test
	public void performanceSummaryHasOneMonthValue() {
		final BigDecimal oneMonthVal = new BigDecimal("1234567890.12345");
		classUnderTest.setOneMonthValue(oneMonthVal);
		assertEquals(oneMonthVal.setScale(2, RoundingMode.HALF_UP), classUnderTest.getOneMonthValue());
	}

	@Test
	public void performanceSummaryHasThreeMonthValue() {
		final BigDecimal threeMonthVal = new BigDecimal("1234567890.12345");
		classUnderTest.setThreeMonthValue(threeMonthVal);
		assertEquals(threeMonthVal.setScale(2, RoundingMode.HALF_UP), classUnderTest.getThreeMonthValue());
	}

	@Test
	public void performanceSummaryHasSixMonthValue() {
		final BigDecimal sixMonthVal = new BigDecimal("1234567890.12345");
		classUnderTest.setSixMonthValue(sixMonthVal);
		assertEquals(sixMonthVal.setScale(2, RoundingMode.HALF_UP), classUnderTest.getSixMonthValue());
	}

	@Test
	public void performanceSummaryHasNineMonthValue() {
		final BigDecimal nineMonthVal = new BigDecimal("1234567890.12345");
		classUnderTest.setNineMonthValue(nineMonthVal);
		assertEquals(nineMonthVal.setScale(2, RoundingMode.HALF_UP), classUnderTest.getNineMonthValue());
	}

	@Test
	public void performanceSummaryHasOneYearValue() {
		final BigDecimal oneYearVal = new BigDecimal("1234567890.12345");
		classUnderTest.setOneYearValue(oneYearVal);
		assertEquals(oneYearVal.setScale(2, RoundingMode.HALF_UP).setScale(2, RoundingMode.HALF_UP), classUnderTest.getOneYearValue());
	}
	
	@Test
	public void performanceSummaryHasThreeYearValue() {
		final BigDecimal threeYearVal = new BigDecimal("1234567890.12345");
		classUnderTest.setThreeYearValue(threeYearVal);
		assertEquals(threeYearVal.setScale(2, RoundingMode.HALF_UP), classUnderTest.getThreeYearValue());
	}
	
	@Test
	public void performanceSummaryHasFiveYearValue() {
		final BigDecimal fiveYearVal = new BigDecimal("1234567890.12345");
		classUnderTest.setFiveYearValue(fiveYearVal);
		assertEquals(fiveYearVal.setScale(2, RoundingMode.HALF_UP), classUnderTest.getFiveYearValue());
	}
	
	@Test
	public void performanceSummaryHasTenYearValue() {
		final BigDecimal tenYearVal = new BigDecimal("1234567890.12345");
		classUnderTest.setTenYearValue(tenYearVal);
		assertEquals(tenYearVal.setScale(2, RoundingMode.HALF_UP), classUnderTest.getTenYearValue());
	}

	@Test
	public void performanceSummaryHasYearToDateValue() {
		final BigDecimal yearToDate = new BigDecimal("1234567890.12345");
		classUnderTest.setYearToDateValue(yearToDate);
		assertEquals(yearToDate.setScale(2, RoundingMode.HALF_UP), classUnderTest.getYearToDateValue());
	}
	
	@Test
	public void performanceSummaryHasInceptionYearValue() {
		final BigDecimal inceptionYearVal = new BigDecimal("1234567890.12345");
		classUnderTest.setInceptionValue(inceptionYearVal);
		assertEquals(inceptionYearVal.setScale(2, RoundingMode.HALF_UP), classUnderTest.getInceptionValue());
	}

	@Test
	public void performanceSummaryHasLastUpdatedUserId() {
		String name = "TEST_NAME";
		classUnderTest.setLastUpdatedUserId(name);
		assertEquals(classUnderTest.getLastUpdatedUserId(), name );
	}

	@Test
	public void performanceSummaryHasLastUpdatedDate() {
		Calendar cal = Calendar.getInstance();
		final Date lastUpdatedDate = cal.getTime();
		classUnderTest.setLastUpdatedDate(lastUpdatedDate);
		assertEquals(lastUpdatedDate, classUnderTest.getLastUpdatedDate());
	}
	
	@Test
	public void performanceSummaryHasInceptionPaValue() {
		BigDecimal inceptionPaValue = BigDecimal.ONE;
		classUnderTest.setInceptionPerformanceAdjustedValue(inceptionPaValue);
		assertEquals(classUnderTest.getInceptionPerformanceAdjustedValue(), inceptionPaValue.setScale(2));
	}
	
	@Test
	public void performanceSummaryHasNullInceptionPaValue() {
		BigDecimal inceptionPaValue = null;
		classUnderTest.setInceptionPerformanceAdjustedValue(inceptionPaValue);
		assertEquals(classUnderTest.getInceptionPerformanceAdjustedValue(), null);
	}

	@Test
	public void performanceSummaryHasDatasourceFileDao() {
		DatasourceFileDAO datasourceFileDao = new DatasourceFileDAO();
		classUnderTest.setDatasourceFileDAO(datasourceFileDao);
		assertEquals(datasourceFileDao, classUnderTest.getDatasourceFileDAO());
	}
	
	@Test
	public void performanceSummaryHasInceptionPerformanceAdjustedValue() {
		BigDecimal inceptionPerformanceAdjustedValue = new BigDecimal("1234567890.12345");
		inceptionPerformanceAdjustedValue = inceptionPerformanceAdjustedValue.setScale(2, BigDecimal.ROUND_HALF_UP);
		classUnderTest.setInceptionPerformanceAdjustedValue(inceptionPerformanceAdjustedValue);
		assertEquals(inceptionPerformanceAdjustedValue, classUnderTest.getInceptionPerformanceAdjustedValue());
	}
	
	@Test
	public void performanceSummaryHasCurrentYearToDateValue() {
		final BigDecimal currentYearToDateValue = new BigDecimal("1234567890.12345");
		classUnderTest.setCurrentYearToDateValue(currentYearToDateValue);
		assertEquals(currentYearToDateValue, classUnderTest.getCurrentYearToDateValue());
	}
}


		PerformanceSummaryTransferServiceTest.java


package com.vanguard.corp.ics.sdt.behaviors.datatransfer.performancesummary;

import static org.hamcrest.Matchers.anyOf;
import static org.hamcrest.Matchers.equalTo;
import static org.hamcrest.Matchers.not;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertThat;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.math.BigDecimal;
import java.math.RoundingMode;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpServletRequest;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;

import com.vanguard.corp.ics.dao.target.PerformanceCalculationDAO;
import com.vanguard.corp.ics.enums.CalculationPeriodEnum;
import com.vanguard.corp.ics.repository.target.PerformanceCalculationRepository;
import com.vanguard.corp.ics.sdt.dao.impl.entity.report.PerformanceSummary;
import com.vanguard.corp.ics.sdt.dao.impl.repository.PerformanceSummarayRepository;
import com.vanguard.corp.ics.sdt.service.api.TransferService;
import com.vanguard.corp.ics.sdt.service.api.constants.DataSetType;
import com.vanguard.corp.ics.sdt.service.api.constants.PerformanceSummaryCode;
import com.vanguard.corp.ics.sdt.service.api.constants.PerformanceSummaryName;
import com.vanguard.corp.ics.sdt.service.api.exception.ReadPerformanceSummaryException;
import com.vanguard.corp.ics.sdt.service.api.exception.SavePerformanceSummaryException;
import com.vanguard.corp.ics.sdt.service.impl.performancesummary.PerformanceSummaryDataConverter;
import com.vanguard.corp.ics.sdt.service.impl.performancesummary.PerformanceSummaryTransferService;

@RunWith(MockitoJUnitRunner.class)
public class PerformanceSummaryTransferServiceTest {
	private static final String PORT_ID_1 = "PORT01";
	private static final String PORT_ID_2 = "PORT02";

	@InjectMocks
	private TransferService classUnderTest = new PerformanceSummaryTransferService();

	@Mock
	private PerformanceCalculationRepository readRepo;
	
	@Mock
	private PerformanceSummarayRepository jpaRepo;

	@Mock
	private HttpServletRequest request;

	@Mock
	private PerformanceSummaryDataConverter dataConverter;

	@Before
	public void setUp() throws Exception {
	}

	@Test
	public void serviceHasMediumPriority() {
		assertEquals(TransferService.Priority.MEDIUM, classUnderTest.getPriority());
	}

	@Test
	public void serviceWantsToHandleAttributionSummaryyDataSetTypeRequests() {
		assertTrue(classUnderTest.handles(null, null, DataSetType.PERFORMANCE_SUMMARY, null));
	}

	@Test
	public void serviceWantsToHandleNullDataSetTypeRequests() {
		assertTrue(classUnderTest.handles(null, null, null, null));
	}

	@Test
	public void serviceDoesNotWantToHandleOtherDataSetTypeRequests() {
		assertFalse(classUnderTest.handles(null, null, DataSetType.ATTRIBUTION_SUMMARY, null));
	}

	@Test(expected = IllegalArgumentException.class)
	public void serviceDoesNotAcceptNullEffectiveDate() {
		classUnderTest.transfer(null, PORT_ID_1, "abc", request);
	}

	@Test(expected = IllegalArgumentException.class)
	public void serviceDoesNotAcceptNullCalledByUserId() {
		classUnderTest.transfer(new Date(), PORT_ID_1, null, request);
	}

	@Test(expected = IllegalArgumentException.class)
	public void serviceDoesNotAcceptEmptyCalledByUserId() {
		classUnderTest.transfer(new Date(), PORT_ID_1, "", request);
	}

	@Test
	public void serviceShouldGetDataByEffectiveDateOnlyWhenPortIdIsNull() {
		Date effectiveDate = new Date();
		String calledByUserId = "UXYZ";
		classUnderTest.transfer(effectiveDate, null, calledByUserId, request);
		verify(readRepo, times(1)).findByCalculationDateAndLastestVersion(effectiveDate);
	}


	@Test
	public void serviceShouldGetDataByEffectiveDateAndPortIdWhenPortIdIsNotNull() {
		Date effectiveDate = new Date();
		String calledByUserId = "UXYZ";
		classUnderTest.transfer(new Date(), PORT_ID_1, calledByUserId, request);
		verify(readRepo, times(1)).findByCalculationDateAndPortCodeAndLastestVersion(effectiveDate, PORT_ID_1);
	}

	@Test(expected = IllegalArgumentException.class)
	public void serviceShouldNotGetDataByNullEffectiveDate() {
		String calledByUserId = "UXYZ";
		classUnderTest.transfer(null, null, calledByUserId, request);
	}

	@Test(expected = ReadPerformanceSummaryException.class)
	public void serviceShouldThrowReadExceptionWhenTargetDataReadThrowsException() {
		Date effectiveDate = new Date();
		when(readRepo.findByCalculationDateAndLastestVersion(effectiveDate)).thenThrow(Exception.class);
		String calledByUserId = "UXYZ";
		classUnderTest.transfer(effectiveDate, null, calledByUserId, request);
	}

	@Test(expected = ReadPerformanceSummaryException.class)
	public void serviceShouldThrowReadExceptionWithInvalidPortId() {
		Date validEffectiveDate = new Date();
		String invalidPortId = "INVALID_PORT_ID";
		when(readRepo.findByCalculationDateAndPortCodeAndLastestVersion(validEffectiveDate, invalidPortId)).thenThrow(Exception.class);
		String calledByUserId = "UXYZ";
		classUnderTest.transfer(validEffectiveDate, invalidPortId, calledByUserId, request);
	}

	@Test
	public void serviceShouldFetchDataWithvalidEffectiveDate() {
		Date validEffectiveDate = new Date();
		List<PerformanceCalculationDAO> daos = Arrays.asList(new PerformanceCalculationDAO());
		when(readRepo.findByCalculationDateAndLastestVersion(validEffectiveDate)).thenReturn(daos);
		String calledByUserId = "UXYZ";
		classUnderTest.transfer(validEffectiveDate, null, calledByUserId, request);
		verify(readRepo, times(1)).findByCalculationDateAndLastestVersion(validEffectiveDate);
	}

	@Test(expected = SavePerformanceSummaryException.class)
	public void serviceShouldThrowExceptionWhenDataWriteFails() {
		Date validEffectiveDate = new Date();
		String calledByUserId = "UXYZ";
		PerformanceCalculationDAO dao = new PerformanceCalculationDAO();
		dao.setCalcDt(validEffectiveDate);
		dao.setPrtCd(PORT_ID_1);
		List<PerformanceCalculationDAO> daos = Arrays.asList(dao);
		when(readRepo.findByCalculationDateAndPortCodeAndLastestVersion(validEffectiveDate, PORT_ID_1)).thenReturn(daos);
		PerformanceSummary performanceSummary = new PerformanceSummary();
		performanceSummary.setEffectiveDate(validEffectiveDate);
		performanceSummary.setPortId(PORT_ID_1);
		List<PerformanceSummary> performanceSummaries = Arrays.asList(performanceSummary);
		when(dataConverter.convert(daos, validEffectiveDate, PORT_ID_1, calledByUserId)).thenReturn(performanceSummaries);
		when(jpaRepo.save(performanceSummaries)).thenThrow(Exception.class);
		classUnderTest.transfer(validEffectiveDate, PORT_ID_1, calledByUserId, request);
	}

	@Test
	public void serviceShouldCallJpaRepoToSaveMandatoryDataWhenDataListIsEmptyAndPortIdIsNotNull() {
		Date validEffectiveDate = new Date();
		String calledByUserId = "UXYZ";
		PerformanceCalculationDAO dao = new PerformanceCalculationDAO();
		dao.setCalcDt(validEffectiveDate);
		dao.setPrtCd(PORT_ID_1);
		List<PerformanceCalculationDAO> daos = Arrays.asList(dao);
		PerformanceSummary performanceSummary = new PerformanceSummary();
		performanceSummary.setEffectiveDate(validEffectiveDate);
		performanceSummary.setPortId(PORT_ID_1);
		List<PerformanceSummary> performanceSummaries = Arrays.asList(performanceSummary);
		when(readRepo.findByCalculationDateAndPortCodeAndLastestVersion(validEffectiveDate, PORT_ID_1)).thenReturn(daos);
		when(dataConverter.convert(daos, validEffectiveDate, PORT_ID_1, calledByUserId)).thenReturn(performanceSummaries);
		classUnderTest.transfer(validEffectiveDate, PORT_ID_1, calledByUserId, request);
		verify(jpaRepo, times(1)).save(performanceSummaries);
	}

	@Test
	public void serviceShouldExecuteLogicalDelete() {
		Date validEffectiveDate = new Date();
		String calledByUserId = "UXYZ";
		PerformanceCalculationDAO dao = new PerformanceCalculationDAO();
		dao.setCalcDt(validEffectiveDate);
		dao.setPrtCd(PORT_ID_1);
		List<PerformanceCalculationDAO> daos = Arrays.asList(dao);
		PerformanceSummary performanceSummary = new PerformanceSummary();
		performanceSummary.setEffectiveDate(validEffectiveDate);
		performanceSummary.setPortId(PORT_ID_1);
		List<PerformanceSummary> performanceSummaries = Arrays.asList(performanceSummary);
		when(readRepo.findByCalculationDateAndPortCodeAndLastestVersion(validEffectiveDate, PORT_ID_1)).thenReturn(daos);
		when(dataConverter.convert(daos, validEffectiveDate, PORT_ID_1, calledByUserId)).thenReturn(performanceSummaries);
		when(jpaRepo.findByEffectiveDateAndPortIdAndEffectiveEndDateIsNull(validEffectiveDate, PORT_ID_1)).thenReturn(performanceSummaries);
		for(PerformanceSummary data: performanceSummaries){
			assertNull(data.getEffectiveEndDate());
		}
		classUnderTest.transfer(validEffectiveDate, PORT_ID_1, calledByUserId, request);
		for (PerformanceSummary data : performanceSummaries) {
			assertNotNull(data.getEffectiveEndDate());
		}
		verify(jpaRepo, times(1)).save(performanceSummaries);
	}

	@Test
	public void serviceShouldConvertPerformanceCalculationToPerformanceSummaryForMandatoryTypes(){
		PerformanceSummaryDataConverter converter = new PerformanceSummaryDataConverter();
		Date validEffectiveDate = new Date();
		String calledByUserId = "UXYZ";
		List<PerformanceCalculationDAO> daos = buildPerformanceSummaryListWithRequiredPerformanceSummaryNames(validEffectiveDate, PORT_ID_1);
		List<PerformanceSummary> performanceSummaries = converter.convert(daos, validEffectiveDate, PORT_ID_1, calledByUserId);
		
		for(PerformanceSummary summary : performanceSummaries){
			assertEquals(validEffectiveDate, summary.getEffectiveDate());
			assertEquals(summary.getPortId(), PORT_ID_1);
			if(summary.getPerformanceTypeName().equals(PerformanceSummaryName.DIFF.getName())) {
				assertThat(summary.getPerformanceTypeName(), equalTo(PerformanceSummaryName.DIFF.getName()));
				assertThat(summary.getPerformanceTypeCode(), equalTo(PerformanceSummaryCode.valueOf("DIFF_CODE").getCode()));
				assertThat(summary.getOneMonthValue(), equalTo(BigDecimal.valueOf(-1.30).setScale(2, RoundingMode.HALF_UP)));
				assertThat(summary.getThreeMonthValue(), equalTo(BigDecimal.valueOf(-3.60).setScale(2, RoundingMode.HALF_UP)));
				assertThat(summary.getSixMonthValue(), equalTo(BigDecimal.valueOf(0.30).setScale(2, RoundingMode.HALF_UP)));
				assertThat(summary.getNineMonthValue(), equalTo(null));
				assertThat(summary.getOneYearValue(), equalTo(BigDecimal.valueOf(-5.15).setScale(2, RoundingMode.HALF_UP)));
				assertThat(summary.getThreeYearValue(), equalTo(BigDecimal.valueOf(2.09).setScale(2, RoundingMode.HALF_UP)));
				assertThat(summary.getFiveYearValue(), equalTo(BigDecimal.valueOf(1.68).setScale(2, RoundingMode.HALF_UP)));
				assertThat(summary.getTenYearValue(), equalTo(null));
				assertThat(summary.getInceptionValue(), equalTo(BigDecimal.valueOf(-2.05).setScale(2, RoundingMode.HALF_UP)));
				assertThat(summary.getYearToDateValue(), equalTo(BigDecimal.valueOf(-0.91).setScale(2, RoundingMode.HALF_UP)));
			} else if (summary.getPerformanceTypeName().equals(PerformanceSummaryName.PORTFOLIO_GROSS.getName())) {
				assertThat(summary.getPerformanceTypeName(), equalTo(PerformanceSummaryName.PORTFOLIO_GROSS.getName()));
				assertThat(summary.getPerformanceTypeCode(), equalTo(PerformanceSummaryCode.PFT_CODE.getCode()));
				assertThat(summary.getOneMonthValue(), equalTo(BigDecimal.valueOf(2.15).setScale(2, RoundingMode.HALF_UP)));
				assertThat(summary.getThreeMonthValue(), equalTo(BigDecimal.valueOf(2.15).setScale(2, RoundingMode.HALF_UP)));
				assertThat(summary.getSixMonthValue(), equalTo(BigDecimal.valueOf(2.17).setScale(2, RoundingMode.HALF_UP)));
				assertThat(summary.getNineMonthValue(), equalTo(null));
				assertThat(summary.getOneYearValue(), equalTo(BigDecimal.valueOf(2.10).setScale(2, RoundingMode.HALF_UP)));
				assertThat(summary.getThreeYearValue(), equalTo(BigDecimal.valueOf(4.20).setScale(2, RoundingMode.HALF_UP)));
				assertThat(summary.getFiveYearValue(), equalTo(BigDecimal.valueOf(3.79).setScale(2, RoundingMode.HALF_UP)));
				assertThat(summary.getTenYearValue(), equalTo(null));
				assertThat(summary.getInceptionValue(), equalTo(BigDecimal.valueOf(6.11).setScale(2, RoundingMode.HALF_UP)));
				assertThat(summary.getYearToDateValue(), equalTo(BigDecimal.valueOf(1.99).setScale(2, RoundingMode.HALF_UP)));
			} else if (summary.getPerformanceTypeName().equals(PerformanceSummaryName.BMK_NET.getName())) {
				assertThat(summary.getPerformanceTypeName(), equalTo(PerformanceSummaryName.BMK_NET.getName()));
				assertThat(summary.getPerformanceTypeCode(), equalTo(PerformanceSummaryCode.BMK_CODE.getCode()));
				assertThat(summary.getOneMonthValue(), equalTo(BigDecimal.valueOf(3.45).setScale(2, RoundingMode.HALF_UP)));
				assertThat(summary.getThreeMonthValue(), equalTo(BigDecimal.valueOf(5.75).setScale(2, RoundingMode.HALF_UP)));
				assertThat(summary.getSixMonthValue(), equalTo(BigDecimal.valueOf(1.87).setScale(2, RoundingMode.HALF_UP)));
				assertThat(summary.getNineMonthValue(), equalTo(null));
				assertThat(summary.getOneYearValue(), equalTo(BigDecimal.valueOf(7.25).setScale(2, RoundingMode.HALF_UP)));
				assertThat(summary.getThreeYearValue(), equalTo(BigDecimal.valueOf(2.11).setScale(2, RoundingMode.HALF_UP)));
				assertThat(summary.getFiveYearValue(), equalTo(BigDecimal.valueOf(2.11).setScale(2, RoundingMode.HALF_UP)));
				assertThat(summary.getTenYearValue(), equalTo(null));
				assertThat(summary.getInceptionValue(), equalTo(BigDecimal.valueOf(8.16).setScale(2, RoundingMode.HALF_UP)));
				assertThat(summary.getYearToDateValue(), equalTo(BigDecimal.valueOf(2.90).setScale(2, RoundingMode.HALF_UP)));
			}
			assertEquals(summary.getEffectiveBeginDate(), null);
			assertEquals(summary.getEffectiveEndDate(), null);
			assertEquals(calledByUserId, summary.getLastUpdatedUserId());
			assertEquals(summary.getLastUpdatedDate(), null);
			assertEquals(summary.getPerformanceSummaryId(), null);
		}
	}
	

	@Test
	public void serviceShouldConvertFakePerformanceSummaryToPerformanceSummaryForMultiplePortIds() {
		PerformanceSummaryDataConverter converter = new PerformanceSummaryDataConverter();
		Date validEffectiveDate = new Date();
		String calledByUserId = "UXYZ";
		List<PerformanceCalculationDAO> fakePerformanceSummaries = buildPerformanceSummaryListWithRequiredPerformanceSummaryNames(validEffectiveDate,
				PORT_ID_1);
		fakePerformanceSummaries.addAll(buildPerformanceSummaryListWithRequiredPerformanceSummaryNames(validEffectiveDate, PORT_ID_2));
		List<PerformanceSummary> performanceSummaries = converter.convert(fakePerformanceSummaries, validEffectiveDate, null, calledByUserId);
		assertEquals(6, performanceSummaries.size());
		PerformanceSummary portfolioWithPORT_ID_1 = null;
		PerformanceSummary portfolioWithPORT_ID_2 = null;
		PerformanceSummary bmkNetWithPORT_ID_1 = null;
		PerformanceSummary bmkNetWithPORT_ID_2 = null;
		PerformanceSummary diffWithPORT_ID_1 = null;
		PerformanceSummary diffWithPORT_ID_2 = null;
		for (PerformanceSummary summary : performanceSummaries) {
			if(summary.getPerformanceTypeName().equals(PerformanceSummaryName.PORTFOLIO_GROSS.getName()) && summary.getPortId() .equals(PORT_ID_1)){
				portfolioWithPORT_ID_1 = summary;
			} else if(summary.getPerformanceTypeName().equals(PerformanceSummaryName.PORTFOLIO_GROSS.getName()) && summary.getPortId() .equals(PORT_ID_2)){
				portfolioWithPORT_ID_2 = summary;
			} else if(summary.getPerformanceTypeName().equals(PerformanceSummaryName.BMK_NET.getName()) && summary.getPortId() .equals(PORT_ID_1)){
				bmkNetWithPORT_ID_1 = summary;
			} else if(summary.getPerformanceTypeName().equals(PerformanceSummaryName.BMK_NET.getName()) && summary.getPortId() .equals(PORT_ID_2)){
				bmkNetWithPORT_ID_2 = summary;
			} else if(summary.getPerformanceTypeName().equals(PerformanceSummaryName.DIFF.getName()) && summary.getPortId() .equals(PORT_ID_1)){
				diffWithPORT_ID_1 = summary;
			} else if(summary.getPerformanceTypeName().equals(PerformanceSummaryName.DIFF.getName()) && summary.getPortId() .equals(PORT_ID_2)){
				diffWithPORT_ID_2 = summary;
			}
		}
		
		assertNotNull(portfolioWithPORT_ID_1);
		assertNotNull(portfolioWithPORT_ID_2);
		assertNotNull(bmkNetWithPORT_ID_1);
		assertNotNull(bmkNetWithPORT_ID_2);
		assertNotNull(diffWithPORT_ID_1);
		assertNotNull(diffWithPORT_ID_2);
	}
	
	private List<PerformanceCalculationDAO> buildPerformanceSummaryListWithRequiredPerformanceSummaryNames(final Date effectiveDate, final String portId) {
		List<PerformanceCalculationDAO> performanceSummaryDAOs = new ArrayList<>();

		performanceSummaryDAOs.addAll(buildPerformanceSummaryWithBmkAndPrt(effectiveDate, portId, PerformanceSummaryName.BMK_NET.getName(), PerformanceSummaryName.PORTFOLIO_GROSS.getName()));
		return performanceSummaryDAOs;
	}
	
	private List<PerformanceCalculationDAO> buildPerformanceSummaryWithBmkAndPrt(final Date effectiveDate, final String portId
			, final String bmkType, String prtType) {
		List<PerformanceCalculationDAO> returnData = new ArrayList<>(10);
		for(int i=0; i<10; i++){
			PerformanceCalculationDAO c = new PerformanceCalculationDAO();
			c.setCalcDt(effectiveDate);
			c.setPrtCd(portId);
			c.setBmkType(bmkType);
			c.setPrtType(prtType);
			returnData.add(addValuesToPerformanceCalculationDAO(c, i));
		}
		return returnData;
	}
	
	private List<PerformanceCalculationDAO> buildPerformanceSummaryListWithoutPortfolioGross(final Date effectiveDate, final String portId) {
		List<PerformanceCalculationDAO> daos = new ArrayList<>();
		daos.addAll(buildPerformanceSummary(effectiveDate, PORT_ID_1, PerformanceSummaryName.BMK_NET.getName(), "Portfolio (Net)"));
		daos.addAll(buildPerformanceSummary(effectiveDate, PORT_ID_1, PerformanceSummaryName.BMK_NET.getName(), "Portfolio (Net)"));
		daos.addAll(buildPerformanceSummary(effectiveDate, PORT_ID_1, "Bmk (Div Return)", "Portfolio (Net)"));
		return daos;
	}
	
	private List<PerformanceCalculationDAO> buildPerformanceSummaryListWithoutBmkNet(final Date effectiveDate, final String portId) {
		List<PerformanceCalculationDAO> daos = new ArrayList<>();
		daos.addAll(buildPerformanceSummary(effectiveDate, PORT_ID_1, "Bmk (Price Return)", PerformanceSummaryName.PORTFOLIO_GROSS.getName()));
		daos.addAll(buildPerformanceSummary(effectiveDate, PORT_ID_1, "Bmk (Price Return)", PerformanceSummaryName.PORTFOLIO_GROSS.getName()));
		daos.addAll(buildPerformanceSummary(effectiveDate, PORT_ID_1, "Bmk (Div Return)", PerformanceSummaryName.PORTFOLIO_GROSS.getName()));
		return daos;
	}
	
	private List<PerformanceCalculationDAO> buildPerformanceSummary(final Date effectiveDate, final String portId, final String bmkType, String prtType) {
		List<PerformanceCalculationDAO> returnData = new ArrayList<>(10);
		for(int i=0; i<10; i++){
			PerformanceCalculationDAO c = new PerformanceCalculationDAO();
			c.setCalcDt(effectiveDate);
			c.setPrtCd(portId);
			c.setBmkType(bmkType);
			c.setPrtType(prtType);
			returnData.add(addValuesToPerformanceCalculationDAO(c, i));
		}
		return returnData;
	}
	
	private PerformanceCalculationDAO addValuesToPerformanceCalculationDAO(PerformanceCalculationDAO dao, int i){
		if (i == 0) {
			dao.setPeriod(CalculationPeriodEnum.CYTD);
			dao.setPrtVal(BigDecimal.valueOf(2.2357));
			dao.setBmkVal(BigDecimal.valueOf(1.2357));
		} else if (i == 1) {
			dao.setPeriod(CalculationPeriodEnum.P1M);
			dao.setPrtVal(BigDecimal.valueOf(2.1527));
			dao.setBmkVal(BigDecimal.valueOf(3.4527));
		} else if (i == 2) {
			dao.setPeriod(CalculationPeriodEnum.P3M);
			dao.setPrtVal(BigDecimal.valueOf(2.1527));
			dao.setBmkVal(BigDecimal.valueOf(5.7527));
		} else if (i == 3) {
			dao.setPeriod(CalculationPeriodEnum.P6M);
			dao.setPrtVal(BigDecimal.valueOf(2.167));
			dao.setBmkVal(BigDecimal.valueOf(1.867));
		} else if (i == 4) {
			dao.setPeriod(CalculationPeriodEnum.P1Y);
			dao.setPrtVal(BigDecimal.valueOf(2.1017));
			dao.setBmkVal(BigDecimal.valueOf(7.2517));
		} else if (i == 5) {
			dao.setPeriod(CalculationPeriodEnum.P3YPA);
			dao.setPrtVal(BigDecimal.valueOf(4.1997));
			dao.setBmkVal(BigDecimal.valueOf(2.1097));
		} else if (i == 6) {
			dao.setPeriod(CalculationPeriodEnum.P5YPA);
			dao.setPrtVal(BigDecimal.valueOf(3.7917));
			dao.setBmkVal(BigDecimal.valueOf(2.1117));
		} else if (i == 7) {
			dao.setPeriod(CalculationPeriodEnum.PINCP);
			dao.setPrtVal(BigDecimal.valueOf(6.1070));
			dao.setBmkVal(BigDecimal.valueOf(8.1570));
		} else if (i == 8) {
			dao.setPeriod(CalculationPeriodEnum.PINCEPPA);
			dao.setPrtVal(BigDecimal.valueOf(19.057));
			dao.setBmkVal(BigDecimal.valueOf(9.657));
		} else if (i == 9) {
			dao.setPeriod(CalculationPeriodEnum.FYTD);
			dao.setPrtVal(BigDecimal.valueOf(1.9927));
			dao.setBmkVal(BigDecimal.valueOf(2.9027));
		}
		return dao;
	}

	@Test
	public void shouldCalculateDiffAfterRoundingOffPortfolioGrossAndBmkNet() {
		Date validEffectiveDate = new Date();
		String calledByUserId = "UXYZ";
		PerformanceSummaryDataConverter converter = new PerformanceSummaryDataConverter();
		List<PerformanceSummary> performanceSummaries = converter.convert(
				buildPerformanceSummaryListWithRequiredPerformanceSummaryNames(validEffectiveDate, PORT_ID_1), validEffectiveDate, PORT_ID_1, calledByUserId);
		for (PerformanceSummary summary : performanceSummaries) {
			assertEquals(validEffectiveDate, summary.getEffectiveDate());
			assertEquals(summary.getPortId(), PORT_ID_1);
			if(summary.getPerformanceTypeName().equals(PerformanceSummaryName.DIFF.getName())) {
				assertThat(summary.getPerformanceTypeName(), equalTo(PerformanceSummaryName.DIFF.getName()));
				assertThat(summary.getPerformanceTypeCode(), equalTo(PerformanceSummaryCode.DIFF_CODE.getCode()));
				assertThat(summary.getOneMonthValue(), equalTo(BigDecimal.valueOf(-1.30).setScale(2, RoundingMode.HALF_UP)));
				assertThat(summary.getThreeMonthValue(), equalTo(BigDecimal.valueOf(-3.60).setScale(2, RoundingMode.HALF_UP)));
				assertThat(summary.getSixMonthValue(), equalTo(BigDecimal.valueOf(0.30).setScale(2, RoundingMode.HALF_UP)));
				assertThat(summary.getNineMonthValue(), equalTo(null));
				assertThat(summary.getOneYearValue(), equalTo(BigDecimal.valueOf(-5.15).setScale(2, RoundingMode.HALF_UP)));
				assertThat(summary.getThreeYearValue(), equalTo(BigDecimal.valueOf(2.09).setScale(2, RoundingMode.HALF_UP)));
				assertThat(summary.getFiveYearValue(), equalTo(BigDecimal.valueOf(1.68).setScale(2, RoundingMode.HALF_UP)));
				assertThat(summary.getTenYearValue(), equalTo(null));
				assertThat(summary.getInceptionValue(), equalTo(BigDecimal.valueOf(-2.05).setScale(2, RoundingMode.HALF_UP)));
				assertThat(summary.getYearToDateValue(), equalTo(BigDecimal.valueOf(-0.91).setScale(2, RoundingMode.HALF_UP)));
			} 
		}
	}


	@SuppressWarnings("unchecked")
	@Test
	public void serviceShouldCreatePortfolioGrossRecordsWithNullValuesWhenNotAvailableInTarget() {
		PerformanceSummaryDataConverter converter = new PerformanceSummaryDataConverter();
		Date validEffectiveDate = new Date();
		String calledByUserId = "UXYZ";
		List<PerformanceCalculationDAO> daos = buildPerformanceSummaryListWithoutPortfolioGross(validEffectiveDate, PORT_ID_1);
		List<PerformanceSummary> performanceSummaries = converter.convert(daos, validEffectiveDate, PORT_ID_1, calledByUserId);
		
		for(PerformanceSummary summary : performanceSummaries){
			assertEquals(validEffectiveDate, summary.getEffectiveDate());
			assertEquals(summary.getPortId(), PORT_ID_1);
			assertThat(summary.getPerformanceTypeName(),
					anyOf(equalTo(PerformanceSummaryName.PORTFOLIO_GROSS.getName()), equalTo(PerformanceSummaryName.BMK_NET.getName()), equalTo(PerformanceSummaryName.DIFF.getName()),
							equalTo("Bmk (Div Return)"), equalTo("Portfolio (Net)"), equalTo("Bmk (Price Return)"),
							equalTo("Bmk (Gross)")));
			assertThat(summary.getPerformanceTypeCode(), anyOf(equalTo(PerformanceSummaryCode.PFT_CODE.getCode()), equalTo(PerformanceSummaryCode.BMK_CODE.getCode()), equalTo(PerformanceSummaryCode.DIFF_CODE.getCode())));
			if(summary.getPerformanceTypeName().equals(PerformanceSummaryName.DIFF.getName())) {
				assertThat(summary.getPerformanceTypeName(), equalTo(PerformanceSummaryName.DIFF.getName()));
				assertThat(summary.getPerformanceTypeCode(), equalTo(PerformanceSummaryCode.DIFF_CODE.getCode()));
				assertThat(summary.getOneMonthValue(), equalTo(null));
				assertThat(summary.getThreeMonthValue(), equalTo(null));
				assertThat(summary.getSixMonthValue(), equalTo(null));
				assertThat(summary.getNineMonthValue(), equalTo(null));
				assertThat(summary.getOneYearValue(), equalTo(null));
				assertThat(summary.getThreeYearValue(), equalTo(null));
				assertThat(summary.getFiveYearValue(), equalTo(null));
				assertThat(summary.getTenYearValue(), equalTo(null));
				assertThat(summary.getInceptionValue(), equalTo(null));
				assertThat(summary.getYearToDateValue(), equalTo(null));
			} else if (summary.getPerformanceTypeName().equals(PerformanceSummaryName.PORTFOLIO_GROSS.getName())) {
				assertThat(summary.getPerformanceTypeName(), equalTo(PerformanceSummaryName.PORTFOLIO_GROSS.getName()));
				assertThat(summary.getPerformanceTypeCode(), equalTo(PerformanceSummaryCode.PFT_CODE.getCode()));
				assertThat(summary.getOneMonthValue(), equalTo(null));
				assertThat(summary.getThreeMonthValue(), equalTo(null));
				assertThat(summary.getSixMonthValue(), equalTo(null));
				assertThat(summary.getNineMonthValue(), equalTo(null));
				assertThat(summary.getOneYearValue(), equalTo(null));
				assertThat(summary.getThreeYearValue(), equalTo(null));
				assertThat(summary.getFiveYearValue(), equalTo(null));
				assertThat(summary.getTenYearValue(), equalTo(null));
				assertThat(summary.getInceptionValue(), equalTo(null));
				assertThat(summary.getYearToDateValue(), equalTo(null));
			} else if (summary.getPerformanceTypeName().equals(PerformanceSummaryName.BMK_NET.getName())) {
				assertThat(summary.getPerformanceTypeName(), equalTo(PerformanceSummaryName.BMK_NET.getName()));
				assertThat(summary.getPerformanceTypeCode(), equalTo(PerformanceSummaryCode.BMK_CODE.getCode()));
				assertThat(summary.getOneMonthValue(), equalTo(BigDecimal.valueOf(3.45).setScale(2, RoundingMode.HALF_UP)));
				assertThat(summary.getThreeMonthValue(), equalTo(BigDecimal.valueOf(5.75).setScale(2, RoundingMode.HALF_UP)));
				assertThat(summary.getSixMonthValue(), equalTo(BigDecimal.valueOf(1.87).setScale(2, RoundingMode.HALF_UP)));
				assertThat(summary.getNineMonthValue(), equalTo(null));
				assertThat(summary.getOneYearValue(), equalTo(BigDecimal.valueOf(7.25).setScale(2, RoundingMode.HALF_UP)));
				assertThat(summary.getThreeYearValue(), equalTo(BigDecimal.valueOf(2.11).setScale(2, RoundingMode.HALF_UP)));
				assertThat(summary.getFiveYearValue(), equalTo(BigDecimal.valueOf(2.11).setScale(2, RoundingMode.HALF_UP)));
				assertThat(summary.getTenYearValue(), equalTo(null));
				assertThat(summary.getInceptionValue(), equalTo(BigDecimal.valueOf(8.16).setScale(2, RoundingMode.HALF_UP)));
				assertThat(summary.getYearToDateValue(), equalTo(BigDecimal.valueOf(2.90).setScale(2, RoundingMode.HALF_UP)));
			}
			assertEquals(null, summary.getEffectiveBeginDate());
			assertEquals(summary.getEffectiveEndDate(), null);
			assertEquals(calledByUserId, summary.getLastUpdatedUserId());
			assertEquals(summary.getLastUpdatedDate(), null);
		}
	}

	@SuppressWarnings("unchecked")
	@Test
	public void serviceShouldCreateBmkNetRecordsWithNullValuesWhenNotAvailableInTarget() {
		PerformanceSummaryDataConverter converter = new PerformanceSummaryDataConverter();
		Date validEffectiveDate = new Date();
		String calledByUserId = "UXYZ";
		List<PerformanceCalculationDAO> daos = buildPerformanceSummaryListWithoutBmkNet(validEffectiveDate, PORT_ID_1);
		List<PerformanceSummary> performanceSummaries = converter.convert(daos, validEffectiveDate, PORT_ID_1, calledByUserId);
		
		for(PerformanceSummary summary : performanceSummaries){
			assertEquals(summary.getEffectiveDate(), validEffectiveDate);
			assertEquals(summary.getPortId(), PORT_ID_1);
			assertThat(summary.getPerformanceTypeName(),
					anyOf(equalTo(PerformanceSummaryName.PORTFOLIO_GROSS.getName()),
							equalTo(PerformanceSummaryName.BMK_NET.getName()),
							equalTo(PerformanceSummaryName.DIFF.getName()),
							equalTo(PerformanceSummaryName.BMK_DIV_RETURN.getName()),
							equalTo(PerformanceSummaryName.PORTFOLIO_NET.getName()),
							equalTo(PerformanceSummaryName.BMK_PRICE_RETURN.getName()),
							equalTo(PerformanceSummaryName.BMK_GROSS.getName())));
			assertThat(summary.getPerformanceTypeCode(), anyOf(equalTo(PerformanceSummaryCode.PFT_CODE.getCode()), equalTo(PerformanceSummaryCode.BMK_CODE.getCode()), equalTo(PerformanceSummaryName.DIFF.getName())));
			if(summary.getPerformanceTypeName().equals(PerformanceSummaryName.DIFF.getName())) {
				assertThat(summary.getPerformanceTypeName(), equalTo(PerformanceSummaryName.DIFF.getName()));
				assertThat(summary.getPerformanceTypeCode(), equalTo(PerformanceSummaryCode.DIFF_CODE.getCode()));
				assertThat(summary.getOneMonthValue(), equalTo(null));
				assertThat(summary.getThreeMonthValue(), equalTo(null));
				assertThat(summary.getSixMonthValue(), equalTo(null));
				assertThat(summary.getNineMonthValue(), equalTo(null));
				assertThat(summary.getOneYearValue(), equalTo(null));
				assertThat(summary.getThreeYearValue(), equalTo(null));
				assertThat(summary.getFiveYearValue(), equalTo(null));
				assertThat(summary.getTenYearValue(), equalTo(null));
				assertThat(summary.getInceptionValue(), equalTo(null));
				assertThat(summary.getYearToDateValue(), equalTo(null));
			} else if (summary.getPerformanceTypeName() .equals(PerformanceSummaryName.BMK_NET.getName())) {
				assertThat(summary.getPerformanceTypeCode(), equalTo(PerformanceSummaryCode.BMK_CODE.getCode()));
				assertThat(summary.getOneMonthValue(), equalTo(null));
				assertThat(summary.getThreeMonthValue(), equalTo(null));
				assertThat(summary.getSixMonthValue(), equalTo(null));
				assertThat(summary.getNineMonthValue(), equalTo(null));
				assertThat(summary.getOneYearValue(), equalTo(null));
				assertThat(summary.getThreeYearValue(), equalTo(null));
				assertThat(summary.getFiveYearValue(), equalTo(null));
				assertThat(summary.getTenYearValue(), equalTo(null));
				assertThat(summary.getInceptionValue(), equalTo(null));
				assertThat(summary.getYearToDateValue(), equalTo(null));
			} else if (summary.getPerformanceTypeName().equals(PerformanceSummaryName.BMK_DIV_RETURN.getName())) {
				assertThat(summary.getPerformanceTypeName(), equalTo(PerformanceSummaryName.BMK_DIV_RETURN.getName()));
				assertThat(summary.getPerformanceTypeCode(), equalTo(PerformanceSummaryCode.BMK_CODE.getCode()));
				assertThat(summary.getOneMonthValue(), equalTo(BigDecimal.valueOf(3.45).setScale(2, RoundingMode.HALF_UP)));
				assertThat(summary.getThreeMonthValue(), equalTo(BigDecimal.valueOf(5.75).setScale(2, RoundingMode.HALF_UP)));
				assertThat(summary.getSixMonthValue(), equalTo(BigDecimal.valueOf(1.87).setScale(2, RoundingMode.HALF_UP)));
				assertThat(summary.getNineMonthValue(), equalTo(null));
				assertThat(summary.getOneYearValue(), equalTo(BigDecimal.valueOf(7.25).setScale(2, RoundingMode.HALF_UP)));
				assertThat(summary.getThreeYearValue(), equalTo(BigDecimal.valueOf(2.11).setScale(2, RoundingMode.HALF_UP)));
				assertThat(summary.getFiveYearValue(), equalTo(BigDecimal.valueOf(2.11).setScale(2, RoundingMode.HALF_UP)));
				assertThat(summary.getTenYearValue(), equalTo(null));
				assertThat(summary.getInceptionValue(), equalTo(BigDecimal.valueOf(8.16).setScale(2, RoundingMode.HALF_UP)));
				assertThat(summary.getYearToDateValue(), equalTo(BigDecimal.valueOf(2.90).setScale(2, RoundingMode.HALF_UP)));
			} else if (summary.getPerformanceTypeName().equals(PerformanceSummaryName.BMK_PRICE_RETURN.getName())) {
				assertThat(summary.getPerformanceTypeName(), equalTo(PerformanceSummaryName.BMK_PRICE_RETURN.getName()));
				assertThat(summary.getPerformanceTypeCode(), equalTo(PerformanceSummaryCode.BMK_CODE.getCode()));
				assertThat(summary.getOneMonthValue(), equalTo(BigDecimal.valueOf(3.45).setScale(2, RoundingMode.HALF_UP)));
				assertThat(summary.getThreeMonthValue(), equalTo(BigDecimal.valueOf(5.75).setScale(2, RoundingMode.HALF_UP)));
				assertThat(summary.getSixMonthValue(), equalTo(BigDecimal.valueOf(1.87).setScale(2, RoundingMode.HALF_UP)));
				assertThat(summary.getNineMonthValue(), equalTo(null));
				assertThat(summary.getOneYearValue(), equalTo(BigDecimal.valueOf(7.25).setScale(2, RoundingMode.HALF_UP)));
				assertThat(summary.getThreeYearValue(), equalTo(BigDecimal.valueOf(2.11).setScale(2, RoundingMode.HALF_UP)));
				assertThat(summary.getFiveYearValue(), equalTo(BigDecimal.valueOf(2.11).setScale(2, RoundingMode.HALF_UP)));
				assertThat(summary.getTenYearValue(), equalTo(null));
				assertThat(summary.getInceptionValue(), equalTo(BigDecimal.valueOf(8.16).setScale(2, RoundingMode.HALF_UP)));
				assertThat(summary.getYearToDateValue(), equalTo(BigDecimal.valueOf(2.90).setScale(2, RoundingMode.HALF_UP)));
			}
			assertEquals(summary.getEffectiveBeginDate(), null);
			assertEquals(summary.getEffectiveEndDate(), null);
			assertEquals(calledByUserId, summary.getLastUpdatedUserId());
			assertEquals(summary.getLastUpdatedDate(), null);
		}
	}

	@Test
	public void serviceShouldDropOptionalRecordsWithNullValues() {
		PerformanceSummaryDataConverter converter = new PerformanceSummaryDataConverter();
		Date validEffectiveDate = new Date();
		String calledByUserId = "UXYZ";
		List<PerformanceCalculationDAO> daos = buildPerformanceSummaryListWithOptionalDataWithNullValues(validEffectiveDate, PORT_ID_1);
		List<PerformanceSummary> performanceSummaries = converter.convert(daos, validEffectiveDate, PORT_ID_1, calledByUserId);
		
		for(PerformanceSummary summary : performanceSummaries){
			assertEquals(validEffectiveDate, summary.getEffectiveDate());
			assertEquals(summary.getPortId(), PORT_ID_1);
			assertThat(summary.getPerformanceTypeName(), not(anyOf(equalTo(PerformanceSummaryName.BMK_DIV_RETURN.getName()), 
					equalTo(PerformanceSummaryName.PORTFOLIO_NET.getName()), equalTo(PerformanceSummaryName.BMK_PRICE_RETURN.getName()), equalTo(PerformanceSummaryName.BMK_GROSS.getName()))));
		}
	}
	
	private List<PerformanceCalculationDAO> buildPerformanceSummaryListWithOptionalDataWithNullValues(final Date effectiveDate, final String portId) {
		List<PerformanceCalculationDAO> daos = new ArrayList<>();

		daos.addAll(buildPerformanceSummary(effectiveDate, portId,PerformanceSummaryName.PORTFOLIO_GROSS.getName(), PerformanceSummaryName.BMK_NET.getName()));
		daos.addAll(buildPerformanceSummaryWithNullValues(effectiveDate, portId,PerformanceSummaryName.PORTFOLIO_NET.getName(), PerformanceSummaryName.BMK_DIV_RETURN.getName()));
		return daos;
	}
	
	private List<PerformanceCalculationDAO> buildPerformanceSummaryWithNullValues(final Date effectiveDate, final String portId
			, final String bmkType, final String prtType) {
		List<PerformanceCalculationDAO> returnData = new ArrayList<>(7);
		for(int i=0; i<10; i++){
			PerformanceCalculationDAO c = new PerformanceCalculationDAO();
			c.setCalcDt(effectiveDate);
			c.setPrtCd(portId);
			c.setBmkType(bmkType);
			c.setPrtType(prtType);
			returnData.add(addNullToPerformanceCalculationDAO(c, i));
		}
		return returnData;
	}
	
	private PerformanceCalculationDAO addNullToPerformanceCalculationDAO(PerformanceCalculationDAO dao, int i){
		if (i == 0) {
			dao.setPeriod(CalculationPeriodEnum.CYTD);
			dao.setPrtVal(null);
			dao.setBmkVal(null);
		} else if (i == 1) {
			dao.setPeriod(CalculationPeriodEnum.P1M);
			dao.setPrtVal(null);
			dao.setBmkVal(null);
		} else if (i == 2) {
			dao.setPeriod(CalculationPeriodEnum.P3M);
			dao.setPrtVal(null);
			dao.setBmkVal(null);
		} else if (i == 3) {
			dao.setPeriod(CalculationPeriodEnum.P6M);
			dao.setPrtVal(null);
			dao.setBmkVal(null);
		} else if (i == 4) {
			dao.setPeriod(CalculationPeriodEnum.P1Y);
			dao.setPrtVal(null);
			dao.setBmkVal(null);
		} else if (i == 5) {
			dao.setPeriod(CalculationPeriodEnum.P3YPA);
			dao.setPrtVal(null);
			dao.setBmkVal(null);
		} else if (i == 6) {
			dao.setPeriod(CalculationPeriodEnum.P5YPA);
			dao.setPrtVal(null);
			dao.setBmkVal(null);
		} else if (i == 7) {
			dao.setPeriod(CalculationPeriodEnum.PINCP);
			dao.setPrtVal(null);
			dao.setBmkVal(null);
		} else if (i == 8) {
			dao.setPeriod(CalculationPeriodEnum.PINCEPPA);
			dao.setPrtVal(null);
			dao.setBmkVal(null);
		} else if (i == 9) {
			dao.setPeriod(CalculationPeriodEnum.FYTD);
			dao.setPrtVal(null);
			dao.setBmkVal(null);
		}
		return dao;
	}

	@Test
	public void shouldRoundToTwoDecimalPlaces() {
		Date effectiveDate = new Date();
		String calledByUserId = "UXYZ";
		List<PerformanceCalculationDAO> daos = new ArrayList<>();
		daos.addAll(buildPerformanceSummary(effectiveDate, PORT_ID_1,PerformanceSummaryName.BMK_NET.getName(),PerformanceSummaryName.PORTFOLIO_GROSS.getName()));
		PerformanceSummaryDataConverter converter = new PerformanceSummaryDataConverter();
		List<PerformanceSummary> performanceSummaries = converter.convert(daos, effectiveDate, PORT_ID_1, calledByUserId);
		for(PerformanceSummary summary : performanceSummaries){
			if (summary.getPerformanceTypeName().equals(PerformanceSummaryName.PORTFOLIO_GROSS.getName())) {
				assertThat(summary.getPerformanceTypeName(), equalTo(PerformanceSummaryName.PORTFOLIO_GROSS.getName()));
				assertThat(summary.getPerformanceTypeCode(), equalTo(PerformanceSummaryCode.PFT_CODE.getCode()));
				assertThat(summary.getOneMonthValue(), equalTo(BigDecimal.valueOf(2.15).setScale(2, RoundingMode.HALF_UP)));
				assertThat(summary.getThreeMonthValue(), equalTo(BigDecimal.valueOf(2.15).setScale(2, RoundingMode.HALF_UP)));
				assertThat(summary.getSixMonthValue(), equalTo(BigDecimal.valueOf(2.17).setScale(2, RoundingMode.HALF_UP)));
				assertThat(summary.getNineMonthValue(), equalTo(null));
				assertThat(summary.getOneYearValue(), equalTo(BigDecimal.valueOf(2.10).setScale(2, RoundingMode.HALF_UP)));
				assertThat(summary.getThreeYearValue(), equalTo(BigDecimal.valueOf(4.20).setScale(2, RoundingMode.HALF_UP)));
				assertThat(summary.getFiveYearValue(), equalTo(BigDecimal.valueOf(3.79).setScale(2, RoundingMode.HALF_UP)));
				assertThat(summary.getTenYearValue(), equalTo(null));
				assertThat(summary.getInceptionValue(), equalTo(BigDecimal.valueOf(6.11).setScale(2, RoundingMode.HALF_UP)));
				assertThat(summary.getYearToDateValue(), equalTo(BigDecimal.valueOf(1.99).setScale(2, RoundingMode.HALF_UP)));
			}
		}
	}

	@Test
	public void serviceShouldNotAddDataWithInvalidPerformanceSummaryName() {
		PerformanceSummaryDataConverter converter = new PerformanceSummaryDataConverter();
		Date validEffectiveDate = new Date();
		String calledByUserId = "UXYZ";
		List<PerformanceCalculationDAO> daos = new ArrayList<>();
		daos.addAll(buildPerformanceSummary(validEffectiveDate, "PORT_ID","Portfolio (GrossSSSSS)", PerformanceSummaryName.BMK_NET.getName()));
		
		List<PerformanceSummary> testResultData = converter.convert(daos, validEffectiveDate, "PORT_ID", calledByUserId);
		PerformanceSummary portfolioGrossSSSSS = null;
		for (PerformanceSummary summary : testResultData) {
			if (summary.getPerformanceTypeName().equals("Portfolio (GrossSSSSS)")) {
				portfolioGrossSSSSS = summary;
			}
		}
		assertNull(portfolioGrossSSSSS);
		assertEquals(3, testResultData.size());
	}

	@Test
	public void serviceShouldNotCreatePortfolioGrossAndBmkNetandDiffDataWhenNoDataIsAvailableAndPortIdIsNull() {
		PerformanceSummaryDataConverter converter = new PerformanceSummaryDataConverter();
		Date validEffectiveDate = new Date();
		String calledByUserId = "UXYZ";
		List<PerformanceCalculationDAO> daos = new ArrayList<>();
		List<PerformanceSummary> performanceSummaries = converter.convert(daos, validEffectiveDate, null, calledByUserId);
		assertEquals(true, performanceSummaries.isEmpty());
	}

	@Test
	public void serviceShouldCreatePortfoliogrossAndBmkNetandDiffDataWhenNoDataIsAvailableAndPortIdIsValid() {
		PerformanceSummaryDataConverter converter = new PerformanceSummaryDataConverter();
		Date validEffectiveDate = new Date();
		String calledByUserId = "UXYZ";
		List<PerformanceCalculationDAO> daos = new ArrayList<>();
		List<PerformanceSummary> performanceSummaries = converter.convert(daos, validEffectiveDate, PORT_ID_1, calledByUserId);
		assertEquals(false, performanceSummaries.isEmpty());
		PerformanceSummary portfolioGross = null;
		PerformanceSummary bmkNet = null;
		PerformanceSummary diff = null;
		for (PerformanceSummary summary : performanceSummaries) {
			if (summary.getPerformanceTypeName().equals(PerformanceSummaryName.PORTFOLIO_GROSS.getName())) {
				portfolioGross = summary;
			} else if (summary.getPerformanceTypeName().equals(PerformanceSummaryName.BMK_NET.getName())) {
				bmkNet = summary;
			} else if (summary.getPerformanceTypeName().equals(PerformanceSummaryName.DIFF.getName())) {
				diff = summary;
			}
		}
		assertEquals(true, null != portfolioGross);
		assertEquals(true, null != bmkNet);
		assertEquals(true, null != diff);
	}

	@SuppressWarnings("unchecked")
	@Test
	public void serviceShouldNotDropOptionalRecordsWithValues() {
		PerformanceSummaryDataConverter converter = new PerformanceSummaryDataConverter();
		Date validEffectiveDate = new Date();
		String calledByUserId = "UXYZ";
		List<PerformanceCalculationDAO> daos = buildPerformanceSummaryListWithOptionalDataWithValues(validEffectiveDate, PORT_ID_1);
		List<PerformanceSummary> performanceSummaries = converter.convert(daos, validEffectiveDate, PORT_ID_1, calledByUserId);
		
		for(PerformanceSummary summary : performanceSummaries){
			assertEquals(validEffectiveDate, summary.getEffectiveDate());
			assertEquals(summary.getPortId(), PORT_ID_1);
			assertThat(summary.getPerformanceTypeName(),
					anyOf(equalTo(PerformanceSummaryName.PORTFOLIO_GROSS.getName()), equalTo(PerformanceSummaryName.BMK_NET.getName()), equalTo(PerformanceSummaryName.DIFF.getName()),
							equalTo(PerformanceSummaryName.BMK_DIV_RETURN.getName()), equalTo(PerformanceSummaryName.PORTFOLIO_NET.getName()), equalTo(PerformanceSummaryName.BMK_PRICE_RETURN.getName()),
							equalTo(PerformanceSummaryName.BMK_GROSS.getName())));
			assertThat(summary.getPerformanceTypeCode(), anyOf(equalTo(PerformanceSummaryCode.PFT_CODE.getCode()), equalTo(PerformanceSummaryCode.BMK_CODE.getCode()), equalTo(PerformanceSummaryName.DIFF.getName())));
			if(summary.getPerformanceTypeName().equals(PerformanceSummaryName.DIFF.getName())) {
				assertThat(summary.getPerformanceTypeName(), equalTo(PerformanceSummaryName.DIFF.getName()));
				assertThat(summary.getPerformanceTypeCode(), equalTo(PerformanceSummaryName.DIFF.getName()));
				assertThat(summary.getOneMonthValue(), equalTo(null));
				assertThat(summary.getThreeMonthValue(), equalTo(null));
				assertThat(summary.getSixMonthValue(), equalTo(null));
				assertThat(summary.getNineMonthValue(), equalTo(null));
				assertThat(summary.getOneYearValue(), equalTo(null));
				assertThat(summary.getThreeYearValue(), equalTo(null));
				assertThat(summary.getFiveYearValue(), equalTo(null));
				assertThat(summary.getTenYearValue(), equalTo(null));
				assertThat(summary.getInceptionValue(), equalTo(null));
				assertThat(summary.getYearToDateValue(), equalTo(null));
			} else if (summary.getPerformanceTypeName().equals(PerformanceSummaryName.PORTFOLIO_GROSS.getName())) {
				assertThat(summary.getPerformanceTypeName(), equalTo(PerformanceSummaryName.PORTFOLIO_GROSS.getName()));
				assertThat(summary.getPerformanceTypeCode(), equalTo(PerformanceSummaryCode.PFT_CODE.getCode()));
				assertThat(summary.getOneMonthValue(), equalTo(null));
				assertThat(summary.getThreeMonthValue(), equalTo(null));
				assertThat(summary.getSixMonthValue(), equalTo(null));
				assertThat(summary.getNineMonthValue(), equalTo(null));
				assertThat(summary.getOneYearValue(), equalTo(null));
				assertThat(summary.getThreeYearValue(), equalTo(null));
				assertThat(summary.getFiveYearValue(), equalTo(null));
				assertThat(summary.getTenYearValue(), equalTo(null));
				assertThat(summary.getInceptionValue(), equalTo(null));
				assertThat(summary.getYearToDateValue(), equalTo(null));
			} else if (summary.getPerformanceTypeName() .equals(PerformanceSummaryName.BMK_NET.getName())) {
				assertThat(summary.getPerformanceTypeCode(), equalTo(PerformanceSummaryCode.BMK_CODE.getCode()));
				assertThat(summary.getOneMonthValue(), equalTo(null));
				assertThat(summary.getThreeMonthValue(), equalTo(null));
				assertThat(summary.getSixMonthValue(), equalTo(null));
				assertThat(summary.getNineMonthValue(), equalTo(null));
				assertThat(summary.getOneYearValue(), equalTo(null));
				assertThat(summary.getThreeYearValue(), equalTo(null));
				assertThat(summary.getFiveYearValue(), equalTo(null));
				assertThat(summary.getTenYearValue(), equalTo(null));
				assertThat(summary.getInceptionValue(), equalTo(null));
				assertThat(summary.getYearToDateValue(), equalTo(null));
			} else if (summary.getPerformanceTypeName().equals(PerformanceSummaryName.BMK_DIV_RETURN.getName())) {
				assertThat(summary.getPerformanceTypeName(), equalTo(PerformanceSummaryName.BMK_DIV_RETURN.getName()));
				assertThat(summary.getPerformanceTypeCode(), equalTo(PerformanceSummaryCode.BMK_CODE.getCode()));
				assertThat(summary.getOneMonthValue(), equalTo(BigDecimal.valueOf(2.15).setScale(2, RoundingMode.HALF_UP)));
				assertThat(summary.getThreeMonthValue(), equalTo(BigDecimal.valueOf(2.15).setScale(2, RoundingMode.HALF_UP)));
				assertThat(summary.getSixMonthValue(), equalTo(BigDecimal.valueOf(2.17).setScale(2, RoundingMode.HALF_UP)));
				assertThat(summary.getNineMonthValue(), equalTo(null));
				assertThat(summary.getOneYearValue(), equalTo(null));
				assertThat(summary.getThreeYearValue(), equalTo(null));
				assertThat(summary.getFiveYearValue(), equalTo(null));
				assertThat(summary.getTenYearValue(), equalTo(null));
				assertThat(summary.getInceptionValue(), equalTo(BigDecimal.valueOf(6.11).setScale(2, RoundingMode.HALF_UP)));
				assertThat(summary.getYearToDateValue(), equalTo(BigDecimal.valueOf(2.90).setScale(2, RoundingMode.HALF_UP)));
			} else if (summary.getPerformanceTypeName().equals(PerformanceSummaryName.BMK_PRICE_RETURN.getName())) {
				assertThat(summary.getPerformanceTypeName(), equalTo(PerformanceSummaryName.BMK_PRICE_RETURN.getName()));
				assertThat(summary.getPerformanceTypeCode(), equalTo(PerformanceSummaryCode.BMK_CODE.getCode()));
				assertThat(summary.getOneMonthValue(), equalTo(BigDecimal.valueOf(2.15).setScale(2, RoundingMode.HALF_UP)));
				assertThat(summary.getThreeMonthValue(), equalTo(BigDecimal.valueOf(2.15).setScale(2, RoundingMode.HALF_UP)));
				assertThat(summary.getSixMonthValue(), equalTo(BigDecimal.valueOf(2.17).setScale(2, RoundingMode.HALF_UP)));
				assertThat(summary.getNineMonthValue(), equalTo(null));
				assertThat(summary.getOneYearValue(), equalTo(null));
				assertThat(summary.getThreeYearValue(), equalTo(null));
				assertThat(summary.getFiveYearValue(), equalTo(null));
				assertThat(summary.getTenYearValue(), equalTo(null));
				assertThat(summary.getInceptionValue(), equalTo(BigDecimal.valueOf(6.11).setScale(2, RoundingMode.HALF_UP)));
				assertThat(summary.getYearToDateValue(), equalTo(BigDecimal.valueOf(2.90).setScale(2, RoundingMode.HALF_UP)));
			}
			assertEquals(summary.getEffectiveBeginDate(), null);
			assertEquals(summary.getEffectiveEndDate(), null);
			assertEquals(calledByUserId, summary.getLastUpdatedUserId());
			assertEquals(summary.getLastUpdatedDate(), null);
			assertEquals(summary.getPerformanceSummaryId(), null);
		}
	}
	
	private List<PerformanceCalculationDAO> buildPerformanceSummaryListWithOptionalDataWithValues(final Date effectiveDate, final String portId) {
		List<PerformanceCalculationDAO> daos = new ArrayList<>();
		daos.addAll(buildPerformanceSummaryWithFewValues(effectiveDate, portId,PerformanceSummaryName.BMK_DIV_RETURN.getName(),PerformanceSummaryName.PORTFOLIO_NET.getName()));
		daos.addAll(buildPerformanceSummaryWithFewValues(effectiveDate, portId,PerformanceSummaryName.BMK_PRICE_RETURN.getName(),PerformanceSummaryName.PORTFOLIO_NET.getName()));
		daos.addAll(buildPerformanceSummaryWithFewValues(effectiveDate, portId,PerformanceSummaryName.BMK_GROSS.getName(),PerformanceSummaryName.PORTFOLIO_NET.getName()));
		daos.addAll(buildPerformanceSummaryWithFewValues(effectiveDate, portId,PerformanceSummaryName.BMK_PRICE_RETURN.getName(),PerformanceSummaryName.PORTFOLIO_NET.getName()));
		return daos;
	}
	
	private List<PerformanceCalculationDAO> buildPerformanceSummaryWithFewValues(final Date effectiveDate, final String portId
			, final String bmkType, final String prtType) {
		List<PerformanceCalculationDAO> returnData = new ArrayList<>(7);
		for(int i=0; i<7; i++){
			PerformanceCalculationDAO c = new PerformanceCalculationDAO();
			c.setCalcDt(effectiveDate);
			c.setPrtCd(portId);
			c.setBmkType(bmkType);
			c.setPrtType(prtType);
			returnData.add(addFewValuesToPerformanceCalculationDAO(c, i));
		}
		return returnData;
	}
	
	private PerformanceCalculationDAO addFewValuesToPerformanceCalculationDAO(PerformanceCalculationDAO dao, int i){
		if (i == 0) {
			dao.setPeriod(CalculationPeriodEnum.CYTD);
			dao.setPrtVal(BigDecimal.valueOf(2.2357));
			dao.setBmkVal(BigDecimal.valueOf(2.2357));
		} else if (i == 1) {
			dao.setPeriod(CalculationPeriodEnum.P1M);
			dao.setPrtVal(BigDecimal.valueOf(2.1527));
			dao.setBmkVal(BigDecimal.valueOf(2.1527));
		} else if (i == 2) {
			dao.setPeriod(CalculationPeriodEnum.P3M);
			dao.setPrtVal(BigDecimal.valueOf(2.1527));
			dao.setBmkVal(BigDecimal.valueOf(2.1527));
		} else if (i == 3) {
			dao.setPeriod(CalculationPeriodEnum.P6M);
			dao.setPrtVal(BigDecimal.valueOf(2.167));
			dao.setBmkVal(BigDecimal.valueOf(2.167));
		} else if (i == 4) {
			dao.setPeriod(CalculationPeriodEnum.PINCP);
			dao.setPrtVal(BigDecimal.valueOf(6.1070));
			dao.setBmkVal(BigDecimal.valueOf(6.1070));
		} else if (i == 5) {
			dao.setPeriod(CalculationPeriodEnum.PINCEPPA);
			dao.setPrtVal(BigDecimal.valueOf(19.057));
			dao.setBmkVal(BigDecimal.valueOf(19.057));
		} else if (i == 6) {
			dao.setPeriod(CalculationPeriodEnum.FYTD);
			dao.setPrtVal(BigDecimal.valueOf(2.9027));
			dao.setBmkVal(BigDecimal.valueOf(2.9027));
		}
		return dao;
	}
	
	@Test
	public void serviceShouldCreateRequiredRecordsWithNullValuesWhenNoDataIsPresent() {
		PerformanceSummaryDataConverter converter = new PerformanceSummaryDataConverter();
		Date validEffectiveDate = new Date();
		String calledByUserId = "UXYZ";
		List<PerformanceCalculationDAO> daos = new ArrayList<>();
		List<PerformanceSummary> performanceSummaries = converter.convert(daos, validEffectiveDate, PORT_ID_1, calledByUserId);
		
		for(PerformanceSummary summary : performanceSummaries){
			assertEquals(validEffectiveDate, summary.getEffectiveDate());
			assertEquals(summary.getPortId(), PORT_ID_1);
			assertThat(summary.getPerformanceTypeName(),
					anyOf(equalTo(PerformanceSummaryName.PORTFOLIO_GROSS.getName()), equalTo(PerformanceSummaryName.BMK_NET.getName()), equalTo(PerformanceSummaryName.DIFF.getName())));
			assertThat(summary.getPerformanceTypeCode(), anyOf(equalTo(PerformanceSummaryCode.PFT_CODE.getCode()), equalTo(PerformanceSummaryCode.BMK_CODE.getCode()), equalTo(PerformanceSummaryCode.DIFF_CODE.getCode())));
			if(summary.getPerformanceTypeName().equals(PerformanceSummaryName.DIFF.getName())) {
				assertThat(summary.getPerformanceTypeName(), equalTo(PerformanceSummaryName.DIFF.getName()));
				assertThat(summary.getPerformanceTypeCode(), equalTo(PerformanceSummaryName.DIFF.getName()));
				assertThat(summary.getOneMonthValue(), equalTo(null));
				assertThat(summary.getThreeMonthValue(), equalTo(null));
				assertThat(summary.getSixMonthValue(), equalTo(null));
				assertThat(summary.getNineMonthValue(), equalTo(null));
				assertThat(summary.getOneYearValue(), equalTo(null));
				assertThat(summary.getThreeYearValue(), equalTo(null));
				assertThat(summary.getFiveYearValue(), equalTo(null));
				assertThat(summary.getTenYearValue(), equalTo(null));
				assertThat(summary.getInceptionValue(), equalTo(null));
				assertThat(summary.getYearToDateValue(), equalTo(null));
			} else if (summary.getPerformanceTypeName().equals(PerformanceSummaryName.PORTFOLIO_GROSS.getName())) {
				assertThat(summary.getPerformanceTypeName(), equalTo(PerformanceSummaryName.PORTFOLIO_GROSS.getName()));
				assertThat(summary.getPerformanceTypeCode(), equalTo(PerformanceSummaryCode.PFT_CODE.getCode()));
				assertThat(summary.getOneMonthValue(), equalTo(null));
				assertThat(summary.getThreeMonthValue(), equalTo(null));
				assertThat(summary.getSixMonthValue(), equalTo(null));
				assertThat(summary.getNineMonthValue(), equalTo(null));
				assertThat(summary.getOneYearValue(), equalTo(null));
				assertThat(summary.getThreeYearValue(), equalTo(null));
				assertThat(summary.getFiveYearValue(), equalTo(null));
				assertThat(summary.getTenYearValue(), equalTo(null));
				assertThat(summary.getInceptionValue(), equalTo(null));
				assertThat(summary.getYearToDateValue(), equalTo(null));
			} else if (summary.getPerformanceTypeName() .equals(PerformanceSummaryName.BMK_NET.getName())) {
				assertThat(summary.getPerformanceTypeCode(), equalTo(PerformanceSummaryCode.BMK_CODE.getCode()));
				assertThat(summary.getOneMonthValue(), equalTo(null));
				assertThat(summary.getThreeMonthValue(), equalTo(null));
				assertThat(summary.getSixMonthValue(), equalTo(null));
				assertThat(summary.getNineMonthValue(), equalTo(null));
				assertThat(summary.getOneYearValue(), equalTo(null));
				assertThat(summary.getThreeYearValue(), equalTo(null));
				assertThat(summary.getFiveYearValue(), equalTo(null));
				assertThat(summary.getTenYearValue(), equalTo(null));
				assertThat(summary.getInceptionValue(), equalTo(null));
				assertThat(summary.getYearToDateValue(), equalTo(null));
			}
			assertEquals(summary.getEffectiveBeginDate(), null);
			assertEquals(summary.getEffectiveEndDate(), null);
			assertEquals(calledByUserId, summary.getLastUpdatedUserId());
			assertEquals(summary.getLastUpdatedDate(), null);
			assertEquals(summary.getPerformanceSummaryId(), null);
		}
	}
	
}


com.vanguard.corp.ics.sdt.behaviors.datatransfer.risksummary(LimitValidatorTest.java
RiskSummaryTransfersTest.java)

com.vanguard.corp.ics.sdt.dao.api.constants(RestServiceConstantsTest.java)

com.vanguard.corp.ics.sdt.dao.api.domain.portal(CurrencyTest.java
InvestmentGroupTest.java
PortalProductTest.java)

com.vanguard.corp.ics.sdt.dao.impl.config(PortalConfigurationTest.java
ReportingDatabaseConfigurationTest.java
SecurityMasterAccessConfigTest.java)

com.vanguard.corp.ics.sdt.dao.impl.entity.report(AccountBenchmarkAssociationTest.java
AccountFundTest.java
AccountSetupTest.java
BrokerageAndTaxesTargetDAOTest.java
BrokerageAndTaxesTest.java
LimitTest.java
ValuationsReportTest.java)

com.vanguard.corp.ics.sdt.dao.impl.portal(ProductPortalHelperTest.java
ProductPortalServiceImplTest.java)

com.vanguard.corp.ics.sdt.dao.impl.repository(TestAccountBenchmarkAssociationRepository.java
TestAccountFundRepository.java
TestAccountSetupRepository.java
TestBrokerageAndTaxesRepository.java
TestBrokerageAndTaxesTargetRepository.java
TestCommentaryRepository.java
TestPortfolioLimitRepository.java
TestValuationReportRepository.java)

com.vanguard.corp.ics.sdt.service.api.constants

	AnalyticsTypeCodeTest.java

package com.vanguard.corp.ics.sdt.service.api.constants;

import static org.junit.Assert.*;

import org.junit.Test;

public class AnalyticsTypeCodeTest {

	@Test
	public void testEnumValues() {
		// Names
		assertEquals("Ex Ante- Tracking Error", AnalyticsTypeCode.EX_ANTE_RISK.getName());
		assertEquals("1 yr Ex-Post Tracking Error", AnalyticsTypeCode.ONE_YR_EX_POST.getName());
		assertEquals("3 yr Ex-Post Tracking Error", AnalyticsTypeCode.THREE_YR_EX_POST.getName());
		assertEquals("1 yr Standard Deviation", AnalyticsTypeCode.ONE_YR_STANDARD_DEV.getName());
		assertEquals("3 yr Standard Deviation", AnalyticsTypeCode.THREE_YR_STANDARD_DEV.getName());
		
		// Codes
		assertEquals("EATE", AnalyticsTypeCode.EX_ANTE_RISK.getCode());
		assertEquals("1YEP", AnalyticsTypeCode.ONE_YR_EX_POST.getCode());
		assertEquals("3YEP", AnalyticsTypeCode.THREE_YR_EX_POST.getCode());
		assertEquals("1YSD", AnalyticsTypeCode.ONE_YR_STANDARD_DEV.getCode());
		assertEquals("3YSD", AnalyticsTypeCode.THREE_YR_STANDARD_DEV.getCode());

		assertEquals(AnalyticsTypeCode.EX_ANTE_RISK, AnalyticsTypeCode.valueOf("EX_ANTE_RISK"));
	}
}

	AttributionSummaryOrderTypeTest.java


package com.vanguard.corp.ics.sdt.service.api.constants;

import static org.junit.Assert.*;

import org.junit.Test;

public class AttributionSummaryOrderTypeTest {

	@Test
	public void testAttributionSummaryOrderTypeTest() {
		assertEquals("Stock Selection Impact", AttributionSummaryOrderType.STOCK_SELECTION_IMPACT.getAttributionName());
		assertEquals("Futures Impact", AttributionSummaryOrderType.FUTURES_IMPACT.getAttributionName());
		assertEquals("Liquidity Management Impact", AttributionSummaryOrderType.LIQUIDITY_MANAGEMENT_IMPACT.getAttributionName());
		assertEquals("Security Price Execution", AttributionSummaryOrderType.SECURITY_PRICE_EXECUTION.getAttributionName());
		assertEquals("Trading Cost", AttributionSummaryOrderType.TRADING_COST.getAttributionName());
		assertEquals("Currency Price Execution", AttributionSummaryOrderType.CURRENCY_PRICE_EXECUTION.getAttributionName());
		assertEquals("Dividend Withholding Impact", AttributionSummaryOrderType.DIVIDEND_WITHOLDING_IMPACT.getAttributionName());
		assertEquals("Security Lending Income", AttributionSummaryOrderType.SECURITY_LENDING_INCOME.getAttributionName());
		assertEquals("Mgmt & Custody Fees", AttributionSummaryOrderType.MGMT_AND_CUSTODY_FEES.getAttributionName());
		assertEquals("Substitutes Impact", AttributionSummaryOrderType.SUBSTITUTES_IMPACT.getAttributionName());
		assertEquals("Restrictions Impact", AttributionSummaryOrderType.RESTRICTIONS_IMPACT.getAttributionName());
		assertEquals("Internal Liquidity", AttributionSummaryOrderType.INTERNAL_LIQUIDITY.getAttributionName());
		assertEquals("Residual", AttributionSummaryOrderType.RESIDUAL.getAttributionName());
		
		assertEquals(AttributionSummaryOrderType.valueOf("STOCK_SELECTION_IMPACT"), AttributionSummaryOrderType.STOCK_SELECTION_IMPACT);
		assertEquals(AttributionSummaryOrderType.valueOf("FUTURES_IMPACT"), AttributionSummaryOrderType.FUTURES_IMPACT);
		assertEquals(AttributionSummaryOrderType.valueOf("LIQUIDITY_MANAGEMENT_IMPACT"), AttributionSummaryOrderType.LIQUIDITY_MANAGEMENT_IMPACT);
		assertEquals(AttributionSummaryOrderType.valueOf("SECURITY_PRICE_EXECUTION"), AttributionSummaryOrderType.SECURITY_PRICE_EXECUTION);
		assertEquals(AttributionSummaryOrderType.valueOf("TRADING_COST"), AttributionSummaryOrderType.TRADING_COST);
		assertEquals(AttributionSummaryOrderType.valueOf("CURRENCY_PRICE_EXECUTION"), AttributionSummaryOrderType.CURRENCY_PRICE_EXECUTION);
		assertEquals(AttributionSummaryOrderType.valueOf("DIVIDEND_WITHOLDING_IMPACT"), AttributionSummaryOrderType.DIVIDEND_WITHOLDING_IMPACT);
		assertEquals(AttributionSummaryOrderType.valueOf("SECURITY_LENDING_INCOME"), AttributionSummaryOrderType.SECURITY_LENDING_INCOME);
		assertEquals(AttributionSummaryOrderType.valueOf("MGMT_AND_CUSTODY_FEES"), AttributionSummaryOrderType.MGMT_AND_CUSTODY_FEES);
		assertEquals(AttributionSummaryOrderType.valueOf("SUBSTITUTES_IMPACT"), AttributionSummaryOrderType.SUBSTITUTES_IMPACT);
		assertEquals(AttributionSummaryOrderType.valueOf("RESTRICTIONS_IMPACT"), AttributionSummaryOrderType.RESTRICTIONS_IMPACT);
		assertEquals(AttributionSummaryOrderType.valueOf("INTERNAL_LIQUIDITY"), AttributionSummaryOrderType.INTERNAL_LIQUIDITY);
		assertEquals(AttributionSummaryOrderType.valueOf("RESIDUAL"), AttributionSummaryOrderType.RESIDUAL);
	}

}


		PerformanceSummaryNameTest.java

package com.vanguard.corp.ics.sdt.service.api.constants;

import static org.junit.Assert.assertEquals;

import org.junit.Test;

public class PerformanceSummaryNameTest {

	@Test
	public void testEnumValues() {
		assertEquals("Bmk (Div Return)", PerformanceSummaryName.BMK_DIV_RETURN.getName());
		assertEquals("Bmk (Gross)", PerformanceSummaryName.BMK_GROSS.getName());
		assertEquals("Bmk (Net)", PerformanceSummaryName.BMK_NET.getName());
		assertEquals("Bmk (Price Return)", PerformanceSummaryName.BMK_PRICE_RETURN.getName());
		assertEquals("Diff", PerformanceSummaryName.DIFF.getName());
		assertEquals("Portfolio (Gross)", PerformanceSummaryName.PORTFOLIO_GROSS.getName());
		assertEquals("Portfolio (Net)", PerformanceSummaryName.PORTFOLIO_NET.getName());
		
		assertEquals(PerformanceSummaryName.valueOf("BMK_DIV_RETURN"), PerformanceSummaryName.BMK_DIV_RETURN);
		assertEquals(PerformanceSummaryName.valueOf("BMK_GROSS"),PerformanceSummaryName.BMK_GROSS);
		assertEquals(PerformanceSummaryName.valueOf("BMK_NET"),PerformanceSummaryName.BMK_NET);
		assertEquals(PerformanceSummaryName.valueOf("BMK_PRICE_RETURN"),PerformanceSummaryName.BMK_PRICE_RETURN);
		assertEquals(PerformanceSummaryName.valueOf("DIFF"),PerformanceSummaryName.DIFF);
		assertEquals(PerformanceSummaryName.valueOf("PORTFOLIO_GROSS"),PerformanceSummaryName.PORTFOLIO_GROSS);
		assertEquals(PerformanceSummaryName.valueOf("PORTFOLIO_NET"),PerformanceSummaryName.PORTFOLIO_NET);
	}

}


		SecurityTypeCodeTest.java

/*
 ****************************************************************************
 *
 * Copyright (c)2017 The Vanguard Group of Investment Companies (VGI)
 * All rights reserved.
 *
 * This source code is CONFIDENTIAL and PROPRIETARY to VGI. Unauthorized
 * distribution, adaptation, or use may be subject to civil and criminal
 * penalties.
 *
 ****************************************************************************
 Module Description:

 $HeadURL:$
 $LastChangedRevision:$
 $Author:$
 $LastChangedDate:$
*/
package com.vanguard.corp.ics.sdt.service.api.constants;

import static org.junit.Assert.*;

import org.junit.Test;

public class SecurityTypeCodeTest {

	@Test
	public void testEnumValues() {
		// Names
		assertEquals("Derivatives", SecurityTypeCode.DERIVATIVES.getName());
		assertEquals("Equity", SecurityTypeCode.EQUITY.getName());
		assertEquals("Futures", SecurityTypeCode.FUTURES.getName());
		assertEquals("Forward Forex", SecurityTypeCode.FORWARD_FOREX.getName());
		assertEquals("Liquidity", SecurityTypeCode.LIQUIDITY.getName());
		assertEquals("Securities", SecurityTypeCode.FIXED_INTEREST.getName());
		
		// Codes
		assertEquals("DERI", SecurityTypeCode.DERIVATIVES.getCode());
		assertEquals("EQUI", SecurityTypeCode.EQUITY.getCode());
		assertEquals("FUTU", SecurityTypeCode.FUTURES.getCode());
		assertEquals("FWFX", SecurityTypeCode.FORWARD_FOREX.getCode());
		assertEquals("LIQU", SecurityTypeCode.LIQUIDITY.getCode());
		assertEquals("SECU", SecurityTypeCode.FIXED_INTEREST.getCode());

		assertEquals(SecurityTypeCode.EQUITY, SecurityTypeCode.valueOf("EQUITY"));
	}
}


com.vanguard.corp.ics.sdt.service.api.util(DateParserTest.java
UtilitiesTest.java)

com.vanguard.corp.ics.sdt.service.impl(BrokerageAndTaxesServiceImplTest.java
ProductDataServiceImplTest.java
ValuationsServiceImplTest.java)

com.vanguard.corp.ics.sdt.service.impl.characteristics(CharacteristicsRepoWrapperTest.java)

com.vanguard.corp.ics.sdt.test.characteristics(CharacteristicsBuilder.java
DataTransferServiceApplicationTester.java
FactsetMonthlyCharacteristicsTargetDAOBuilder.java
PortfolioCharacteristicsType.java
TestCharacteristicsType.java)

com.vanguard.corp.ics.sdt.test.commentary(CommentaryServiceApplicationTester.java)

com.vanguard.corp.ics.sdt.webservice(ApplicationTest.java
NonProductionConditionTest.java
NTHeaderFilterTest.java)

com.vanguard.corp.ics.sdt.webservice.cucumber(RunAdHocCuke.java
RunEndToEndCukeTest.java
RunIgnoreCukeTest.java
RunIntegrationCukeTest.java
RunRegressionCukeTest.java
RunUnitCukeTest.java)

com.vanguard.corp.ics.sdt.webservice.cucumber.stepdefs(BrokerageAndTaxesStepDefs.java
CalculationEngineResourceSteps.java
InvestmentObjectiveStepDefs.java
PortfolioOverviewStepDefs.java
ReportHeaderStepDefs.java
ValuationsStepDefs.java)

com.vanguard.corp.ics.sdt.webservice.cucumber.stepdefs.e2e(
	AttributionSummaryStepDefs.java

package com.vanguard.corp.ics.sdt.webservice.cucumber.stepdefs.e2e;

import static org.junit.Assert.assertEquals;

import javax.ws.rs.client.Client;
import javax.ws.rs.client.ClientBuilder;
import javax.ws.rs.client.WebTarget;
import javax.ws.rs.client.Invocation.Builder;
import javax.ws.rs.core.Response;

import com.vanguard.corp.ics.sdt.service.api.constants.DataSetType;
import com.vanguard.corp.ics.sdt.webservice.Application;
import com.vanguard.corp.ics.sdt.webservice.resource.DataTransferParameters;
import com.vanguard.corp.ics.sdt.webservice.resource.DataTransferResource;
import com.vanguard.jaxrs.feature.SecureClientRequestFeature;

import cucumber.api.java.Before;
import cucumber.api.java.en.Given;
import cucumber.api.java.en.Then;
import cucumber.api.java.en.When;

/**
 * @author um2a
 *
 */
public class AttributionSummaryStepDefs {
	
	private static final String HOST = System.getProperty("route.urls", "http://localhost.vanguard.com:8080");
	

	private Client client = null;
	private Response response;

	@Before
	public void setup() {
		if (client == null) {
			client = ClientBuilder.newClient().register(SecureClientRequestFeature.class);
		}
		response = null;
	}
	
	
	@Given("^test attribution summary data are loaded into target tables$")
	public void testAttributionSummaryDataAreLoadedIntoTargetTables() throws Throwable {
		// no need for this (yet) as target table & repository are not complete
	}

	@When("^transfer of attribution summary data is requested$")
	public void transferOfAttributionSummaryDataIsRequested() throws Throwable {
		WebTarget webTarget = client.target(HOST).path(Application.BASE_PATH).path(DataTransferResource.PATH);
		webTarget = webTarget.queryParam(DataTransferParameters.PARM_AS_OF_DATE, "2017-07-31");
		webTarget = webTarget.queryParam(DataTransferParameters.PARM_PORT_ID, "TEST02");
		webTarget = webTarget.queryParam(DataTransferParameters.PARM_DATA_SET, DataSetType.ATTRIBUTION_SUMMARY.toString());
		Builder builder = webTarget.request();
		builder = builder.header(DataTransferParameters.PARM_UID, "UABC");
		response = builder.get();
		// response.bufferEntity();
	    
	}

	@Then("^the system indicates successful completion of the attribution Summary transfer$")
	public void theSystemIndicatesSuccessfulCompletionOfTheAttributionSummaryTransfer() throws Throwable {
		assertEquals(Response.Status.Family.SUCCESSFUL, response.getStatusInfo().getFamily());
	    
	}

	@Then("^the test attribution summary data are saved in reporting tables$")
	public void theTestAttributionSummaryDataAreSavedInReportingTables() throws Throwable {
		// TODO figure out how to check database without exposing an endpoint to prod
	   
	}

	@Then("^the test attribution summary data are cleaned up from the target tables$")
	public void theTestAttributionSummaryDataAreCleanedUpFromTheTargetTables() throws Throwable {
		// not necessary at this time
	}

	@Then("^the test attribution summary data are cleaned up from the reporting tables$")
	public void theTestAttributionSummaryDataAreCleanedUpFromTheReportingTables() throws Throwable {
		// TODO figure out how to clean up without exposing an endpoint to prod
	}

}


	BrokerageAndTaxesStepDefs.java
	CharacteristicsStepDefs.java
	CommentaryStepDefs.java

	PerformanceSummaryStepDefs.java

package com.vanguard.corp.ics.sdt.webservice.cucumber.stepdefs.e2e;

import static org.junit.Assert.assertEquals;

import javax.ws.rs.client.Client;
import javax.ws.rs.client.ClientBuilder;
import javax.ws.rs.client.WebTarget;
import javax.ws.rs.client.Invocation.Builder;
import javax.ws.rs.core.Response;

import com.vanguard.corp.ics.sdt.service.api.constants.DataSetType;
import com.vanguard.corp.ics.sdt.webservice.Application;
import com.vanguard.corp.ics.sdt.webservice.resource.DataTransferParameters;
import com.vanguard.corp.ics.sdt.webservice.resource.DataTransferResource;
import com.vanguard.jaxrs.feature.SecureClientRequestFeature;

import cucumber.api.java.Before;
import cucumber.api.java.en.Given;
import cucumber.api.java.en.Then;
import cucumber.api.java.en.When;

public class PerformanceSummaryStepDefs {
	private static final String HOST = System.getProperty("route.urls", "http://localhost.vanguard.com:8080");
	

	private Client client = null;
	private Response response;

	@Before
	public void setup() {
		if (client == null) {
			client = ClientBuilder.newClient().register(SecureClientRequestFeature.class);
		}
		response = null;
	}
	@Given("^test performance summary data are loaded into target tables$")
	public void testPerformanceSummaryDataAreLoadedIntoTargetTables() throws Throwable {
		// no need for this (yet) as target table & repository are not complete
	}

	@When("^transfer of performance summary data is requested$")
	public void transferOfPerformanceSummaryDataIsRequested() throws Throwable {
		WebTarget webTarget = client.target(HOST).path(Application.BASE_PATH).path(DataTransferResource.PATH);
		webTarget = webTarget.queryParam(DataTransferParameters.PARM_AS_OF_DATE, "2017-07-31");
		webTarget = webTarget.queryParam(DataTransferParameters.PARM_PORT_ID, "SUQN");
		webTarget = webTarget.queryParam(DataTransferParameters.PARM_DATA_SET, DataSetType.PERFORMANCE_SUMMARY.toString());
		Builder builder = webTarget.request();
		builder = builder.header(DataTransferParameters.PARM_UID, "UABC");
		response = builder.get();
	}

	@Then("^the system indicates successful completion of the performance summary transfer$")
	public void theSystemIndicatesSuccessfulCompletionOfThePerformanceSummaryTransfer() throws Throwable {
		assertEquals(Response.Status.Family.SUCCESSFUL, response.getStatusInfo().getFamily());
	}

	@Then("^the test performance summary data are saved in reporting tables$")
	public void theTestPerformanceSummaryDataAreSavedInReportingTables() throws Throwable {
		// TODO figure out how to check database without exposing an endpoint to prod
	}

	@Then("^the test performance summary data are cleaned up from the target tables$")
	public void theTestPerformanceSummaryDataAreCleanedUpFromTheTargetTables() throws Throwable {
		// not necessary at this time
	}

	@Then("^the test performance summary data are cleaned up from the reporting tables$")
	public void theTestPerformanceSummaryDataAreCleanedUpFromTheReportingTables() throws Throwable {
		// TODO figure out how to clean up without exposing an endpoint to prod
	}
}

SecurityStepDefs.java
ValuationsStepDefs.java



com.vanguard.corp.ics.sdt.webservice.cucumber.stepdefs.integration

	AttributionSummaryStepDefs.java

package com.vanguard.corp.ics.sdt.webservice.cucumber.stepdefs.integration;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;

import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Random;

import javax.inject.Inject;

import org.powermock.reflect.Whitebox;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;

import com.vanguard.corp.ics.dao.target.AttributionTargetDAO;
import com.vanguard.corp.ics.dao.target.DatasourceFileDAO;
import com.vanguard.corp.ics.repository.target.AttributionSummaryTargetRepository;
import com.vanguard.corp.ics.sdt.dao.impl.entity.report.AttributionSummary;
import com.vanguard.corp.ics.sdt.dao.impl.repository.AttributionSummaryRepository;
import com.vanguard.corp.ics.sdt.service.api.DataTransferService;
import com.vanguard.corp.ics.sdt.service.api.TransferService;
import com.vanguard.corp.ics.sdt.service.impl.DataTransferServiceImpl;
import com.vanguard.corp.ics.sdt.service.impl.attributionsummary.AttributionSummaryConverter;
import com.vanguard.corp.ics.sdt.service.impl.attributionsummary.AttributionSummaryTransferService;
import com.vanguard.corp.ics.sdt.webservice.cucumber.stepdefs.shared.AttributionSummaryIntegrationData;
import com.vanguard.corp.ics.sdt.webservice.resource.DataTransferParameters;
import com.vanguard.corp.ics.sdt.webservice.resource.DataTransferResource;

import cucumber.api.java.Before;
import cucumber.api.java.en.Given;
import cucumber.api.java.en.Then;
import cucumber.api.java.en.When;

public class AttributionSummaryStepDefs {
	private static final String DATE_FORMAT = "yyyy-MM-dd";
	private static final String AS_OF_DATE_1 = "2016-01-31";
	private static final String AS_OF_DATE_2 = "2016-02-29";
	private static final String PORT_ID_1 = "TEST01";
	private static final String PORT_ID_2 = "TEST02";
	private static final String CALLED_BY_USER_ID = "UXYZ";

	@Inject
	private AttributionSummaryIntegrationData attributionSummaryIntegrationData;
	private List<AttributionTargetDAO> retrievableTargetAttributionSummaries;
	private String targetPortId;
	private CheckableAttributionSummaryServiceWrapper checkableWrapper;

	@Before
	public void setup() {
		attributionSummaryIntegrationData.setAvailableTargetAttributionSummaries(new ArrayList<>());
		attributionSummaryIntegrationData.setSavedAttributionSummaries(null);
		attributionSummaryIntegrationData.setEffectiveDate(null);
		retrievableTargetAttributionSummaries = new ArrayList<>();
		targetPortId = null;
		checkableWrapper = null;
	}

	@Given("^target tables contain attribution summary data for multiple port ids and multiple effective dates$")
	public void testAttributionSummaryDataAreLoadedIntoTargetTables() throws Throwable {
		DateFormat formatter = new SimpleDateFormat(DATE_FORMAT);
		Date validAsOfDate = new Date();
		DatasourceFileDAO datasourceFileDAO = new DatasourceFileDAO();
		datasourceFileDAO.setId(660L);
		AttributionTargetDAO attributionSummaryTargetDAO = new AttributionTargetDAO();
		attributionSummaryTargetDAO.setEffectiveDate(formatter.parse(AS_OF_DATE_1));
		attributionSummaryTargetDAO.setPortfolioCode(PORT_ID_1);
		attributionSummaryTargetDAO.setAttrtnName("Stock Selection Impact");
		attributionSummaryTargetDAO.setAttrtnTypeCd("3MON");
		attributionSummaryTargetDAO.setAttrtnTypeVal(BigDecimal.valueOf(1));
		attributionSummaryTargetDAO.setCreatedUser("FAKE");
		attributionSummaryTargetDAO.setDatasourceFileDAO(datasourceFileDAO);
		attributionSummaryTargetDAO.setCreatedDate(validAsOfDate);
		attributionSummaryTargetDAO.setUpdatedUser("ABCD");
		attributionSummaryTargetDAO.setUpdatedDate(validAsOfDate);
		attributionSummaryIntegrationData.getAvailableTargetAttributionSummaries().add(attributionSummaryTargetDAO);
		AttributionTargetDAO attributionSummaryTargetDAO1 = new AttributionTargetDAO();
		attributionSummaryTargetDAO1.setEffectiveDate(formatter.parse(AS_OF_DATE_2));
		attributionSummaryTargetDAO1.setPortfolioCode(PORT_ID_2);
		attributionSummaryTargetDAO1.setAttrtnName("Stock Selection Impact");
		attributionSummaryTargetDAO1.setDatasourceFileDAO(datasourceFileDAO);
		attributionSummaryTargetDAO1.setAttrtnTypeCd("3MON");
		attributionSummaryTargetDAO1.setAttrtnTypeVal(BigDecimal.valueOf(10));
		attributionSummaryTargetDAO1.setCreatedUser("FAKE1");
		attributionSummaryTargetDAO1.setCreatedDate(validAsOfDate);
		attributionSummaryTargetDAO.setUpdatedUser("ABCD");
		attributionSummaryTargetDAO.setUpdatedDate(validAsOfDate);
		attributionSummaryIntegrationData.getAvailableTargetAttributionSummaries().add(attributionSummaryTargetDAO1);
	}

	@Given("^target tables contain attribution summary data with name \"([^\"]*)\"$")
	public void targetTablesContainAttributionSummaryDataWithName(String name) throws Throwable {
		DateFormat formatter = new SimpleDateFormat(DATE_FORMAT);
		Date validAsOfDate = new Date();
		DatasourceFileDAO datasourceFileDAO = new DatasourceFileDAO();
		datasourceFileDAO.setId(660L);
		AttributionTargetDAO attributionSummaryTargetDAO = new AttributionTargetDAO();
		attributionSummaryTargetDAO.setEffectiveDate(formatter.parse(AS_OF_DATE_1));
		attributionSummaryTargetDAO.setPortfolioCode(PORT_ID_1);
		attributionSummaryTargetDAO.setAttrtnName(name);
		attributionSummaryTargetDAO.setAttrtnTypeCd("1MON");
		attributionSummaryTargetDAO.setDatasourceFileDAO(datasourceFileDAO);
		attributionSummaryTargetDAO.setAttrtnTypeVal(BigDecimal.valueOf(1));
		attributionSummaryTargetDAO.setCreatedUser("FAKE");
		attributionSummaryTargetDAO.setCreatedDate(validAsOfDate);
		attributionSummaryTargetDAO.setUpdatedUser("ABCD");
		attributionSummaryTargetDAO.setUpdatedDate(validAsOfDate);
		attributionSummaryIntegrationData.getAvailableTargetAttributionSummaries().add(attributionSummaryTargetDAO);
		AttributionTargetDAO attributionSummaryTargetDAO1 = new AttributionTargetDAO();
		attributionSummaryTargetDAO1.setEffectiveDate(formatter.parse(AS_OF_DATE_2));
		attributionSummaryTargetDAO1.setPortfolioCode(PORT_ID_2);
		attributionSummaryTargetDAO1.setAttrtnName(name);
		attributionSummaryTargetDAO1.setAttrtnTypeCd("3MON");
		attributionSummaryTargetDAO.setDatasourceFileDAO(datasourceFileDAO);
		attributionSummaryTargetDAO1.setAttrtnTypeVal(BigDecimal.valueOf(1));
		attributionSummaryTargetDAO1.setCreatedUser("FAKE");
		attributionSummaryTargetDAO1.setCreatedDate(validAsOfDate);
		attributionSummaryTargetDAO.setUpdatedUser("ABCD");
		attributionSummaryTargetDAO.setUpdatedDate(validAsOfDate);
		attributionSummaryIntegrationData.getAvailableTargetAttributionSummaries().add(attributionSummaryTargetDAO1);
	}

	@Given("^target tables contain no attribution summary data$")
	public void targetTablesContainNoAttributionSummaryData() throws Throwable {
		// no AttributionSummary added to availableTargetAttributionSummary
	}

	@Given("^one of the included effective dates is targeted$")
	public void oneOfTheIncludedAsOfDatesIsTargeted() throws Throwable {
		// attributionSummaryIntegrationData.setEffectiveDate((new
		// Random()).nextBoolean() ? AS_OF_DATE_1 : AS_OF_DATE_2);
		attributionSummaryIntegrationData.setEffectiveDate(AS_OF_DATE_1);
	}

	@Given("^one of the included attribution summary port ids is targeted$")
	public void oneOfTheIncludedPortIdsIsTargeted() throws Throwable {
		targetPortId = (new Random()).nextBoolean() ? PORT_ID_1 : PORT_ID_2;
	}

	@Given("^an effective date is targeted anyway$")
	public void anAsOfDatesIsTargetedAnyway() throws Throwable {
		attributionSummaryIntegrationData.setEffectiveDate((new Random()).nextBoolean() ? AS_OF_DATE_1 : AS_OF_DATE_2);
	}

	@When("^attribution summary data are transferred$")
	public void transferOfAttributionSummaryDataIsRequested() throws Throwable {
		SimpleDateFormat formatter = new SimpleDateFormat(DATE_FORMAT);
		Date targetDate = formatter.parse(attributionSummaryIntegrationData.getEffectiveDate());

		for (AttributionTargetDAO targetDao : attributionSummaryIntegrationData
				.getAvailableTargetAttributionSummaries()) {
			if (targetDao.getEffectiveDate().equals(targetDate)
					&& (targetPortId == null || targetDao.getPortfolioCode().equals(targetPortId))) {
				retrievableTargetAttributionSummaries.add(targetDao);
			}
		}

		final DataTransferParameters parms = new DataTransferParameters();
		parms.setAsOfDate(attributionSummaryIntegrationData.getEffectiveDate());
		parms.setPortId(targetPortId);
		parms.setUid(CALLED_BY_USER_ID);

		final DataTransferResource resource = buildDataTransferResource();
		resource.transfer(parms);

		assertNotNull("checkableWrapper is null", checkableWrapper);
		attributionSummaryIntegrationData.setSavedAttributionSummaries(checkableWrapper.getSavedAttributionSummaries());
	}

	@Then("^the attribution summary data for the targeted effective dates are saved to reporting tables$")
	public void thePortfolioAttributionSummaryDataForTheTargetedAsOfDateAreSavedToReportingTables() throws Throwable {
		assertNotNull("savedAttributionSummary is null",
				attributionSummaryIntegrationData.getAvailableTargetAttributionSummaries());

		int foundCount = 0;
		for (AttributionTargetDAO dao : retrievableTargetAttributionSummaries) {
			for (AttributionSummary attributionSummary : attributionSummaryIntegrationData
					.getSavedAttributionSummaries()) {
				if (dao.getEffectiveDate().equals(attributionSummary.getEffectiveDate())
						&& dao.getAttrtnName().equals(attributionSummary.getName())
						&& dao.getAttrtnTypeVal().equals(attributionSummary.getThreeMonthVal())
						&& dao.getPortfolioCode().equals(attributionSummary.getPortId())) {
					foundCount++;
					break;
				}
			}
		}

		assertEquals(1, foundCount);
	}

	@Then("^the attribution summary data for the targeted port id and effective dates are saved to reporting tables$")
	public void thePortfolioAttributionSummaryDataForTheTargetedAsOfDateAndPortIdAreSavedToReportingTables()
			throws Throwable {
		assertNotNull("savedAttributionSummary is null",
				attributionSummaryIntegrationData.getAvailableTargetAttributionSummaries());

		int foundCount = 0;
		for (AttributionTargetDAO dao : retrievableTargetAttributionSummaries) {
			for (AttributionSummary fake : attributionSummaryIntegrationData.getSavedAttributionSummaries()) {
				if (dao.getEffectiveDate().equals(fake.getEffectiveDate()) && dao.getAttrtnName().equals(fake.getName())
						&& dao.getAttrtnTypeVal().equals(fake.getThreeMonthVal())
						&& dao.getPortfolioCode().equals(fake.getPortId())) {
					foundCount++;
					break;
				}
			}
		}

		assertEquals(retrievableTargetAttributionSummaries.size(), foundCount);
	}

	@Then("^no attribution summary data for other effective dates are saved to reporting tables$")
	public void theTestAttributionSummaryDataForTheTargetedAsOfDateAreSavedInReportingTables() throws Throwable {
		// yeah, already did that above
	}

	@Then("^no attribution summary data for other port ids or effective dates are saved to reporting tables$")
	public void theTestAttributionSummaryDataForTheTargetedAsOfDateAndPortIdAreSavedInReportingTables()
			throws Throwable {
		// yeah, already did that above
	}

	@Then("^the saved attribution summary data exactly match the source data$")
	public void theTestAttributionSummaryDataAreCleanedUpFromTheTargetTables() throws Throwable {
		assertNotNull("savedAttributionSummary is null",
				attributionSummaryIntegrationData.getSavedAttributionSummaries());
		assertEquals(retrievableTargetAttributionSummaries.size(),
				attributionSummaryIntegrationData.getSavedAttributionSummaries().size());
	}

	@Then("^no attribution summary data are saved to reporting tables$")
	public void noPortfolioAttributionSummaryDataAreSavedToReportingTables() throws Throwable {
		assertNotNull("savedAttributionSummary is null",
				attributionSummaryIntegrationData.getSavedAttributionSummaries());
		assertEquals(retrievableTargetAttributionSummaries.size(),
				attributionSummaryIntegrationData.getSavedAttributionSummaries().size());
	}

	@Then("^attribution summary data with name \"([^\"]*)\" are saved to reporting tables$")
	public void portfolioAttributionSummaryDataWithNameAreSavedToReportingTables(String name) throws Throwable {
		boolean found = false;
		for (AttributionSummary attributionSummary : attributionSummaryIntegrationData.getSavedAttributionSummaries()) {
			if (attributionSummary.getName().equals(name)) {
				found = true;
				break;
			}
		}
		assertTrue(found);
	}

	private DataTransferResource buildDataTransferResource() {
		final DataTransferResource resource = new DataTransferResource();
		Whitebox.setInternalState(resource, DataTransferService.class, buildDataTransferService());
		return resource;
	}

	private DataTransferService buildDataTransferService() {
		final DataTransferService service = new DataTransferServiceImpl();
		List<TransferService> services = new ArrayList<>();
		services.add(buildAttributionSummaryTransferHandler());
		Whitebox.setInternalState(service, "services", services);
		return service;
	}

	private TransferService buildAttributionSummaryTransferHandler() {
		final TransferService handler = new AttributionSummaryTransferService();
		Whitebox.setInternalState(handler, AttributionSummaryTargetRepository.class,
				buildReadAttributionSummaryRepository());
		Whitebox.setInternalState(handler, "dataConverter", buildAttributionSummaryConverter());
		Whitebox.setInternalState(handler, AttributionSummaryRepository.class,
				buildAttributionSummaryTransferSummaryJpa());
		return handler;
	}

	private AttributionSummaryTargetRepository buildReadAttributionSummaryRepository() {
		final AttributionSummaryTargetRepository targetRepo = new AttributionSummaryTargetRepository() {

			private final List<AttributionTargetDAO> retrievable = retrievableTargetAttributionSummaries;

			@Override
			public List<AttributionTargetDAO> findAllByEffectiveDateAndPortfolioCode(Date effectiveDate,
					String portId) {
				return retrievable;
			}

			@Override
			public List<AttributionTargetDAO> findAllByEffectiveDate(Date effectiveDate) {
				return retrievable;
			}

			@Override
			public List<AttributionTargetDAO> findAll() {
				return null;
			}

			@Override
			public List<AttributionTargetDAO> findAll(Sort sort) {
				return null;
			}

			@Override
			public List<AttributionTargetDAO> findAll(Iterable<Long> ids) {
				return null;
			}

			@Override
			public <S extends AttributionTargetDAO> List<S> save(Iterable<S> entities) {
				return null;
			}

			@Override
			public void flush() {

			}

			@Override
			public <S extends AttributionTargetDAO> S saveAndFlush(S entity) {
				return null;
			}

			@Override
			public void deleteInBatch(Iterable<AttributionTargetDAO> entities) {
			}

			@Override
			public void deleteAllInBatch() {
			}

			@Override
			public AttributionTargetDAO getOne(Long id) {
				return null;
			}

			@Override
			public Page<AttributionTargetDAO> findAll(Pageable arg0) {
				return null;
			}

			@Override
			public long count() {
				return 0;
			}

			@Override
			public void delete(Long arg0) {
			}

			@Override
			public void delete(AttributionTargetDAO arg0) {
			}

			@Override
			public void delete(Iterable<? extends AttributionTargetDAO> arg0) {
			}

			@Override
			public void deleteAll() {
			}

			@Override
			public boolean exists(Long arg0) {
				return false;
			}

			@Override
			public AttributionTargetDAO findOne(Long arg0) {
				return null;
			}

			@Override
			public <S extends AttributionTargetDAO> S save(S arg0) {
				return null;
			}
		};
		return targetRepo;
	}

	private Object buildAttributionSummaryConverter() {
		return new AttributionSummaryConverter();
	}

	private static interface CheckableAttributionSummaryServiceWrapper extends AttributionSummaryRepository {

		List<AttributionSummary> getSavedAttributionSummaries();
	}

	private CheckableAttributionSummaryServiceWrapper buildAttributionSummaryTransferSummaryJpa() {
		final CheckableAttributionSummaryServiceWrapper repo = new CheckableAttributionSummaryServiceWrapper() {
			private final List<AttributionSummary> saved = new ArrayList<>();

			@Override
			public <S extends AttributionSummary> S save(S arg0) {
				return arg0;
			}

			@Override
			public AttributionSummary findOne(Long arg0) {
				return null;
			}

			@Override
			public boolean exists(Long arg0) {
				return false;
			}

			@Override
			public void deleteAll() {

			}

			@Override
			public void delete(Iterable<? extends AttributionSummary> arg0) {

			}

			@Override
			public void delete(AttributionSummary arg0) {

			}

			@Override
			public void delete(Long arg0) {

			}

			@Override
			public long count() {
				return 0;
			}

			@Override
			public Page<AttributionSummary> findAll(Pageable arg0) {
				return null;
			}

			@Override
			public <S extends AttributionSummary> S saveAndFlush(S entity) {
				return null;
			}

			@Override
			public <S extends AttributionSummary> List<S> save(Iterable<S> entities) {
				for (AttributionSummary summ : entities) {
					saved.add(summ);
				}
				return null;
			}

			@Override
			public AttributionSummary getOne(Long id) {
				return null;
			}

			@Override
			public void flush() {

			}

			@Override
			public List<AttributionSummary> findAll(Iterable<Long> ids) {
				return null;
			}

			@Override
			public List<AttributionSummary> findAll(Sort sort) {
				return null;
			}

			@Override
			public List<AttributionSummary> findAll() {
				return null;
			}

			@Override
			public void deleteInBatch(Iterable<AttributionSummary> entities) {

			}

			@Override
			public void deleteAllInBatch() {

			}

			@Override
			public List<AttributionSummary> findByEffectiveDateAndPortIdAndEffectiveEndDateIsNull(Date effectiveDate,
					String portId) {
				return saved;
			}

			@Override
			public List<AttributionSummary> getSavedAttributionSummaries() {
				return saved;
			}
		};
		checkableWrapper = repo;
		return repo;
	}
}


	CharacteristicsStepDefs.java
	PerformanceSummaryStepDefs.java

package com.vanguard.corp.ics.sdt.webservice.cucumber.stepdefs.integration;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;

import java.math.BigDecimal;
import java.math.RoundingMode;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Random;

import javax.inject.Inject;

import org.powermock.reflect.Whitebox;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;

import com.vanguard.corp.ics.dao.target.PerformanceCalculationDAO;
import com.vanguard.corp.ics.enums.CalculationPeriodEnum;
import com.vanguard.corp.ics.pojos.DateVersion;
import com.vanguard.corp.ics.repository.target.PerformanceCalculationRepository;
import com.vanguard.corp.ics.sdt.dao.impl.entity.report.PerformanceSummary;
import com.vanguard.corp.ics.sdt.dao.impl.repository.PerformanceSummarayRepository;
import com.vanguard.corp.ics.sdt.service.api.DataTransferService;
import com.vanguard.corp.ics.sdt.service.api.TransferService;
import com.vanguard.corp.ics.sdt.service.api.constants.PerformanceSummaryName;
import com.vanguard.corp.ics.sdt.service.impl.DataTransferServiceImpl;
import com.vanguard.corp.ics.sdt.service.impl.performancesummary.PerformanceSummaryDataConverter;
import com.vanguard.corp.ics.sdt.service.impl.performancesummary.PerformanceSummaryTransferService;
import com.vanguard.corp.ics.sdt.webservice.cucumber.stepdefs.shared.PerformanceSummaryIntegrationData;
import com.vanguard.corp.ics.sdt.webservice.resource.DataTransferParameters;
import com.vanguard.corp.ics.sdt.webservice.resource.DataTransferResource;

import cucumber.api.java.Before;
import cucumber.api.java.en.Given;
import cucumber.api.java.en.Then;
import cucumber.api.java.en.When;

public class PerformanceSummaryStepDefs {
	private static final String DATE_FORMAT = "yyyy-MM-dd";
	private static final String AS_OF_DATE_1 = "2016-01-31";
	private static final String AS_OF_DATE_2 = "2016-02-29";
	private static final String PORT_ID_1 = "TEST01";
	private static final String PORT_ID_2 = "TEST02";
	private static final String CALLED_BY_USER_ID = "UXYZ";

	@Inject
	private PerformanceSummaryIntegrationData performanceSummaryIntegrationData;
	private List<PerformanceCalculationDAO> retrievableTargetPerformanceSummaries;
	private String targetPortId;
	private CheckablePerformanceSummaryServiceWrapper checkableWrapper;

	@Before
	public void setup() {
		performanceSummaryIntegrationData.setAvailablePerformanceSummaries(new ArrayList<>());
		performanceSummaryIntegrationData.setSavedPerformanceSummaries(null);
		performanceSummaryIntegrationData.setEffectiveDate(null);
		retrievableTargetPerformanceSummaries = new ArrayList<>();
		targetPortId = null;
		checkableWrapper = null;
	}

	private List<PerformanceCalculationDAO> buildPerformanceSummary(final Date effectiveDate, final String portId, final String bmkType, String prtType) {
		List<PerformanceCalculationDAO> returnData = new ArrayList<>(7);
		for(int i=0; i<10; i++){
			PerformanceCalculationDAO c = new PerformanceCalculationDAO();
			c.setCalcDt(effectiveDate);
			c.setPrtCd(portId);
			c.setBmkType(bmkType);
			c.setPrtType(prtType);
			returnData.add(addValuesToPerformanceCalculationDAO(c, i));
		}
		return returnData;
	}
	
	private PerformanceCalculationDAO addValuesToPerformanceCalculationDAO(PerformanceCalculationDAO dao, int i){
		if (i == 0) {
			dao.setPeriod(CalculationPeriodEnum.CYTD);
			dao.setPrtVal(BigDecimal.valueOf(2.2357));
			dao.setBmkVal(BigDecimal.valueOf(1.2357));
		} else if (i == 1) {
			dao.setPeriod(CalculationPeriodEnum.P1M);
			dao.setPrtVal(BigDecimal.valueOf(2.1527));
			dao.setBmkVal(BigDecimal.valueOf(3.4527));
		} else if (i == 2) {
			dao.setPeriod(CalculationPeriodEnum.P3M);
			dao.setPrtVal(BigDecimal.valueOf(2.1527));
			dao.setBmkVal(BigDecimal.valueOf(5.7527));
		} else if (i == 3) {
			dao.setPeriod(CalculationPeriodEnum.P6M);
			dao.setPrtVal(BigDecimal.valueOf(2.167));
			dao.setBmkVal(BigDecimal.valueOf(1.867));
		} else if (i == 4) {
			dao.setPeriod(CalculationPeriodEnum.P1Y);
			dao.setPrtVal(BigDecimal.valueOf(2.1017));
			dao.setBmkVal(BigDecimal.valueOf(7.2517));
		} else if (i == 5) {
			dao.setPeriod(CalculationPeriodEnum.P3YPA);
			dao.setPrtVal(BigDecimal.valueOf(4.1997));
			dao.setBmkVal(BigDecimal.valueOf(2.1097));
		} else if (i == 6) {
			dao.setPeriod(CalculationPeriodEnum.P5YPA);
			dao.setPrtVal(BigDecimal.valueOf(3.7917));
			dao.setBmkVal(BigDecimal.valueOf(2.1117));
		} else if (i == 7) {
			dao.setPeriod(CalculationPeriodEnum.PINCP);
			dao.setPrtVal(BigDecimal.valueOf(6.1070));
			dao.setBmkVal(BigDecimal.valueOf(8.1570));
		} else if (i == 8) {
			dao.setPeriod(CalculationPeriodEnum.PINCEPPA);
			dao.setPrtVal(BigDecimal.valueOf(19.057));
			dao.setBmkVal(BigDecimal.valueOf(9.657));
		} else if (i == 9) {
			dao.setPeriod(CalculationPeriodEnum.FYTD);
			dao.setPrtVal(BigDecimal.valueOf(1.9927));
			dao.setBmkVal(BigDecimal.valueOf(2.9027));
		}
		return dao;
	}

	public List<PerformanceCalculationDAO> buildPerformanceSummaryList() throws ParseException {
		DateFormat formatter = new SimpleDateFormat(DATE_FORMAT);
		List<PerformanceCalculationDAO> performanceCalculationDAOs = new ArrayList<>();

		performanceCalculationDAOs.addAll(buildPerformanceSummary(formatter.parse(AS_OF_DATE_1), PORT_ID_1, "Portfolio (Gross)", "Bmk (Net)"));
		performanceCalculationDAOs.addAll(buildPerformanceSummary(formatter.parse(AS_OF_DATE_1), PORT_ID_1, "Portfolio (Gross)", "Bmk (Div Return)"));
		performanceCalculationDAOs.addAll(buildPerformanceSummary(formatter.parse(AS_OF_DATE_1), PORT_ID_1, "Portfolio (Net)", "Bmk (Div Return)"));

		performanceCalculationDAOs.addAll(buildPerformanceSummary(formatter.parse(AS_OF_DATE_2), PORT_ID_2, "Portfolio (Gross)", "Bmk (Net)"));
		performanceCalculationDAOs.addAll(buildPerformanceSummary(formatter.parse(AS_OF_DATE_2), PORT_ID_2, "Portfolio (Gross)", "Bmk (Div Return)"));
		performanceCalculationDAOs.addAll(buildPerformanceSummary(formatter.parse(AS_OF_DATE_2), PORT_ID_2, "Portfolio (Net)", "Bmk (Div Return)"));

		performanceCalculationDAOs.addAll(buildPerformanceSummary(formatter.parse(AS_OF_DATE_1), PORT_ID_2, "Portfolio (Gross)", "Bmk (Net)"));
		performanceCalculationDAOs.addAll(buildPerformanceSummary(formatter.parse(AS_OF_DATE_1), PORT_ID_2, "Portfolio (Gross)", "Bmk (Div Return)"));
		performanceCalculationDAOs.addAll(buildPerformanceSummary(formatter.parse(AS_OF_DATE_1), PORT_ID_2, "Portfolio (Net)", "Bmk (Div Return)"));

		performanceCalculationDAOs.addAll(buildPerformanceSummary(formatter.parse(AS_OF_DATE_2), PORT_ID_1, "Portfolio (Gross)", "Bmk (Net)"));
		performanceCalculationDAOs.addAll(buildPerformanceSummary(formatter.parse(AS_OF_DATE_2), PORT_ID_1, "Portfolio (Gross)", "Bmk (Div Return)"));
		performanceCalculationDAOs.addAll(buildPerformanceSummary(formatter.parse(AS_OF_DATE_2), PORT_ID_1, "Portfolio (Net)", "Bmk (Div Return)"));

		return performanceCalculationDAOs;
	}

	@Given("^target tables contain performance summary data for multiple port ids and multiple effective dates$")
	public void targetTablesContainPerformanceSummaryDataForMultiplePortIdsAndMultipleEffectiveDates()
			throws Throwable {
		performanceSummaryIntegrationData.setAvailablePerformanceSummaries(buildPerformanceSummaryList());
	}

	@Given("^one of the included performance summary effective date is targeted$")
	public void oneOfTheIncludedPerformanceSummaryEffectiveDateIsTargeted() throws Throwable {
		performanceSummaryIntegrationData.setEffectiveDate((new Random()).nextBoolean() ? AS_OF_DATE_1 : AS_OF_DATE_2);
	}

	@When("^performance summary data are transferred$")
	public void performanceSummaryDataAreTransferred() throws Throwable {
		SimpleDateFormat formatter = new SimpleDateFormat(DATE_FORMAT);
		Date targetDate = formatter.parse(performanceSummaryIntegrationData.getEffectiveDate());
		for (PerformanceCalculationDAO dao : performanceSummaryIntegrationData.getAvailablePerformanceSummaries()) {
			if (dao.getCalcDt().equals(targetDate) && (targetPortId == null || dao.getPrtCd().equals(targetPortId))) {
				retrievableTargetPerformanceSummaries.add(dao);
			}
		}

		final DataTransferParameters parms = new DataTransferParameters();
		parms.setAsOfDate(performanceSummaryIntegrationData.getEffectiveDate());
		parms.setPortId(targetPortId);
		parms.setUid(CALLED_BY_USER_ID);

		final DataTransferResource resource = buildDataTransferResource();
		resource.transfer(parms);

		assertNotNull("checkableWrapper is null", checkableWrapper);
		performanceSummaryIntegrationData.setSavedPerformanceSummaries(checkableWrapper.getSavedPerformanceSummaries());
	}

	@Then("^the performance summary data for the targeted effective dates are saved to reporting tables$")
	public void thePerformanceSummaryDataForTheTargetedEffectiveDatesAreSavedToReportingTables() throws Throwable {
		assertNotNull("savedAttributionSummary is null",
				performanceSummaryIntegrationData.getAvailablePerformanceSummaries());
		DateFormat formatter = new SimpleDateFormat(DATE_FORMAT);
		int foundCount = 0;
		for (PerformanceSummary performanceSummary : performanceSummaryIntegrationData.getSavedPerformanceSummaries()) {
			if (formatter.format(performanceSummary.getEffectiveDate())
					.equals(performanceSummaryIntegrationData.getEffectiveDate())) {
				foundCount++;
			}
		}

		assertEquals(performanceSummaryIntegrationData.getSavedPerformanceSummaries().size(), foundCount);
	}

	@Then("^no performance summary data for other effective dates are saved to reporting tables$")
	public void noPerformanceSummaryDataForOtherEffectiveDatesAreSavedToReportingTables() throws Throwable {
		// yeah, already did that above
	}

	@Then("^data rounded off to (\\d+) decimal places are saved to the reporting table$")
	public void dataRoundedOffToDecimalPlacesAreSavedToTheReportingTable(int scale) throws Throwable {
		for (PerformanceSummary data : performanceSummaryIntegrationData.getSavedPerformanceSummaries()) {
			assertEquals(scale, data.getOneMonthValue().scale());
			assertEquals(scale, data.getThreeMonthValue().scale());
			assertEquals(scale, data.getSixMonthValue().scale());
			assertEquals(scale, data.getOneYearValue().scale());
			assertEquals(scale, data.getThreeYearValue().scale());
			assertEquals(scale, data.getFiveYearValue().scale());
			assertEquals(scale, data.getYearToDateValue().scale());
			assertEquals(scale, data.getInceptionValue().scale());
		}
	}

	@Then("^performance summary data with type name \"([^\"]*)\" are saved to the reporting table$")
	public void performanceSummaryDataWithTypeNameAreSavedToTheReportingTable(String name) throws Throwable {
		boolean found = false;
		for (PerformanceSummary data : performanceSummaryIntegrationData.getSavedPerformanceSummaries()) {
			if (data.getPerformanceTypeName().equals(name)) {
				found = true;
			}
		}
		assertEquals(found, true);
	}

	@Given("^one of the included performance summary port ids is targeted$")
	public void oneOfTheIncludedPerformanceSummaryPortIdsIsTargeted() throws Throwable {
		targetPortId = (new Random()).nextBoolean() ? PORT_ID_1 : PORT_ID_2;
	}

	@Then("^the performance summary data for the targeted effective date and port id are saved to reporting tables$")
	public void thePerformanceSummaryDataForTheTargetedEffectiveDateAndPortIdAreSavedToReportingTables()
			throws Throwable {
		assertNotNull("savedAttributionSummary is null",
				performanceSummaryIntegrationData.getAvailablePerformanceSummaries());

		int foundCount = 0;
		for (PerformanceCalculationDAO dao : retrievableTargetPerformanceSummaries) {
			for (PerformanceSummary performanceSummary : performanceSummaryIntegrationData
					.getSavedPerformanceSummaries()) {
				if (dao.getCalcDt().equals(performanceSummary.getEffectiveDate()) && dao.getPrtCd().equals(performanceSummary.getPortId())) {
					foundCount++;
					break;
				}
			}
		}

		assertEquals(retrievableTargetPerformanceSummaries.size(), foundCount);
	}

	@Then("^no performance summary data for other effective dates or port ids are saved to reporting tables$")
	public void noPerformanceSummaryDataForOtherEffectiveDatesOrPortIdsAreSavedToReportingTables() throws Throwable {
		// yeah, already did that above
	}

	@Given("^target tables contain no performance summary data$")
	public void targetTablesContainNoPerformanceSummaryData() throws Throwable {
		performanceSummaryIntegrationData.setAvailablePerformanceSummaries(new ArrayList<>());
	}

	@Given("^a performance summary effective date is targeted anyway$")
	public void aPerformanceSummaryEffectiveDateIsTargetedAnyway() throws Throwable {
		performanceSummaryIntegrationData.setEffectiveDate((new Random()).nextBoolean() ? AS_OF_DATE_1 : AS_OF_DATE_2);
	}

	@Given("^a performance summary port id is targeted anyway$")
	public void aPerformanceSummaryPortIdIsTargetedAnyway() throws Throwable {
		targetPortId = (new Random()).nextBoolean() ? PORT_ID_1 : PORT_ID_2;
	}

	@Then("^data with type name \"([^\"]*)\" with NULL values are saved into report table$")
	public void dataWithTypeNameWithNULLValuesAreSavedIntoReportTable(String name) throws Throwable {
		boolean found = false;
		assertEquals(3, performanceSummaryIntegrationData.getSavedPerformanceSummaries().size());
		for (PerformanceSummary data : performanceSummaryIntegrationData.getSavedPerformanceSummaries()) {
			if (name.equals(data.getPerformanceTypeName())) {
				found = true;
				verifyValuesToBeNull(data);
			}
		}
		assertEquals(found, true);
	}

	@Given("^target tables contain performance summary data with type name \"([^\"]*)\"$")
	public void targetTablesContainPerformanceSummaryDataWithTypeName(String name) throws Throwable {
		DateFormat formatter = new SimpleDateFormat(DATE_FORMAT);
		List<PerformanceCalculationDAO> performanceCalculationDAOs = new ArrayList<>();
		performanceCalculationDAOs.addAll(buildPerformanceSummary(formatter.parse(AS_OF_DATE_1), PORT_ID_1, "Portfolio (Gross)", "Bmk (Net)"));
		performanceCalculationDAOs.addAll(buildPerformanceSummary(formatter.parse(AS_OF_DATE_1), PORT_ID_1, "Portfolio (GrossSSSS)", "Bmk (Net)"));
		performanceCalculationDAOs.addAll(buildPerformanceSummary(formatter.parse(AS_OF_DATE_2), PORT_ID_1, "Portfolio (Gross)", "Bmk (Net)"));
		performanceCalculationDAOs.addAll(buildPerformanceSummary(formatter.parse(AS_OF_DATE_2), PORT_ID_1, "Portfolio (GrossSSSS)", "Bmk (Net)"));
		performanceCalculationDAOs.addAll(buildPerformanceSummary(formatter.parse(AS_OF_DATE_1), PORT_ID_2, "Portfolio (Gross)", "Bmk (Net)"));
		performanceCalculationDAOs.addAll(buildPerformanceSummary(formatter.parse(AS_OF_DATE_1), PORT_ID_2, "Portfolio (GrossSSSS)", "Bmk (Net)"));
		performanceCalculationDAOs.addAll(buildPerformanceSummary(formatter.parse(AS_OF_DATE_2), PORT_ID_2, "Portfolio (Gross)", "Bmk (Net)"));
		performanceCalculationDAOs.addAll(buildPerformanceSummary(formatter.parse(AS_OF_DATE_2), PORT_ID_2, "Portfolio (GrossSSSS)", "Bmk (Net)"));
		performanceSummaryIntegrationData.setAvailablePerformanceSummaries(performanceCalculationDAOs);
	}

	@Then("^performance summary data with valid name \"([^\"]*)\" are saved to reporting tables$")
	public void performanceSummaryDataWithValidNameAreSavedToReportingTables(String name) throws Throwable {
		boolean foundValidName = false;
		assertEquals(3, performanceSummaryIntegrationData.getSavedPerformanceSummaries().size());
		for (PerformanceSummary data : performanceSummaryIntegrationData.getSavedPerformanceSummaries()) {
			if (name.equals(data.getPerformanceTypeName())) {
				foundValidName = true;
			}
		}
		assertEquals(foundValidName, true);
	}

	@Then("^performance summary data with invalid name \"([^\"]*)\" are not saved to reporting tables$")
	public void performanceSummaryDataWithInvalidNameAreNotSavedToReportingTables(String name) throws Throwable {
		boolean foundValidName = false;
		assertEquals(3, performanceSummaryIntegrationData.getSavedPerformanceSummaries().size());
		for (PerformanceSummary data : performanceSummaryIntegrationData.getSavedPerformanceSummaries()) {
			if (name.equals(data.getPerformanceTypeName())) {
				foundValidName = true;
			}
		}
		assertEquals(foundValidName, false);
	}

	@Given("^target tables does not contain the required type name \"([^\"]*)\"$")
	public void targetTablesDoesNotContainTheRequiredTypeName(String name) throws Throwable {
		DateFormat formatter = new SimpleDateFormat(DATE_FORMAT);
		List<PerformanceCalculationDAO> performanceCalculationDAOs = new ArrayList<>();
		performanceCalculationDAOs.addAll(buildPerformanceSummary(formatter.parse(AS_OF_DATE_2), PORT_ID_1, "Portfolio (Net)", "Bmk (Net)"));
		performanceCalculationDAOs.addAll(buildPerformanceSummary(formatter.parse(AS_OF_DATE_2), PORT_ID_2, "Portfolio (Net)", "Bmk (Net)"));
		performanceCalculationDAOs.addAll(buildPerformanceSummary(formatter.parse(AS_OF_DATE_1), PORT_ID_1, "Portfolio (Net)", "Bmk (Net)"));
		performanceCalculationDAOs.addAll(buildPerformanceSummary(formatter.parse(AS_OF_DATE_1), PORT_ID_2, "Portfolio (Net)", "Bmk (Net)"));
		performanceSummaryIntegrationData.setAvailablePerformanceSummaries(performanceCalculationDAOs);
	}

	@Then("^performance summary data with null values for the type name \"([^\"]*)\" is saved to the reporting table$")
	public void performanceSummaryDataWithNullValuesForTheTypeNameIsSavedToTheReportingTable(String name)
			throws Throwable {
		PerformanceSummary portfolio = null;
		for (PerformanceSummary data : performanceSummaryIntegrationData.getSavedPerformanceSummaries()) {
			if (name.equals(data.getPerformanceTypeName())) {
				portfolio = data;
				assertNotNull(portfolio);
				verifyValuesToBeNull(portfolio);
			}
		}
	}

	private void verifyValuesToBeNull(PerformanceSummary portfolio) {
		assertEquals(null, portfolio.getOneMonthValue());
		assertEquals(null, portfolio.getThreeMonthValue());
		assertEquals(null, portfolio.getSixMonthValue());
		assertEquals(null, portfolio.getNineMonthValue());
		assertEquals(null, portfolio.getOneYearValue());
		assertEquals(null, portfolio.getThreeYearValue());
		assertEquals(null, portfolio.getFiveYearValue());
		assertEquals(null, portfolio.getTenYearValue());
		assertEquals(null, portfolio.getInceptionValue());
		assertEquals(null, portfolio.getYearToDateValue());
	}

	@Then("^performance summary data with null values are saved for the type name \"([^\"]*)\"$")
	public void performanceSummaryDataWithNullValuesAreSavedForTheTypeName(String arg1) throws Throwable {
		PerformanceSummary diff = null;
		for (PerformanceSummary data : performanceSummaryIntegrationData.getSavedPerformanceSummaries()) {
			if ("Diff".equals(data.getPerformanceTypeName())) {
				diff = data;
				assertNotNull(diff);
				verifyValuesToBeNull(diff);
			}
		}
	}

	@Given("^target tables contains data for the required type name \"([^\"]*)\" with value \"([^\"]*)\"$")
	public void targetTablesContainsDataForTheRequiredTypeNameWithValue(String arg1, String arg2) throws Throwable {
		DateFormat formatter = new SimpleDateFormat(DATE_FORMAT);
		List<PerformanceCalculationDAO> performanceCalculationDAOs = new ArrayList<>();
		performanceCalculationDAOs.addAll(buildPerformanceSummaryWithSpecificTestValues(formatter.parse(AS_OF_DATE_2), PORT_ID_1, "Portfolio (Gross)"));
		performanceCalculationDAOs.addAll(buildPerformanceSummaryWithSpecificTestValues(formatter.parse(AS_OF_DATE_2), PORT_ID_1, "Bmk (Net)"));
		performanceCalculationDAOs.addAll(buildPerformanceSummaryWithSpecificTestValues(formatter.parse(AS_OF_DATE_1), PORT_ID_1, "Portfolio (Gross)"));
		performanceCalculationDAOs.addAll(buildPerformanceSummaryWithSpecificTestValues(formatter.parse(AS_OF_DATE_1), PORT_ID_1, "Bmk (Net)"));
		performanceSummaryIntegrationData.setAvailablePerformanceSummaries(performanceCalculationDAOs);
	}
	
	private List<PerformanceCalculationDAO> buildPerformanceSummaryWithSpecificTestValues(final Date effectiveDate, final String portId, final String name) {
		List<PerformanceCalculationDAO> returnData = new ArrayList<>(7);
		for(int i=0; i<10; i++){
			PerformanceCalculationDAO c = new PerformanceCalculationDAO();
			c.setCalcDt(effectiveDate);
			c.setPrtCd(portId);
			if(name.equals(PerformanceSummaryName.PORTFOLIO_GROSS.getName())){
				c.setPrtType(name);
			} else if(name.equals(PerformanceSummaryName.BMK_PRICE_RETURN.getName())){
				c.setBmkType(name);
			} else if(name.equals(PerformanceSummaryName.BMK_DIV_RETURN.getName())){
				c.setBmkType(name);
			} else if(name.equals(PerformanceSummaryName.PORTFOLIO_NET.getName())){
				c.setPrtType(name);
			} else if(name.equals(PerformanceSummaryName.BMK_GROSS.getName())){
				c.setBmkType(name);
			} else if(name.equals(PerformanceSummaryName.BMK_NET.getName())){
				c.setBmkType(name);
			} else if(name .equals("Portfolio (GrossSSSSS)")){
				c.setPrtType(name);
			}
			returnData.add(addValuesToPerformanceCalculationDAOWithSpecificTestValues(c, i));
		}
		return returnData;
	}
	
	private PerformanceCalculationDAO addValuesToPerformanceCalculationDAOWithSpecificTestValues(PerformanceCalculationDAO dao, int i){
		if (i == 0) {
			dao.setPeriod(CalculationPeriodEnum.CYTD);
			dao.setPrtVal(BigDecimal.valueOf(10.0149999));
			dao.setBmkVal(BigDecimal.valueOf(10.0149999));
		} else if (i == 1) {
			dao.setPeriod(CalculationPeriodEnum.P1M);
			dao.setPrtVal(BigDecimal.valueOf(10.0149999));
			dao.setBmkVal(BigDecimal.valueOf(10.0149999));
		} else if (i == 2) {
			dao.setPeriod(CalculationPeriodEnum.P3M);
			dao.setPrtVal(BigDecimal.valueOf(10.0149999));
			dao.setBmkVal(BigDecimal.valueOf(10.0149999));
		} else if (i == 3) {
			dao.setPeriod(CalculationPeriodEnum.P6M);
			dao.setPrtVal(BigDecimal.valueOf(10.0149999));
			dao.setBmkVal(BigDecimal.valueOf(10.0149999));
		} else if (i == 4) {
			dao.setPeriod(CalculationPeriodEnum.P1Y);
			dao.setPrtVal(BigDecimal.valueOf(10.0149999));
			dao.setBmkVal(BigDecimal.valueOf(10.0149999));
		} else if (i == 5) {
			dao.setPeriod(CalculationPeriodEnum.P3YPA);
			dao.setPrtVal(BigDecimal.valueOf(10.0149999));
			dao.setBmkVal(BigDecimal.valueOf(10.0149999));
		} else if (i == 6) {
			dao.setPeriod(CalculationPeriodEnum.P5YPA);
			dao.setPrtVal(BigDecimal.valueOf(10.0149999));
			dao.setBmkVal(BigDecimal.valueOf(10.0149999));
		} else if (i == 7) {
			dao.setPeriod(CalculationPeriodEnum.PINCP);
			dao.setPrtVal(BigDecimal.valueOf(10.0149999));
			dao.setBmkVal(BigDecimal.valueOf(10.0149999));
		} else if (i == 8) {
			dao.setPeriod(CalculationPeriodEnum.PINCEPPA);
			dao.setPrtVal(BigDecimal.valueOf(10.0149999));
			dao.setBmkVal(BigDecimal.valueOf(10.0149999));
		} else if (i == 9) {
			dao.setPeriod(CalculationPeriodEnum.FYTD);
			dao.setPrtVal(BigDecimal.valueOf(10.0149999));
			dao.setBmkVal(BigDecimal.valueOf(10.0149999));
		}
		return dao;
	}

	@Then("^data are rounded off to (\\d+) decimal places$")
	public void dataAreRoundedOffToDecimalPlaces(int scale) throws Throwable {
		for (PerformanceSummary data : performanceSummaryIntegrationData.getSavedPerformanceSummaries()) {
			assertEquals(scale, data.getOneMonthValue().scale());
			assertEquals(scale, data.getThreeMonthValue().scale());
			assertEquals(scale, data.getSixMonthValue().scale());
			assertEquals(scale, data.getOneYearValue().scale());
			assertEquals(scale, data.getThreeYearValue().scale());
			assertEquals(scale, data.getFiveYearValue().scale());
			assertEquals(scale, data.getYearToDateValue().scale());
			assertEquals(scale, data.getInceptionValue().scale());
		}
	}

	@Then("^data with type name \"([^\"]*)\" with value (\\d+)\\.(\\d+) is saved into report table$")
	public void dataWithTypeNameWithValueIsSavedIntoReportTable(String arg1, int integer, int fraction) throws Throwable {
		for (PerformanceSummary data : performanceSummaryIntegrationData.getSavedPerformanceSummaries()) {
			if ("Portfolio (Gross)".equals(data.getPerformanceTypeName())) {
				validateValues(data, BigDecimal.valueOf(10.01));
			} else if ("Bmk (Net)".equals(data.getPerformanceTypeName())) {
				validateValues(data, BigDecimal.valueOf(10.01));
			} else if ("Diff".equals(data.getPerformanceTypeName())) {
				validateValues(data, BigDecimal.valueOf(0.00).setScale(2, RoundingMode.HALF_UP));
			}
		}

	}

	private void validateValues(PerformanceSummary data, BigDecimal value) {
		assertEquals(value, data.getOneMonthValue());
		assertEquals(value, data.getThreeMonthValue());
		assertEquals(value, data.getSixMonthValue());
		assertEquals(value, data.getOneYearValue());
		assertEquals(value, data.getThreeYearValue());
		assertEquals(value, data.getFiveYearValue());
		assertEquals(value, data.getYearToDateValue());
		assertEquals(value, data.getInceptionValue());
	}

	@Given("^target tables contains data for the Bmk \\(Div Return\\) with all values \"([^\"]*)\"$")
	public void targetTablesContainsDataForTheBmkDivReturnWithAllValues(String arg1) throws Throwable {
		DateFormat formatter = new SimpleDateFormat(DATE_FORMAT);
		List<PerformanceCalculationDAO> performanceCalculationDAOs = new ArrayList<>();
		performanceCalculationDAOs.addAll(buildPerformanceSummaryWithNullValues(formatter.parse(AS_OF_DATE_2), PORT_ID_1, "Bmk (Div Return)"));
		performanceCalculationDAOs.addAll(buildPerformanceSummaryWithNullValues(formatter.parse(AS_OF_DATE_1), PORT_ID_1, "Bmk (Div Return)"));
		performanceSummaryIntegrationData.setAvailablePerformanceSummaries(performanceCalculationDAOs);
	}

	private List<PerformanceCalculationDAO> buildPerformanceSummaryWithNullValues(final Date effectiveDate, final String portId, final String name) {
		List<PerformanceCalculationDAO> returnData = new ArrayList<>(7);
		for(int i=0; i<7; i++){
			PerformanceCalculationDAO c = new PerformanceCalculationDAO();
			c.setCalcDt(effectiveDate);
			c.setPrtCd(portId);
			if(name.equals(PerformanceSummaryName.PORTFOLIO_GROSS.getName())){
				c.setPrtType(name);
			} else if(name.equals(PerformanceSummaryName.BMK_PRICE_RETURN.getName())){
				c.setBmkType(name);
			} else if(name.equals(PerformanceSummaryName.BMK_DIV_RETURN.getName())){
				c.setBmkType(name);
			} else if(name.equals(PerformanceSummaryName.PORTFOLIO_NET.getName())){
				c.setPrtType(name);
			} else if(name.equals(PerformanceSummaryName.BMK_GROSS.getName())){
				c.setBmkType(name);
			} else if(name.equals(PerformanceSummaryName.BMK_NET.getName())){
				c.setBmkType(name);
			}
			returnData.add(addNullToPerformanceCalculationDAO(c, i));
		}
		return returnData;
	}
	
	private PerformanceCalculationDAO addNullToPerformanceCalculationDAO(PerformanceCalculationDAO dao, int i){
		if (i == 0) {
			dao.setPeriod(CalculationPeriodEnum.CYTD);
			dao.setPrtVal(null);
			dao.setBmkVal(null);
		} else if (i == 1) {
			dao.setPeriod(CalculationPeriodEnum.P1M);
			dao.setPrtVal(null);
			dao.setBmkVal(null);
		} else if (i == 2) {
			dao.setPeriod(CalculationPeriodEnum.P3M);
			dao.setPrtVal(null);
			dao.setBmkVal(null);
		} else if (i == 3) {
			dao.setPeriod(CalculationPeriodEnum.P6M);
			dao.setPrtVal(null);
			dao.setBmkVal(null);
		} else if (i == 4) {
			dao.setPeriod(CalculationPeriodEnum.P1Y);
			dao.setPrtVal(null);
			dao.setBmkVal(null);
		} else if (i == 5) {
			dao.setPeriod(CalculationPeriodEnum.P3YPA);
			dao.setPrtVal(null);
			dao.setBmkVal(null);
		} else if (i == 6) {
			dao.setPeriod(CalculationPeriodEnum.P5YPA);
			dao.setPrtVal(null);
			dao.setBmkVal(null);
		} else if (i == 7) {
			dao.setPeriod(CalculationPeriodEnum.PINCP);
			dao.setPrtVal(null);
			dao.setBmkVal(null);
		} else if (i == 8) {
			dao.setPeriod(CalculationPeriodEnum.PINCEPPA);
			dao.setPrtVal(null);
			dao.setBmkVal(null);
		} else if (i == 9) {
			dao.setPeriod(CalculationPeriodEnum.FYTD);
			dao.setPrtVal(null);
			dao.setBmkVal(null);
		}
		return dao;
	}

	@Then("^the data with type name Bmk \\(Div Return\\) is not saved into the report table$")
	public void theDataWithTypeNameBmkDivReturnIsNotSavedIntoTheReportTable() throws Throwable {
		assertEquals(3, performanceSummaryIntegrationData.getSavedPerformanceSummaries().size());
		PerformanceSummary performanceSummary = null;
		for (PerformanceSummary data : performanceSummaryIntegrationData.getSavedPerformanceSummaries()) {
			if ("Bmk (Div Return)".equals(data.getPerformanceTypeName())) {
				performanceSummary = data;
			}
		}
		assertEquals(null, performanceSummary);
	}

	@Given("^target tables contains data for the Bmk \\(Price Return\\) with all values \"([^\"]*)\"$")
	public void targetTablesContainsDataForTheBmkPriceReturnWithAllValues(String arg1) throws Throwable {
		DateFormat formatter = new SimpleDateFormat(DATE_FORMAT);
		List<PerformanceCalculationDAO> performanceCalculationDAOs = new ArrayList<>();
		performanceCalculationDAOs.addAll(buildPerformanceSummaryWithNullValues(formatter.parse(AS_OF_DATE_2), PORT_ID_1,
				"Bmk (Price Return)"));
		performanceCalculationDAOs.addAll(buildPerformanceSummaryWithNullValues(formatter.parse(AS_OF_DATE_1), PORT_ID_1,
				"Bmk (Price Return)"));
		performanceSummaryIntegrationData.setAvailablePerformanceSummaries(performanceCalculationDAOs);
	}

	@Then("^the data with type name Bmk \\(Price Return\\) is not saved into the report table$")
	public void theDataWithTypeNameBmkPriceReturnIsNotSavedIntoTheReportTable() throws Throwable {
		assertEquals(3, performanceSummaryIntegrationData.getSavedPerformanceSummaries().size());
		PerformanceSummary performanceSummary = null;
		for (PerformanceSummary data : performanceSummaryIntegrationData.getSavedPerformanceSummaries()) {
			if ("Bmk (Price Return)".equals(data.getPerformanceTypeName())) {
				performanceSummary = data;
			}
		}
		assertEquals(null, performanceSummary);
	}

	@Given("^target tables contains data for the Portfolio \\(Net\\) with all values \"([^\"]*)\"$")
	public void targetTablesContainsDataForThePortfolioNetWithAllValues(String arg1) throws Throwable {
		DateFormat formatter = new SimpleDateFormat(DATE_FORMAT);
		List<PerformanceCalculationDAO> performanceCalculationDAOs = new ArrayList<>();
		performanceCalculationDAOs.addAll(buildPerformanceSummaryWithNullValues(formatter.parse(AS_OF_DATE_2), PORT_ID_1,
				"Portfolio (Net)"));
		performanceCalculationDAOs.addAll(buildPerformanceSummaryWithNullValues(formatter.parse(AS_OF_DATE_1), PORT_ID_1,
				"Portfolio (Net)"));
		performanceSummaryIntegrationData.setAvailablePerformanceSummaries(performanceCalculationDAOs);
	}

	@Then("^the data with type name Portfolio \\(Net\\) is not saved into the report table$")
	public void theDataWithTypeNamePortfolioNetIsNotSavedIntoTheReportTable() throws Throwable {
		assertEquals(3, performanceSummaryIntegrationData.getSavedPerformanceSummaries().size());
		PerformanceSummary performanceSummary = null;
		for (PerformanceSummary data : performanceSummaryIntegrationData.getSavedPerformanceSummaries()) {
			if ("Portfolio (Net)".equals(data.getPerformanceTypeName())) {
				performanceSummary = data;
			}
		}
		assertEquals(null, performanceSummary);
	}

	@Given("^target tables contains data for the Bmk \\(Gross\\) with all values \"([^\"]*)\"$")
	public void targetTablesContainsDataForTheBmkGrossWithAllValues(String arg1) throws Throwable {
		DateFormat formatter = new SimpleDateFormat(DATE_FORMAT);
		List<PerformanceCalculationDAO> performanceCalculationDAOs = new ArrayList<>();
		performanceCalculationDAOs.addAll(buildPerformanceSummaryWithNullValues(formatter.parse(AS_OF_DATE_2), PORT_ID_1, "Bmk (Gross)"));
		performanceCalculationDAOs.addAll(buildPerformanceSummaryWithNullValues(formatter.parse(AS_OF_DATE_1), PORT_ID_1, "Bmk (Gross)"));
		performanceSummaryIntegrationData.setAvailablePerformanceSummaries(performanceCalculationDAOs);
	}

	@Then("^the data with type name Bmk \\(Gross\\) is not saved into the report table$")
	public void theDataWithTypeNameBmkGrossIsNotSavedIntoTheReportTable() throws Throwable {
		assertEquals(3, performanceSummaryIntegrationData.getSavedPerformanceSummaries().size());
		PerformanceSummary performanceSummary = null;
		for (PerformanceSummary data : performanceSummaryIntegrationData.getSavedPerformanceSummaries()) {
			if ("Bmk (Gross)".equals(data.getPerformanceTypeName())) {
				performanceSummary = data;
			}
		}
		assertEquals(null, performanceSummary);
	}

	private DataTransferResource buildDataTransferResource() {
		final DataTransferResource resource = new DataTransferResource();
		Whitebox.setInternalState(resource, DataTransferService.class, buildDataTransferService());
		return resource;
	}

	private DataTransferService buildDataTransferService() {
		final DataTransferService service = new DataTransferServiceImpl();
		List<TransferService> services = new ArrayList<>();
		services.add(buildPerformanceSummaryTransferHandler());
		Whitebox.setInternalState(service, "services", services);
		return service;
	}

	private TransferService buildPerformanceSummaryTransferHandler() {
		final TransferService handler = new PerformanceSummaryTransferService();
		Whitebox.setInternalState(handler, PerformanceCalculationRepository.class,
				buildReadPerformanceSummaryRepository());
		Whitebox.setInternalState(handler, "dataConverter", buildPerformanceSummaryConverter());
		Whitebox.setInternalState(handler, PerformanceSummarayRepository.class,
				buildPerformanceSummaryTransferSummaryJpa());
		return handler;
	}

	private PerformanceCalculationRepository buildReadPerformanceSummaryRepository() {
		final PerformanceCalculationRepository readRepo = new PerformanceCalculationRepository() {
			private final List<PerformanceCalculationDAO> retrievable = retrievableTargetPerformanceSummaries;
			@Override
			public <S extends PerformanceCalculationDAO> S save(S arg0) {
				// TODO Auto-generated method stub
				return null;
			}
			
			@Override
			public PerformanceCalculationDAO findOne(Long arg0) {
				// TODO Auto-generated method stub
				return null;
			}
			
			@Override
			public boolean exists(Long arg0) {
				// TODO Auto-generated method stub
				return false;
			}
			
			@Override
			public void deleteAll() {
				// TODO Auto-generated method stub
				
			}
			
			@Override
			public void delete(Iterable<? extends PerformanceCalculationDAO> arg0) {
				// TODO Auto-generated method stub
				
			}
			
			@Override
			public void delete(PerformanceCalculationDAO arg0) {
				// TODO Auto-generated method stub
				
			}
			
			@Override
			public void delete(Long arg0) {
				// TODO Auto-generated method stub
				
			}
			
			@Override
			public long count() {
				// TODO Auto-generated method stub
				return 0;
			}
			
			@Override
			public Page<PerformanceCalculationDAO> findAll(Pageable arg0) {
				// TODO Auto-generated method stub
				return null;
			}
			
			@Override
			public <S extends PerformanceCalculationDAO> S saveAndFlush(S entity) {
				// TODO Auto-generated method stub
				return null;
			}
			
			@Override
			public <S extends PerformanceCalculationDAO> List<S> save(Iterable<S> entities) {
				// TODO Auto-generated method stub
				return null;
			}
			
			@Override
			public PerformanceCalculationDAO getOne(Long id) {
				// TODO Auto-generated method stub
				return null;
			}
			
			@Override
			public void flush() {
				// TODO Auto-generated method stub
				
			}
			
			@Override
			public List<PerformanceCalculationDAO> findAll(Iterable<Long> ids) {
				// TODO Auto-generated method stub
				return null;
			}
			
			@Override
			public List<PerformanceCalculationDAO> findAll(Sort sort) {
				// TODO Auto-generated method stub
				return null;
			}
			
			@Override
			public List<PerformanceCalculationDAO> findAll() {
				// TODO Auto-generated method stub
				return null;
			}
			
			@Override
			public void deleteInBatch(Iterable<PerformanceCalculationDAO> entities) {
				// TODO Auto-generated method stub
				
			}
			
			@Override
			public void deleteAllInBatch() {
				// TODO Auto-generated method stub
				
			}
			
			@Override
			public List<DateVersion> findMaxVersionPerMonthByPortfolioAndEndDateAndPeriod(String portfolioCode, Date start,
					Date end, CalculationPeriodEnum period) {
				// TODO Auto-generated method stub
				return null;
			}
			
			@Override
			public List<PerformanceCalculationDAO> findByPortfolioAndEndDateAndVersionAndPeriod(String portfolioCode, Date end,
					BigDecimal version, CalculationPeriodEnum period) {
				// TODO Auto-generated method stub
				return null;
			}
			
			@Override
			public List<PerformanceCalculationDAO> findByPortfolioAndDateRangeAndVersionAndPeriod(String portfolioCode,
					Date start, Date end, BigDecimal version, CalculationPeriodEnum period) {
				// TODO Auto-generated method stub
				return null;
			}
			
			@Override
			public PerformanceCalculationDAO findByPortfolioAndDateAndVersionAndPeriod(String portfolioCode, Date date,
					BigDecimal version, CalculationPeriodEnum period) {
				// TODO Auto-generated method stub
				return null;
			}
			
			@Override
			public List<PerformanceCalculationDAO> findByCalculationDateAndPortCodeAndLastestVersion(Date calculationDate,
					String portId) {
				return retrievable;
			}
			
			@Override
			public List<PerformanceCalculationDAO> findByCalculationDateAndLastestVersion(Date calculationDate) {
				return retrievable;
			}
		};
		return readRepo;
	}

	private Object buildPerformanceSummaryConverter() {
		return new PerformanceSummaryDataConverter();
	}

	private static interface CheckablePerformanceSummaryServiceWrapper extends PerformanceSummarayRepository {
		List<PerformanceSummary> getSavedPerformanceSummaries();
	}

	private CheckablePerformanceSummaryServiceWrapper buildPerformanceSummaryTransferSummaryJpa() {
		final CheckablePerformanceSummaryServiceWrapper repo = new CheckablePerformanceSummaryServiceWrapper() {
			private final List<PerformanceSummary> saved = new ArrayList<>();

			@Override
			public List<PerformanceSummary> findByEffectiveDateAndPortIdAndEffectiveEndDateIsNull(Date effectiveDate,
					String portId) {
				return saved;
			}

			@Override
			public List<PerformanceSummary> findAll() {
				return null;
			}

			@Override
			public List<PerformanceSummary> findAll(Sort sort) {
				return null;
			}

			@Override
			public List<PerformanceSummary> findAll(Iterable<Long> ids) {
				return null;
			}

			@Override
			public <S extends PerformanceSummary> List<S> save(Iterable<S> entities) {
				for (PerformanceSummary summ : entities) {
					saved.add(summ);
				}
				return null;
			}

			@Override
			public void flush() {
			}

			@Override
			public <S extends PerformanceSummary> S saveAndFlush(S entity) {
				return null;
			}

			@Override
			public void deleteInBatch(Iterable<PerformanceSummary> entities) {
			}

			@Override
			public void deleteAllInBatch() {
			}

			@Override
			public PerformanceSummary getOne(Long id) {
				return null;
			}

			@Override
			public Page<PerformanceSummary> findAll(Pageable arg0) {
				return null;
			}

			@Override
			public long count() {
				return 0;
			}

			@Override
			public void delete(Long arg0) {
			}

			@Override
			public void delete(PerformanceSummary arg0) {
			}

			@Override
			public void delete(Iterable<? extends PerformanceSummary> arg0) {
			}

			@Override
			public void deleteAll() {
			}

			@Override
			public boolean exists(Long arg0) {
				return false;
			}

			@Override
			public PerformanceSummary findOne(Long arg0) {
				return null;
			}

			@Override
			public <S extends PerformanceSummary> S save(S arg0) {
				return arg0;
			}

			@Override
			public List<PerformanceSummary> getSavedPerformanceSummaries() {
				return saved;
			}

		};
		checkableWrapper = repo;
		return repo;
	}
}

		RoundingStepDefs.java


package com.vanguard.corp.ics.sdt.webservice.cucumber.stepdefs.integration;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;

import javax.inject.Inject;

import com.vanguard.corp.ics.dao.target.FactsetMonthlyCharacteristicsTargetDAO;
import com.vanguard.corp.ics.sdt.dao.impl.entity.report.Characteristics;
import com.vanguard.corp.ics.sdt.service.api.constants.CharacteristicsType;
import com.vanguard.corp.ics.sdt.service.api.constants.MarketSegmentationType;
import com.vanguard.corp.ics.sdt.service.api.util.DateParser;
import com.vanguard.corp.ics.sdt.test.characteristics.FactsetMonthlyCharacteristicsTargetDAOBuilder;
import com.vanguard.corp.ics.sdt.test.characteristics.TestCharacteristicsType;
import com.vanguard.corp.ics.sdt.webservice.cucumber.stepdefs.shared.CharacteristicsIntegrationData;

import cucumber.api.java.en.Given;
import cucumber.api.java.en.Then;

public class RoundingStepDefs {

	private static final String AS_OF_DATE = "2016-01-31";

	@Inject
	private CharacteristicsIntegrationData characteristicsIntegrationData;

	private FactsetMonthlyCharacteristicsTargetDAOBuilder builder = new FactsetMonthlyCharacteristicsTargetDAOBuilder();

	@Given("^target tables contain the following (.*) section data$")
	public void targetTablesContainTheFollowingSectionData(final String sectionName, final List<Map<String, String>> dataRows) throws Throwable {
		
		DateParser dateParser = new DateParser();
		
		TestCharacteristicsType testCharacteristicsType = TestCharacteristicsType.byName(sectionName);
		assertNotNull("Unknown characteristics name: "+sectionName, testCharacteristicsType);
		
		List<FactsetMonthlyCharacteristicsTargetDAO> available = new ArrayList<>();
		String portId, portfolio, benchmark;
		for (Map<String, String> dataRow : dataRows) {
			portId = dataRow.get("port id");
			portfolio = dataRow.get("portfolio value");
			benchmark = dataRow.get("benchmark value");
			
			available.add(builder.build(dateParser.parse(AS_OF_DATE), portId
					, testCharacteristicsType.getType().getTargetCode()
					, CharacteristicsType.MARKET_SEGMENTATION == testCharacteristicsType.getType() ? MarketSegmentationType.LARGE.getTargetName() : ""
					, portfolio.equals("null") ? null : portfolio
					, benchmark.equals("null") ? null : benchmark
					));
		}
		
		characteristicsIntegrationData.setAvailableTargetCharacteristics(available);
		characteristicsIntegrationData.setTargetAsOfDate(AS_OF_DATE);
	}

	@Then("^reporting tables contain the following (.*) section data$")
	public void reportingTablesContainTheFollowingSectionData(final String sectionName, final List<Map<String, String>> dataRows) throws Throwable {
		
		TestCharacteristicsType characteristicsType = TestCharacteristicsType.byName(sectionName);
		assertNotNull("Unknown characteristics name: "+sectionName, characteristicsType);
		
		Set<String> portIdsWithNullPortfolioValues = new HashSet<>();
		Set<String> portIdsWithNullBenchmarkValues = new HashSet<>();
		Map<String, List<String>> portIdEntryCounter = new HashMap<>();
		
		Set<String> portIds = new HashSet<>();
		String portId, portfolio, benchmark;
		List<String> counterList;
		boolean found = false;
		for (Map<String, String> dataRow : dataRows) {
			portId = dataRow.get("port id");
			portIds.add(portId);
			portfolio = dataRow.get("portfolio value");
			benchmark = dataRow.get("benchmark value");
			found = false;
			
			counterList = portIdEntryCounter.get(portId);
			if (counterList == null) {
				counterList = new ArrayList<>();
				portIdEntryCounter.put(portId, counterList);
			}
			counterList.add(portfolio+"-"+benchmark);
			
			if ("null".equals(portfolio)) {
				portIdsWithNullPortfolioValues.add(portId);
			}
			if ("null".equals(benchmark)) {
				portIdsWithNullBenchmarkValues.add(portId);
			}
			
			for (Characteristics ch : characteristicsIntegrationData.getSavedCharacteristics()) {
				if (ch.getPortId().equals(portId)
						&& ch.getType().equals(characteristicsType.getType().getReportingCode())
						&& (
								("null".equals(portfolio) && ch.getPortfolio() == null)
								|| (!"null".equals(portfolio) && ch.getPortfolio() != null && ch.getPortfolio().compareTo(new BigDecimal(portfolio)) == 0)
								)
						&& (
								("null".equals(benchmark) && ch.getBenchmark() == null)
								|| (!"null".equals(benchmark) && ch.getBenchmark() != null && ch.getBenchmark().compareTo(new BigDecimal(benchmark)) == 0)
								)
						) {
					found = true;
					break;
				}
			}
			assertTrue(String.format("didn't find: portId:%s portfolio:%s benchmark:%s", portId, portfolio, benchmark), found);
		}
		
		if (characteristicsType.getType() == CharacteristicsType.PORTFOLIO_CHARACTERISTICS) {
			return; // yay, successful!
		}
		
		Map<String, BigDecimal> portfolioTotalsByPortId = new HashMap<>();
		Map<String, BigDecimal> benchmarkTotalsByPortId = new HashMap<>();
		Iterator<String> iterator = portIds.iterator();
		while (iterator.hasNext()) {
			portId = iterator.next();
			portfolioTotalsByPortId.put(portId, new BigDecimal("0.00000"));
			benchmarkTotalsByPortId.put(portId, new BigDecimal("0.00000"));
		}
		
		for (Characteristics ch : characteristicsIntegrationData.getSavedCharacteristics()) {
			portfolioTotalsByPortId.put(ch.getPortId(), portfolioTotalsByPortId.get(ch.getPortId()).add(ch.getPortfolio() == null ? BigDecimal.ZERO : ch.getPortfolio()));
			benchmarkTotalsByPortId.put(ch.getPortId(), benchmarkTotalsByPortId.get(ch.getPortId()).add(ch.getBenchmark() == null ? BigDecimal.ZERO : ch.getBenchmark()));
		}
		for (String key : portfolioTotalsByPortId.keySet()) {
			
			if (characteristicsType.getType() == CharacteristicsType.TOP_TEN_HOLDINGS
					&& portIdEntryCounter.get(key).size() > 9
					) {
				continue; // don't magic round more than 9 entries
			}
			
			if (!portIdsWithNullPortfolioValues.contains(key)) {
				assertEquals(String.format("type %s %s portfolio total is: %s", characteristicsType.getType().getReportingCode(), key, portfolioTotalsByPortId.get(key)), 0, portfolioTotalsByPortId.get(key).compareTo(new BigDecimal("100.0")));
			}
			if (!portIdsWithNullBenchmarkValues.contains(key)) {
				assertEquals(String.format("type %s %s benchmark total is: %s", characteristicsType.getType().getReportingCode(), key, benchmarkTotalsByPortId.get(key)), 0, benchmarkTotalsByPortId.get(key).compareTo(new BigDecimal("100.0")));
			}
		}
	}

}


com.vanguard.corp.ics.sdt.webservice.cucumber.stepdefs.shared
	AttributionSummaryIntegrationData.java

package com.vanguard.corp.ics.sdt.webservice.cucumber.stepdefs.shared;

import java.util.List;

import javax.inject.Named;

import org.springframework.context.annotation.Scope;

import com.vanguard.corp.ics.dao.target.AttributionTargetDAO;
import com.vanguard.corp.ics.sdt.dao.impl.entity.report.AttributionSummary;

@Named
@Scope("cucumber-glue")
public class AttributionSummaryIntegrationData {

	private List<AttributionTargetDAO> availableTargetAttributionSummaries;
	private String effectiveDate;
	private List<AttributionSummary> savedAttributionSummaries;
	private String portId;

	public List<AttributionTargetDAO> getAvailableTargetAttributionSummaries() {
		return availableTargetAttributionSummaries;
	}

	public void setAvailableTargetAttributionSummaries(
			List<AttributionTargetDAO> availableTargetAttributionSummaries) {
		this.availableTargetAttributionSummaries = availableTargetAttributionSummaries;
	}

	public String getEffectiveDate() {
		return effectiveDate;
	}

	public void setEffectiveDate(String effectiveDate) {
		this.effectiveDate = effectiveDate;
	}

	public List<AttributionSummary> getSavedAttributionSummaries() {
		return savedAttributionSummaries;
	}

	public void setSavedAttributionSummaries(List<AttributionSummary> savedAttributionSummaries) {
		this.savedAttributionSummaries = savedAttributionSummaries;
	}

	public String getPortId() {
		return portId;
	}

	public void setPortId(String portId) {
		this.portId = portId;
	}

}


		CharacteristicsIntegrationData.java
		PerformanceSummaryIntegrationData.java


package com.vanguard.corp.ics.sdt.webservice.cucumber.stepdefs.shared;

import java.util.List;

import javax.inject.Named;

import org.springframework.context.annotation.Scope;

import com.vanguard.corp.ics.dao.target.PerformanceCalculationDAO;
import com.vanguard.corp.ics.sdt.dao.impl.entity.report.PerformanceSummary;

@Named
@Scope("cucumber-glue")
public class PerformanceSummaryIntegrationData {
	private List<PerformanceCalculationDAO> availablePerformanceSummaries;
	private String effectiveDate;
	private List<PerformanceSummary> savedPerformanceSummaries;
	private String portId;
	public List<PerformanceCalculationDAO> getAvailablePerformanceSummaries() {
		return availablePerformanceSummaries;
	}
	public void setAvailablePerformanceSummaries(List<PerformanceCalculationDAO> availablePerformanceSummaries) {
		this.availablePerformanceSummaries = availablePerformanceSummaries;
	}
	public String getEffectiveDate() {
		return effectiveDate;
	}
	public void setEffectiveDate(String effectiveDate) {
		this.effectiveDate = effectiveDate;
	}
	public List<PerformanceSummary> getSavedPerformanceSummaries() {
		return savedPerformanceSummaries;
	}
	public void setSavedPerformanceSummaries(List<PerformanceSummary> savedPerformanceSummaries) {
		this.savedPerformanceSummaries = savedPerformanceSummaries;
	}
	public String getPortId() {
		return portId;
	}
	public void setPortId(String portId) {
		this.portId = portId;
	}
}


	TargetCharacteristicsDataBuilder.java


com.vanguard.corp.ics.sdt.webservice.cucumber.stepdefs.unit(CharacteristicsStepDefs.java
RiskSummaryServiceSteps.java)

com.vanguard.corp.ics.sdt.webservice.resource

package com.vanguard.corp.ics.sdt.webservice.resource;

import static org.junit.Assert.assertEquals;
import static org.mockito.Mockito.doNothing;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.times;

import java.io.IOException;

import javax.servlet.DispatcherType;
import javax.servlet.RequestDispatcher;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.junit.Test;
import org.junit.experimental.categories.Category;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;

import com.vanguard.test.categories.UnitTest;

@Category(UnitTest.class)
@RunWith(MockitoJUnitRunner.class)
public class TomcatDefaultErrorResourceTest {
	
	@Mock
	private HttpServletResponse response;
	
	@Mock
	private HttpServletRequest request;
	
	@Mock
	private ServletOutputStream outputStream;
	
	@Test
	public void testHandleErrorWhenDispatcherTypeError() throws IOException {
		TomcatDefaultErrorResource resource = createTomcatDefaultErrorResource("ERROR");
		int returnCode = 401;
		
		when(request.getAttribute(RequestDispatcher.ERROR_STATUS_CODE)).thenReturn(returnCode);
		when(request.getAttribute(RequestDispatcher.ERROR_REQUEST_URI)).thenReturn("http://blahblahblah.com");
		when(request.getAttribute(RequestDispatcher.ERROR_MESSAGE)).thenReturn("Success");
		when(request.getAttribute(RequestDispatcher.ERROR_EXCEPTION)).thenReturn(null);
		when(response.getStatus()).thenReturn(returnCode);
		when(response.getOutputStream()).thenReturn(outputStream);
		doNothing().when(outputStream).flush();
		doNothing().when(outputStream).close();

		resource.handleError(response, request);
		
		assertEquals(returnCode, response.getStatus());
		
	}

	@Test
	public void testHandleErrorWhenDispatcherTypeNotError() throws IOException {
		TomcatDefaultErrorResource resource = createTomcatDefaultErrorResource("REQUEST");
		int returnCode = 500;
		
		when(response.getOutputStream()).thenReturn(outputStream);
		when(response.getStatus()).thenReturn(returnCode);
		doNothing().when(outputStream).flush();
		doNothing().when(outputStream).close();

		resource.handleError(response, request);
		
		assertEquals(returnCode, response.getStatus());
	}
	
	private TomcatDefaultErrorResource createTomcatDefaultErrorResource(String dispatcherType) {
		TomcatDefaultErrorResource resource = new TomcatDefaultErrorResource() {

			@Override
			protected String getDispatcherType(HttpServletRequest request) {
				return dispatcherType;
			}
			
		};
		return resource;
	}

	@Test
	public void testGetDispatcherType() {
		when(request.getDispatcherType()).thenReturn(DispatcherType.FORWARD);
		
		TomcatDefaultErrorResource classUnderTest = new TomcatDefaultErrorResource();
		classUnderTest.getDispatcherType(request);
		
		verify(request, times(1)).getDispatcherType();
	}
}


src/test/resources
	features
		attributionSummary
characteristics
performancesummary
valuations
brokerageAndTaxes.feature
calculation.feature
commentary.feature
investmentObjective.feature
portfolioActivity.feature
portfolioOverview.feature
reportHeader.feature
riskSummaryLimits.feature
riskSummaryPortfolio.feature
security.feature


applicationContext.xml

<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context.xsd">

	<!-- The jersey-spring3 jar expects this applicationContext.xml classpath 
		file for running Jersey tests outside of a servlet container. -->
	<context:annotation-config />
	<context:component-scan base-package="com.vanguard.corp.ics.sdt.webservice" />
	
</beans>


cucumber.xml

<beans xmlns:context="http://www.springframework.org/schema/context"
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xmlns="http://www.springframework.org/schema/beans"
		xsi:schemaLocation="
				http://www.springframework.org/schema/beans
				http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
				http://www.springframework.org/schema/context
				http://www.springframework.org/schema/context/spring-context-3.0.xsd
				"
		>

	<context:annotation-config/>
	<context:component-scan base-package="com.vanguard.corp.ics.sdt.webservice.cucumber.stepdefs.shared" />
</beans>


launch-config
	sma-data-transformer.webservice-deve.launch
<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<launchConfiguration type="org.springframework.ide.eclipse.boot.launch">
<listAttribute key="org.eclipse.debug.core.MAPPED_RESOURCE_PATHS">
<listEntry value="/sma-data-transformer.webservice/src/main/java/com/vanguard/corp/ics/sdt/webservice/Application.java"/>
</listAttribute>
<listAttribute key="org.eclipse.debug.core.MAPPED_RESOURCE_TYPES">
<listEntry value="1"/>
</listAttribute>
<stringAttribute key="org.eclipse.jdt.launching.MAIN_TYPE" value="com.vanguard.corp.ics.sdt.webservice.Application"/>
<stringAttribute key="org.eclipse.jdt.launching.PROJECT_ATTR" value="sma-data-transformer.webservice"/>
<stringAttribute key="org.eclipse.jdt.launching.SOURCE_PATH_PROVIDER" value="org.springframework.ide.eclipse.boot.launch.BootMavenSourcePathProvider"/>
<stringAttribute key="org.eclipse.jdt.launching.VM_ARGUMENTS" value="-DORACLE_GMRADM_SRS_USER_ID1=WOSRS08D&#13;&#10;-DORACLE_GMRADM_SRS_PASSWORD1=Lgt5T5NZ"/>
<stringAttribute key="process_factory_id" value="org.springframework.ide.eclipse.boot.launch.process.BootProcessFactory"/>
<booleanAttribute key="spring.boot.debug.enable" value="false"/>
<booleanAttribute key="spring.boot.lifecycle.enable" value="true"/>
<stringAttribute key="spring.boot.lifecycle.termination.timeout" value="15000"/>
<booleanAttribute key="spring.boot.livebean.enable" value="true"/>
<stringAttribute key="spring.boot.livebean.port" value="54345"/>
<stringAttribute key="spring.boot.profile" value=""/>
</launchConfiguration>


.bat
.jmx
Sonarqube	
FishEye and Crucible
