vanguard-spring-core-spring-4-1.1-M20160505-01.jar
	com.vanguard.spring.core.aspects
		AspectOrder.class

/*
 ****************************************************************************
 * 
 * Copyright (c)2008 The Vanguard Group of Investment Companies (VGI)
 * All rights reserved.
 * 
 * This source code is CONFIDENTIAL and PROPRIETARY to VGI. Unauthorized
 * distribution, adaptation, or use may be subject to civil and criminal
 * penalties.
 *
 ****************************************************************************
 Module Description:
 
 $HeadURL: http://prdsvnrepo:8080/svn/tip/ngsa/projects/project-common-components/vanguard-spring-core/tags/1.1-M20160505-01/src/main/java/com/vanguard/spring/core/aspects/AspectOrder.java $
 $LastChangedRevision: 465070 $
 $Author: u16t $
 $LastChangedDate: 2016-05-03 13:52:40 -0400 (Tue, 03 May 2016) $
 */
package com.vanguard.spring.core.aspects;

import org.springframework.core.Ordered;

/**
 * Enum representing aspect order values, which must have a range of [0, Ordered.LOWEST_PREFERENCE]. 
 * The lower the order value, the higher precedence it takes.
 * 
 * Order values that are multiples of 1000 are for Spring/NGSA-provided functionality.  Others are 
 * convenience values for application-specific use.  Application teams should inject these 
 * order values using the following syntax:
 * 
 * 
 * public class MyApplicationAspect implements Ordered {
 *
 *   &#64;Autowired
 *   &#64;Qualifier("AspectOrder.AFTER_TRANSACTION")    
 *   private int order;
 *
 *   public int getOrder() {
 *       return order;
 *   }
 *       
 *   ...
 * }
 * 
 * @see org.springframework.core.Ordered
 * @author u16t
 */
public enum AspectOrder {

    FIRST(0),

    BEFORE_SECURITY(750),

    SECURITY(1000),

    AFTER_SECURITY(1250),

    BEFORE_CACHING(1750),

    CACHING(2000),

    AFTER_CACHING(2250),

    BEFORE_TRANSACTION_RETRY(2750),

    TRANSACTION_RETRY(3000),

    AFTER_TRANSACTION_RETRY(3250),

    BEFORE_TRANSACTION(3750),

    TRANSACTION(4000),

    AFTER_TRANSACTION(4250),

    LAST(Ordered.LOWEST_PRECEDENCE);

    private int order;

    private AspectOrder(int order) {
        this.order = order;
    }

    public int getOrder() {
        return order;
    }
}

	com.vanguard.spring.core.config
	CommonPathVariableConstants.class

/*
 ****************************************************************************
 * 
 * Copyright (c)2008 The Vanguard Group of Investment Companies (VGI)
 * All rights reserved.
 * 
 * This source code is CONFIDENTIAL and PROPRIETARY to VGI. Unauthorized
 * distribution, adaptation, or use may be subject to civil and criminal
 * penalties.
 *
 ****************************************************************************
 Module Description:
 
 $HeadURL: http://prdsvnrepo:8080/svn/tip/ngsa/projects/project-common-components/vanguard-spring-core/tags/1.1-M20160505-01/src/main/java/com/vanguard/spring/core/config/CommonPathVariableConstants.java $
 $LastChangedRevision: 20219 $
 $Author: uw8h $
 $LastChangedDate: 2010-06-16 16:27:59 -0400 (Wed, 16 Jun 2010) $
 */
package com.vanguard.spring.core.config;

/**
 * Defined configuration system properties used by all NGSA modules.
 * 
 * @author uw8h
 */
public final class CommonPathVariableConstants {

    /**
     * 
     */
    private CommonPathVariableConstants() {
        throw new AssertionError("Illegal attempt to create com.vanguard.spring.core.config.CommonPathVariableConstants");
    }
    
    /**
     * Required System Variable: This variable is used by all modules to
     * define the base directory that contains configuration for a specific
     * region. Each application(jar in standalone apps or war for websphere
     * apps) will contain a /META-INF/$\{RTEID\} directory which stores
     * configuration data for the region.
     * 
     * <p>
     * Example directory structure defined the applications configuration
     * jar:
     * <ul>
     * <li>/META-INF/DEV</li>
     * <li>/META-INF/INT</li>
     * <li>/META-INF/SAT</li>
     * <li>/META-INF/PRD</li>
     * </ul>
     * <p>
     * Use RTEID=DEV when executing DEV region settings.
     */
    public static final String RTEID = "RTEID";

    /**
     * Optional System Variable: In CAT and PROD, BAM will need to supply a
     * Secure SSI File which contains any secure data such as passwords. The
     * location of this file is set by the "SECURE_SSI_FILE" system
     * property.
     * 
     * <p>
     * This property is optional as not all configurations will require a
     * passwords stored in a BAM supplied secure file.
     */
    public static final String SECURE_SSI_FILE = "SECURE_SSI_FILE";

    /**
     * Optional System Variable: In UNIX regions variables such as ports
     * may need to be different per host and thus require different variable
     * depending on server.  These values should be added here.
     * 
     * <p>
     * This property is optional as not all configurations will require a
     * passwords stored in a BAM supplied secure file.
     */
    public static final String SYSTEM_SSI_FILE = "SYSTEM_SSI_FILE";
    
    /**
     * Override Variable supplied to PropertyPlaceholderConfigurerFactory
     * method to generate PropertyPlaceholderConfigurer. No need to supply
     * this to JVM.
     */
    public static final String MODULE_ID = "MODULE_ID";

    /**
     * The prefix {@value com.vanguard.spring.core.config.CommonPathVariableConstants#PLACEHOLDER_PREFIX} is used at the front of a variable / placeholder to tell the system to replace this variable name with
     * a the system property of that name, or the MODULE_ID defined in the vanguard-property-placeholder.
     * 
     * <p>Example: 
     * <ul>
     * <li>/META-INF/$path-format{MODULE_ID}/spring-default.properties
     * </ul>
     * 
     * <p>$path-format{MODULE_ID} will be replaced by moduleId from property placeholder.
     */
    public static final String PLACEHOLDER_PREFIX = "$path-format{";

    /**
     * The suffix {@value com.vanguard.spring.core.config.CommonPathVariableConstants#PLACEHOLDER_SUFFIX} is used at the end of a variable name / placeholder to tell the system to replace this variable name with
     * a the system property of that name, or the MODULE_ID defined in the vanguard-property-placeholder.
     * 
     * <p>Example: 
     * <ul>
     * <li>/META-INF/$path-format{MODULE_ID}/spring-default.properties
     * </ul>
     * 
     * <p>$path-format{MODULE_ID} will be replaced by moduleId from property placeholder.
     */
    public static final String PLACEHOLDER_SUFFIX = "}";

    /**
     * Increment used by to space the "order" of PathOrder enum 
     */
    public static final int PATH_ORDER_INCREMENT = 100;
}
	CustomPathFormat.class

/*
 ****************************************************************************
 * 
 * Copyright (c)2008 The Vanguard Group of Investment Companies (VGI)
 * All rights reserved.
 * 
 * This source code is CONFIDENTIAL and PROPRIETARY to VGI. Unauthorized
 * distribution, adaptation, or use may be subject to civil and criminal
 * penalties.
 *
 ****************************************************************************
 Module Description:
 
 $HeadURL: http://prdsvnrepo:8080/svn/tip/ngsa/projects/project-common-components/vanguard-spring-core/tags/1.1-M20160505-01/src/main/java/com/vanguard/spring/core/config/CustomPathFormat.java $
 $LastChangedRevision: 465070 $
 $Author: u16t $
 $LastChangedDate: 2016-05-03 13:52:40 -0400 (Tue, 03 May 2016) $
 */
package com.vanguard.spring.core.config;

import org.springframework.util.Assert;

/**
 * This class is used within the configuration bootstrap to add any additional
 * properties files that should be pulled in by the Vanguard default property
 * placeholders.
 * 
 * @author uw8h
 */
public class CustomPathFormat implements PathFormat {

    private static final String OUT_OF_RANGE_ERROR_MESSAGE = String.format("orderIncrement must be a number between 1 and %1$s",
            CommonPathVariableConstants.PATH_ORDER_INCREMENT - 1);

    private final String pathFormatString;

    private final PathOrder orderBase;

    private final int orderIncrement;

    /**
     * Constructor to create a custom path format
     * 
     * @param aPathFormat
     *                non null non blank string which contain pathFormat to
     *                pull in to the vanguard-property-placeholder
     * @param anOrderBase
     *                the base order to use when determining path order
     * @param anOrderIncrement
     *                an increment to add to base order when calculating
     *                order this must be an integer between 1 and
     *                com.vanguard.spring.core.config.CommonPathVariableConstants.PATH_ORDER_INCREMENT - 1
     * @throws IllegalArgumentException
     *                 if any of the parameters are not valid.
     */
    public CustomPathFormat(String aPathFormat, PathOrder anOrderBase, int anOrderIncrement) throws IllegalArgumentException {
        Assert.hasText(aPathFormat, "aPathFormat can not be blank or null");
        Assert.notNull(anOrderBase, "anOrderBase can not be null");
        Assert.isTrue(1 <= anOrderIncrement, OUT_OF_RANGE_ERROR_MESSAGE);
        Assert.isTrue(anOrderIncrement < CommonPathVariableConstants.PATH_ORDER_INCREMENT, OUT_OF_RANGE_ERROR_MESSAGE);
        pathFormatString = aPathFormat;
        orderBase = anOrderBase;
        orderIncrement = anOrderIncrement;
    }

    /**
     * Returns the path format String
     */
    public String getPathFormatString() {
        return pathFormatString;
    }

    /**
     * Returns a string representation of the path in the following format:
     * CommonPathFormat(pathFormat,baseOrder.name():getOrder())
     * 
     * <p>
     * Examples:
     * <ul>
     * <li>GenericPathFormat[/META-INF/${MODULE_ID}/spring-defaults.properties,0]
     * <li>GenericPathFormat[/META-INF/${RTEID}/${MODULE_ID}/spring-override.properties]
     * </ul>
     */
    @Override
    public String toString() {
        return String.format("%1$s(%2$s,%3$s:%4$s)", "CustomPathFormat", pathFormatString, orderBase.name(), getOrder());
    }

    public int getOrder() {
        return orderBase.getOrder() + orderIncrement;
    }

}

DefaultPathFormat.class

/*
 ****************************************************************************
 * 
 * Copyright (c)2008 The Vanguard Group of Investment Companies (VGI)
 * All rights reserved.
 * 
 * This source code is CONFIDENTIAL and PROPRIETARY to VGI. Unauthorized
 * distribution, adaptation, or use may be subject to civil and criminal
 * penalties.
 *
 ****************************************************************************
 Module Description:
 
 $HeadURL: http://prdsvnrepo:8080/svn/tip/ngsa/projects/project-common-components/vanguard-spring-core/tags/1.1-M20160505-01/src/main/java/com/vanguard/spring/core/config/DefaultPathFormat.java $
 $LastChangedRevision: 20219 $
 $Author: uw8h $
 $LastChangedDate: 2010-06-16 16:27:59 -0400 (Wed, 16 Jun 2010) $
 */
package com.vanguard.spring.core.config;

/**
 * Common path formats that are used by
 * {@code <config:vanguard-property-placeholder-configurer moduleId="my-module"/>}
 * to resolve variables in Spring XML.
 * 
 * <p>
 * The PropertyPlaceholderConfigurer will read the properties files defined by the . 
 * "DefaultPathFormat" in the following order.  If the properties is found at first 
 * properties file, the PropertyPlaceholderConfigurer does not continue to the next
 * properties file.  If it however it does not find the property, it will continue to 
 * the next properties file.
 * 
 * <ol>
 * <li>{@link com.vanguard.spring.core.config.DefaultPathFormat#SECURE_SSI_FILE}</li>
 * <li>{@link com.vanguard.spring.core.config.DefaultPathFormat#OVERRIDE}</li>
 * <li>{@link com.vanguard.spring.core.config.DefaultPathFormat#SHARED}</li>
 * <li>{@link com.vanguard.spring.core.config.DefaultPathFormat#DEFAULT}</li>
 * </ol>
 * 
 * @author uw8h
 */
public enum DefaultPathFormat implements PathFormat {
    /**
     * <b>classpath:/META-INF/$path-format&#123;MODULE_ID&#125;/$path-format&#123;MODULE_ID&#125;-default.properties</b>
     * 
     * <p>
     * Defined path for default properties included within the module.
     * 
     * <ul>
     * <li>$path-format&#123;MODULE_ID&#125; is replaced with the moduleId
     * supplied in vanguard-property-placeholder.
     * {@code <config:vanguard-property-placeholder moduleId="my-module"/>}.</li>
     * </ul>
     * 
     * @see PathOrder#DEFAULT
     * @see com.vanguard.spring.core.config.CommonPathVariableConstants#MODULE_ID
     */
    DEFAULT("classpath:/META-INF/$path-format{MODULE_ID}/$path-format{MODULE_ID}-default.properties", PathOrder.DEFAULT),

    /**
     * <b>classpath:/META-INF/RTE/$path-format&#123;RTEID&#125;/$path-format&#123;MODULE_ID&#125;-override.properties</b>
     * 
     * <p>
     * Defined path for properties to use for multiple modules deployed
     * within an application
     * 
     * <ul>
     * <li>$path-format&#123;RTEID&#125; is replaced by value of the RTEID
     * system property supplied by packaging team</li>
     * </ul>
     * 
     * @see PathOrder#SHARED
     * @see com.vanguard.spring.core.config.CommonPathVariableConstants#RTEID
     */
    SHARED("classpath:/META-INF/RTE/$path-format{RTEID}/shared-configuration.properties", PathOrder.SHARED),

    /**
     * <b>classpath:/META-INF/RTE/$path-format&#123;RTEID&#125;/$path-format&#123;MODULE_ID&#125;-override.properties</b>
     * 
     * <p>
     * Defined path for properties that override the default properties
     * supplied by the module.
     * 
     * <ul>
     * <li>$path-format&#123;MODULE_ID&#125; is replaced with the moduleId
     * supplied in vanguard-property-placeholder.
     * {@code <config:vanguard-property-placeholder moduleId="my-module"/>}.</li>
     * <li>$path-format&#123;RTEID&#125; is replaced by value of the RTEID
     * system property supplied by packaging team</li>
     * </ul>
     * 
     * @see PathOrder#OVERRIDE
     * @see com.vanguard.spring.core.config.CommonPathVariableConstants#MODULE_ID
     * @see com.vanguard.spring.core.config.CommonPathVariableConstants#RTEID
     */
    OVERRIDE("classpath:/META-INF/RTE/$path-format{RTEID}/$path-format{MODULE_ID}-override.properties", PathOrder.OVERRIDE),

    /**
     * <b>$path-format&#123;SECURE_SSI_FILE&#125;</b>
     * 
     * <p>
     * Defined path for sensitive properties such as passwords that will be
     * delived by BAM.
     * 
     * <ul>
     * <li>$path-format&#123;SECURE_SSI_FILE&#125; is replaced with the
     * value of SECURE_SSI_FILE supplied by packaging team. Value should be
     * "file:" followed by the path of secure ssi file supplied by BAM</li>
     * </ul>
     * 
     * @see PathOrder#SECURITY
     * @see com.vanguard.spring.core.config.CommonPathVariableConstants#SECURE_SSI_FILE
     */
    SECURE_SSI_FILE("$path-format{SECURE_SSI_FILE}", PathOrder.SECURITY),

    /**
     * <b>$path-format&#123;SECURE_SSI_FILE&#125;</b>
     * 
     * <p>
     * Defined path for sensitive properties such as passwords that will be
     * delived by BAM.
     * 
     * <ul>
     * <li>$path-format&#123;SECURE_SSI_FILE&#125; is replaced with the
     * value of SECURE_SSI_FILE supplied by packaging team. Value should be
     * "file:" followed by the path of secure ssi file supplied by BAM</li>
     * </ul>
     * 
     * @see PathOrder#SECURITY
     * @see com.vanguard.spring.core.config.CommonPathVariableConstants#SECURE_SSI_FILE
     */
    SYSTEM_SSI_FILE("$path-format{SYSTEM_SSI_FILE}", PathOrder.SYSTEM);
    
    /**
     * Used by Spring to load a CommonPathFormat as a bean. Spring was not
     * able to tell that this class has a valueOf factory method which
     * returns type CommonPathFormat used for wiring. Added a
     * getInstance(String) method to wrap valueOf so Spring can retrieve the
     * enum value as a CommonPathFormat object which implement the
     * PathFormat interface.
     * 
     * @param aPathFormatName
     *                the name of the enum constant.
     * @return CommonPathFormat non null object which contains the specified
     *         enum value.
     * @throws IllegalArgumentException
     *                 when aPathFormatName is not a valid enum name.
     */
    public static DefaultPathFormat getInstance(String aPathFormatName) throws IllegalArgumentException {
        return valueOf(aPathFormatName);
    }

    private String pathFormat;

    private PathOrder pathOrder;

    /**
     * Creates a CommonPathFormat using Enum variables defined in this
     * module.
     * 
     * @param aPathFormat
     *                non null String with substitutions marked as ${...}
     * @param aPathOrder
     *                the order used to rank the path.
     */
    private DefaultPathFormat(String aPathFormat, PathOrder aPathOrder) {
        pathFormat = aPathFormat;
        pathOrder = aPathOrder;
    }

    /**
     * Returns a string representation of the ENUM in the following format:
     * NAME[PATH_TO_LOG]
     * 
     * <p>
     * Examples:
     * <ul>
     * <li>DEFAULT[/META-INF/${MODULE_ID}/spring-defaults.properties]
     * <li>OVERRIDE[/META-INF/${RTEID}/${MODULE_ID}/spring-override.properties]
     * </ul>
     */
    @Override
    public String toString() {
        return String.format("%1$s(%2$s,%3$s)", name(), getPathFormatString(), pathOrder.toString());
    }

    /*
     * (non-Javadoc)
     * 
     * @see org.springframework.core.Ordered#getOrder()
     */

    public int getOrder() {
        return pathOrder.getOrder();
    }

    /*
     * (non-Javadoc)
     * 
     * @see com.vanguard.spring.core.config.PathFormat#getPathFormat()
     */

    public String getPathFormatString() {
        return pathFormat;
    }

}

PathFormat.class

/*
 ****************************************************************************
 * 
 * Copyright (c)2008 The Vanguard Group of Investment Companies (VGI)
 * All rights reserved.
 * 
 * This source code is CONFIDENTIAL and PROPRIETARY to VGI. Unauthorized
 * distribution, adaptation, or use may be subject to civil and criminal
 * penalties.
 *
 ****************************************************************************
 Module Description:
 
 $HeadURL: http://prdsvnrepo:8080/svn/tip/ngsa/projects/project-common-components/vanguard-spring-core/tags/1.1-M20160505-01/src/main/java/com/vanguard/spring/core/config/PathFormat.java $
 $LastChangedRevision: 4077 $
 $Author: ujm4 $
 $LastChangedDate: 2009-07-20 11:12:12 -0400 (Mon, 20 Jul 2009) $
 */
package com.vanguard.spring.core.config;

import org.springframework.core.Ordered;

/**
 * Interface used to define a property path location.
 * 
 * @author uw8h
 */
public interface PathFormat extends Ordered {

    /**
     * Method retrieve the format string used to get a property file.
     * Locations can include ${...} representations that will be replaced by
     * {@link CommonPathVariableConstants} or variables found in System properties.
     * 
     * Examples:
     * <ul>
     * <li>/META-INF/${MODULE_ID}/spring-defaults.properties
     * <li>/META-INF/${RTEID}/${MODULE_ID}/spring-override.properties
     * </ul>
     */
    String getPathFormatString();

}

PathOrder.class

/*
 ****************************************************************************
 * 
 * Copyright (c)2008 The Vanguard Group of Investment Companies (VGI)
 * All rights reserved.
 * 
 * This source code is CONFIDENTIAL and PROPRIETARY to VGI. Unauthorized
 * distribution, adaptation, or use may be subject to civil and criminal
 * penalties.
 *
 ****************************************************************************
 Module Description:
 
 $HeadURL: http://prdsvnrepo:8080/svn/tip/ngsa/projects/project-common-components/vanguard-spring-core/tags/1.1-M20160505-01/src/main/java/com/vanguard/spring/core/config/PathOrder.java $
 $LastChangedRevision: 20219 $
 $Author: uw8h $
 $LastChangedDate: 2010-06-16 16:27:59 -0400 (Wed, 16 Jun 2010) $
 */
package com.vanguard.spring.core.config;

/**
 * This enum defines constant order used to sort the paths to read. Those with
 * highest order will be read first. Those that have lowest order will be read
 * last. The first file to have variable wins.
 * 
 * @author uw8h
 */
public enum PathOrder {

    /**
     * Default properties that are provided by each module for optional
     * configurable variables. Applicatations can override these values
     * using any of the other PathOrders.
     * 
     * <p>
     * The DEFAULT order is used by the DEFAULT PathFormat.
     * 
     * @see com.vanguard.spring.core.config.DefaultPathFormat#DEFAULT
     */
    DEFAULT(0),

    /**
     * Properties that shared between different modules deployed in an application.
     * 
     * <p>
     * None of the default path formats used the APPLICATION PathOrder at
     * this time, but Application CM teams can use this order with a
     * CustomPathFormat defined in configuration jar.
     */
    SHARED(1 * CommonPathVariableConstants.PATH_ORDER_INCREMENT),

    /**
     * Properties that apply to a single module within a Run-time
     * Environment (RTE). MODULE_RTE properties take presidence over
     * DEFAULT, and MERGED but can be overritten by SECURITY.
     * 
     * <p>
     * The OVERRIDE order is used by the OVERRIDE PathFormat.
     * 
     * @see com.vanguard.spring.core.config.DefaultPathFormat#OVERRIDE
     */
    OVERRIDE(2 * CommonPathVariableConstants.PATH_ORDER_INCREMENT),

    /**
     * System properties level properties are properties that change
     * from host to host.  These properties include things like
     * ports.
     * 
     * <p>
     * The SYSTEM order is used by the SYSTEM_SSI_FILE PathFormat.
     * 
     * @see com.vanguard.spring.core.config.DefaultPathFormat#SECURE_SSI_FILE
     */
    SYSTEM(3 * CommonPathVariableConstants.PATH_ORDER_INCREMENT),
    
    /**
     * Security properties such as userids and passwords. Security
     * properties override all other properties.
     * 
     * <p>
     * The SECURITY order is used by the SECURE_SSI_FILE PathFormat.
     * 
     * @see com.vanguard.spring.core.config.DefaultPathFormat#SECURE_SSI_FILE
     */
    SECURITY(4 * CommonPathVariableConstants.PATH_ORDER_INCREMENT);

    private int order;

    private PathOrder(int anOrder) {
        order = anOrder;
    }

    /**
     * Returns an integer which defines the order used to list the
     * properties.
     * 
     * @return int defining the order.
     */
    public int getOrder() {
        return order;
    }

    /*
     * (non-Javadoc)
     * 
     * @see java.lang.Enum#toString()
     */

    @Override
    public String toString() {
        return String.format("%1$s:%2$d", name(), order);
    }

}

com.vanguard.spring.core.config.support
DiagnosticPropertyPlaceholderConfigurer.class

/*
 ****************************************************************************
 * 
 * Copyright (c)2009 The Vanguard Group of Investment Companies (VGI)
 * All rights reserved.
 * 
 * This source code is CONFIDENTIAL and PROPRIETARY to VGI. Unauthorized
 * distribution, adaptation, or use may be subject to civil and criminal
 * penalties.
 *
 ****************************************************************************
 Module Description:
 
 $HeadURL: http://prdsvnrepo:8080/svn/tip/ngsa/projects/project-common-components/vanguard-spring-core/tags/1.1-M20160505-01/src/main/java/com/vanguard/spring/core/config/support/DiagnosticPropertyPlaceholderConfigurer.java $
 $LastChangedRevision: 390783 $
 $Author: u16t $
 $LastChangedDate: 2015-06-10 12:18:20 -0400 (Wed, 10 Jun 2015) $
 */
package com.vanguard.spring.core.config.support;

import java.util.Map;
import java.util.Map.Entry;
import java.util.Properties;

import org.apache.commons.lang3.ArrayUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.slf4j.spi.LocationAwareLogger;
import org.springframework.beans.factory.config.PropertyPlaceholderConfigurer;
import org.springframework.core.io.Resource;

/**
 * Extend the standard Spring PropertyPlaceholderConfigurer and provide some
 * additional diagnostic logging.
 */
public class DiagnosticPropertyPlaceholderConfigurer extends PropertyPlaceholderConfigurer {

    private static final Logger LOGGER = LoggerFactory.getLogger(DiagnosticPropertyPlaceholderConfigurer.class);

    Resource[] locations;

    String moduleId;

    /**
     * Pass the resource location along to the superclass and capture it here.
     */
    @Override
    public void setLocation(Resource location) {
        super.setLocation(location);

        this.locations = new Resource[] { location };
    }

    /**
     * Pass the resource locations along to the superclass and capture them here.
     */
    @Override
    public void setLocations(Resource... theLocations) {
        super.setLocations(theLocations);

        this.locations = theLocations;
    }

    /**
     * Pass the module id, to be used for calling the PropertyLocator
     */
    public void setModuleId(String moduleId) {
        this.moduleId = moduleId;
    }

    /**
     * Load the properties for the superclass and into the PropertyLocator's map
     */
    @Override
    protected void loadProperties(Properties properties) {
    	
        if (!ArrayUtils.isEmpty(this.locations)) {
        	
        	Map<String, String> resolvedProperties = PropertyLoader.loadPropertiesFromResources(locations, new PropertyLoaderLoggingStrategy() {
				// At the time the Spring ApplicationContext has begun loading properties, logging configuration should already be loaded so just log as normal
				@Override
				public void logMessage(int logLevel, String message, Object... arguments) {
					switch (logLevel) {
					case LocationAwareLogger.TRACE_INT:
						LOGGER.trace(message, arguments);
						break;
					case LocationAwareLogger.DEBUG_INT:
						LOGGER.debug(message, arguments);
						break;
					case LocationAwareLogger.INFO_INT:
						LOGGER.info(message, arguments);
						break;
					case LocationAwareLogger.WARN_INT:
						LOGGER.warn(message, arguments);
						break;
					case LocationAwareLogger.ERROR_INT:
						LOGGER.error(message, arguments);
						break;						
					default:
						throw new UnsupportedOperationException("Should never get here, missed a slf4j log level - coding error!");
					}					
				}
			});
        	
            for(Map.Entry<String, String> resolvedProperty : resolvedProperties.entrySet()) {
            	properties.setProperty(resolvedProperty.getKey(), resolvedProperty.getValue());                    	
            }        	
        }

        // Cache the value for dynamic lookup
        for (Entry<Object, Object> propertyEntry : properties.entrySet()) {
            String propertyKey = propertyEntry.getKey().toString();
            String propertyValue = propertyEntry.getValue().toString();
            PropertyLocator.setProperty(moduleId, propertyKey, propertyValue);
        }
    }
}

NoOpPropertyLoaderLoggingStrategy.class

/*
 ****************************************************************************
 *
 * Copyright (c)2016 The Vanguard Group of Investment Companies (VGI)
 * All rights reserved.
 *
 * This source code is CONFIDENTIAL and PROPRIETARY to VGI. Unauthorized
 * distribution, adaptation, or use may be subject to civil and criminal
 * penalties.
 *
 ****************************************************************************
 Module Description:

 $HeadURL: http://prdsvnrepo:8080/svn/tip/ngsa/projects/project-common-components/vanguard-spring-core/tags/1.1-M20160505-01/src/main/java/com/vanguard/spring/core/config/support/NoOpPropertyLoaderLoggingStrategy.java $
 $LastChangedRevision: 465070 $
 $Author: u16t $
 $LastChangedDate: 2016-05-03 13:52:40 -0400 (Tue, 03 May 2016) $
*/
package com.vanguard.spring.core.config.support;

class NoOpPropertyLoaderLoggingStrategy implements PropertyLoaderLoggingStrategy {

	static final NoOpPropertyLoaderLoggingStrategy INSTANCE = new NoOpPropertyLoaderLoggingStrategy();
	
	@Override
	public void logMessage(int logLevel, String message, Object... arguments) { }
	
	private NoOpPropertyLoaderLoggingStrategy() {}
}

PathFormatListToResolvedPathUtility.class

/*
 ****************************************************************************
 * 
 * Copyright (c)2008 The Vanguard Group of Investment Companies (VGI)
 * All rights reserved.
 * 
 * This source code is CONFIDENTIAL and PROPRIETARY to VGI. Unauthorized
 * distribution, adaptation, or use may be subject to civil and criminal
 * penalties.
 *
 ****************************************************************************
 Module Description:
 
 $HeadURL: http://prdsvnrepo:8080/svn/tip/ngsa/projects/project-common-components/vanguard-spring-core/tags/1.1-M20160505-01/src/main/java/com/vanguard/spring/core/config/support/PathFormatListToResolvedPathUtility.java $
 $LastChangedRevision: 376795 $
 $Author: uvjl $
 $LastChangedDate: 2015-04-13 13:33:43 -0400 (Mon, 13 Apr 2015) $
 */
package com.vanguard.spring.core.config.support;

import java.util.ArrayList;
import java.util.List;
import java.util.Properties;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.vanguard.spring.core.config.PathFormat;

/**
 * Utility to convert a pathFormatList to a resolvedStringList.
 * 
 * @author uw8h
 */
class PathFormatListToResolvedPathUtility {
    
    private static final Logger logger = LoggerFactory.getLogger(PathFormatListToResolvedPathUtility.class);

    /**
     * Do not allow creation of this class since it is utility class only.
     */
    private PathFormatListToResolvedPathUtility() {
        throw new AssertionError("Illegal attempt to create com.vanguard.spring.core.config.support.PathFormatListToResolvedPathUtility");
    }

    /**
     * Converts a List of PathFormat objects into a list of Strings. The list of Strings will later be passed on to the ResourceArrayEditor to resolve
     * the files.
     * 
     * @return List of String of fully resolved path. If a path cannot be resolved due to missing system property, the path will not be in return
     *         list.
     */
    static List<String> toResolvedPathList(List<? extends PathFormat> pathFormatList, Properties overrideProperties) {
        List<String> resolvedPathList = new ArrayList<String>();
        for (PathFormat pathFormat : pathFormatList) {
            try {
                String resolvedPath = PathFormatUtility.resolvePathFormatString(pathFormat.getPathFormatString(), overrideProperties);
                resolvedPathList.add(resolvedPath);
            } catch (UnresolvablePathFormatException pathException) {
                logger.trace("toResolvedPathList(): {}", pathException.getMessage());
            }
        }
        return resolvedPathList;
    }
}

PathFormatListToResourceArrayConverter.class

/*
 ****************************************************************************
 * 
 * Copyright (c)2008 The Vanguard Group of Investment Companies (VGI)
 * All rights reserved.
 * 
 * This source code is CONFIDENTIAL and PROPRIETARY to VGI. Unauthorized
 * distribution, adaptation, or use may be subject to civil and criminal
 * penalties.
 *
 ****************************************************************************
 Module Description:
 
 $HeadURL: http://prdsvnrepo:8080/svn/tip/ngsa/projects/project-common-components/vanguard-spring-core/tags/1.1-M20160505-01/src/main/java/com/vanguard/spring/core/config/support/PathFormatListToResourceArrayConverter.java $
 $LastChangedRevision: 8665 $
 $Author: u16t $
 $LastChangedDate: 2009-12-14 21:42:20 -0500 (Mon, 14 Dec 2009) $
 */
package com.vanguard.spring.core.config.support;

import java.util.List;
import java.util.Properties;

import org.springframework.core.io.Resource;
import org.springframework.core.io.support.ResourceArrayPropertyEditor;
import org.springframework.util.Assert;

import com.vanguard.spring.core.config.PathFormat;

/**
 * Converts a PathFormatList which contain path formats in variable format
 * $path-format{...} into Resource[].
 * 
 * <p>
 * Example Use:
 * 
 * <pre>
 * PathFormatListToResourceArrayConverter converter = new PathFormatListToResourceArrayConverter(
 * 	pathFormatList);
 * converter.addOverrideProperty(&quot;MODULE_ID&quot;, overrideModuleIdValue);
 * Resource[] resourceArray = converter.toResourceArray();
 * </pre>
 * 
 * @author uw8h
 */
class PathFormatListToResourceArrayConverter {

    private final List<? extends PathFormat> pathFormatList;

    private final ResourceArrayPropertyEditor editor;

    private final Properties overrideProperties;

    /**
     * Constructor using list.
     * 
     * @param anEditor
     *                editor to use to convert strings to resource array.
     * @param anPathFormatList
     *                a list of path formats. Non null non empty list.
     */
    PathFormatListToResourceArrayConverter(List<? extends PathFormat> anPathFormatList) {
        super();
        Assert.notEmpty(anPathFormatList, "pathFormatLists can not be null or empty");
        editor = new ResourceArrayPropertyEditor();
        overrideProperties = new Properties();
        pathFormatList = anPathFormatList;
    }

    /**
     * Adds a property value that can be used to replace a variable in a
     * pathFormat String.
     * 
     * @param name
     *                the name of the variable
     * @param value
     *                the values of the variable
     */
    void addOverrideProperty(String name, String value) {
        overrideProperties.setProperty(name, value);
    }

    /**
     * Converts the List of pathFormats to a Resource[]
     * 
     * @return Returns a non null Resource[] array which contains resolved
     *         resources.
     */
    Resource[] toResourceArray() {
        List<String> resolvedPathList = PathFormatListToResolvedPathUtility.toResolvedPathList(pathFormatList, overrideProperties);
        editor.setValue(resolvedPathList);
        return (Resource[]) editor.getValue();
    }

}

PathFormatUtility.class

/*
 ****************************************************************************
 * 
 * Copyright (c)2008 The Vanguard Group of Investment Companies (VGI)
 * All rights reserved.
 * 
 * This source code is CONFIDENTIAL and PROPRIETARY to VGI. Unauthorized
 * distribution, adaptation, or use may be subject to civil and criminal
 * penalties.
 *
 ****************************************************************************
 Module Description:
 
 $HeadURL: http://prdsvnrepo:8080/svn/tip/ngsa/projects/project-common-components/vanguard-spring-core/tags/1.1-M20160505-01/src/main/java/com/vanguard/spring/core/config/support/PathFormatUtility.java $
 $LastChangedRevision: 376795 $
 $Author: uvjl $
 $LastChangedDate: 2015-04-13 13:33:43 -0400 (Mon, 13 Apr 2015) $
 */
package com.vanguard.spring.core.config.support;

import java.util.Properties;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.util.StringUtils;

import com.vanguard.spring.core.config.CommonPathVariableConstants;

/**
 * Utility to resolve a path format variables into String representation of path. This utility mimics the
 * org.springframework.util.SystemPropertyUtils.
 * 
 * <p>
 * Utility will resolve ${...} with the value of variable from an override property or from system property.
 * 
 * <p>
 * Items that are different from org.springframework.util.SystemPropertyUtils
 * <ul>
 * <li>Does allow environment variable replacement.</li>
 * <li>Allows override property replacement.</li>
 * <li>Does not accept blank variable values</li>
 * <li>Does not write an Error to System.out.err if variable value not found.</li>
 * <li>Throws exection that user can handle if value not found.</li>
 * </ul>
 * 
 * @author uw8h
 * 
 */
class PathFormatUtility {

    private static final Logger logger = LoggerFactory.getLogger(PathFormatUtility.class);

    /**
     * Do not allow creation of this class since it is utility class only.
     */
    private PathFormatUtility() {
        throw new AssertionError("Illegal attempt to create com.vanguard.spring.core.config.support.PathFormatUtility");
    }

    /**
     * Returns a String which is aPathFormat with ${propertyName} replaced by the corresponding property value. Method checks the
     * aOverridePathProperties for the value first, if it is not there method will continue use value found in System properties.
     * 
     * @param aPathFormat
     *            a String represtentation of path which contains ${propertyName} representation of the path.
     * @param aOverridePathProperties
     * @return a new String containing aPathFormat with ${propertyName} replaced.
     * @throws UnresolvablePathFormatException
     *             if a value cannot be found to match the ${propertyName} placeholder.
     */
    static final String resolvePathFormatString(String aPathFormat, Properties aOverridePathProperties) throws UnresolvablePathFormatException {
        StringBuilder sb = new StringBuilder(aPathFormat);
        try {
            int startIndex = sb.indexOf(CommonPathVariableConstants.PLACEHOLDER_PREFIX);
            while (startIndex != -1) {
                final int endIndex = sb.indexOf(CommonPathVariableConstants.PLACEHOLDER_SUFFIX, startIndex
                        + CommonPathVariableConstants.PLACEHOLDER_PREFIX.length());
                if (endIndex != -1) {
                    String key = sb.substring(startIndex + CommonPathVariableConstants.PLACEHOLDER_PREFIX.length(), endIndex);
                    String replaceValue = getValue(key, aOverridePathProperties);
                    sb.replace(startIndex, endIndex + CommonPathVariableConstants.PLACEHOLDER_SUFFIX.length(), replaceValue);
                    startIndex = sb.indexOf(CommonPathVariableConstants.PLACEHOLDER_PREFIX, startIndex + replaceValue.length());
                }
            }
        } catch (UnresolvablePathFormatException ex) {
            ex.setPathFormat(aPathFormat);
            throw ex;
        }
        logger.trace("resolvePathFormatString(): Resolved pathFormat [{}] to [{}]", aPathFormat, sb.toString());
        return sb.toString();

    }

    /**
     * Determine the value of a variable based on the key.
     * 
     * @param aKey
     *            name of the variable to look up.
     * @param aOverrideProperties
     *            variable value to use. (Used for ModuleId)
     * @return String of value of variable
     * @throws UnresolvablePathFormatException
     *             if value of variable could not be resolved.
     */
    private static String getValue(String aKey, Properties aOverrideProperties) throws UnresolvablePathFormatException {
        String value = null;
        String foundIn = "NotFound";

        if (aOverrideProperties != null) {
            value = aOverrideProperties.getProperty(aKey);
            foundIn = "methodArgumentProperties";
        }

        if (!StringUtils.hasText(value)) {
            value = System.getProperty(aKey);
            foundIn = "System.getProperty()";
        }

        if (!StringUtils.hasText(value)) {
            UnresolvablePathFormatException ex = new UnresolvablePathFormatException();
            ex.setVariableKey(aKey);
            throw ex;
        }
        
        logger.trace("getValue(): Resolved variable [{}] with value [{}] from [{}]", aKey, value, foundIn);
        
        return value;
    }

}

PropertyLoader.class

/*
 ****************************************************************************
 *
 * Copyright (c)2015 The Vanguard Group of Investment Companies (VGI)
 * All rights reserved.
 *
 * This source code is CONFIDENTIAL and PROPRIETARY to VGI. Unauthorized
 * distribution, adaptation, or use may be subject to civil and criminal
 * penalties.
 *
 ****************************************************************************
 Module Description:

 $HeadURL: http://prdsvnrepo:8080/svn/tip/ngsa/projects/project-common-components/vanguard-spring-core/tags/1.1-M20160505-01/src/main/java/com/vanguard/spring/core/config/support/PropertyLoader.java $
 $LastChangedRevision: 465070 $
 $Author: u16t $
 $LastChangedDate: 2016-05-03 13:52:40 -0400 (Tue, 03 May 2016) $
*/
package com.vanguard.spring.core.config.support;

import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.apache.commons.collections.Predicate;
import org.apache.commons.collections.functors.AnyPredicate;
import org.apache.commons.io.IOUtils;
import org.apache.commons.lang3.ArrayUtils;
import org.apache.commons.lang3.ObjectUtils;
import org.apache.commons.lang3.StringUtils;
import org.slf4j.spi.LocationAwareLogger;
import org.springframework.core.io.Resource;
import org.springframework.util.DefaultPropertiesPersister;
import org.springframework.util.PropertiesPersister;

import com.vanguard.corp.vault.password.CredentialsRetriever;
import com.vanguard.corp.vault.password.ICredentialsRetriever;
import com.vanguard.corp.vault.password.exceptions.VaultException;
import com.vanguard.predicates.string.StandaloneStringPredicate;

/**
 * Responsible for loading properties from resources, needed for common logic/functions between the DiagnosticPropertyPlaceholderConfigurer and PropertyLocator.
 * 
 * @author u16t
 */
class PropertyLoader {
	
    static final String VAULTBEGIN = "IDVAULT;";

    static final String VAULTEND = ";IDVAULTEND";
    
    static final Pattern VAULT_PATTERN = Pattern.compile(VAULTBEGIN + "(.*?)" + VAULTEND);
    
    static final String XML_FILE_EXTENSION = ".xml";
    
    static final String RESOURCE_NOT_FOUND_EXCEPTION_MESSAGE = "Could not load properties from '{}': {}";
    
    static final String VAULT_EXCEPTION_MESSAGE = "SSI Vault Query [{}] loaded from [{}] could not be resolved";
            
    static final String VAULT_PROPERTY_MESSAGE = "Secure property [{}] is loaded from [{}]";
    
    static final String VAULT_BLANK_PROPERTY_MESSAGE = "Secure property [{}] loaded from [{}] is an empty String";
    
    static final String LOG_PROPERTY_MESSAGE = "Property [{} = {}] is loaded from [{}]";
    
    static final String LOG_BLANK_PROPERTY_MESSAGE = "Property [{}] loaded from [{}] is an empty String";
    
    /* vault.* properties used for Pivotal CF and similar use cases where ID Vault can't be used */
    static final String[] SENSITIVE_PROPERTY_NAMES = new String[] { "SSN", "EIN", "TIN", "PASSWORD", "PWD", "PASSWD", "PIN", "VAULT", "USER_ID", "USERID"};
    static final String SENSITIVE_PROPERTY_DELIMITERS = " _-.";
    
    static final String LOG_SENSITIVE_PROPERTY_MESSAGE = "Property [{}] is loaded from [{}]";
    
	static Map<String, String> loadPropertiesFromResources(Resource[] resources, PropertyLoaderLoggingStrategy loggingStrategy) {
		
		Map<String, String> resolvedProperties = new LinkedHashMap<String, String>();
		
		if(ArrayUtils.isEmpty(resources)) {
			return resolvedProperties;
		}
				
		for(Resource resource : resources) {
	        InputStream is = null;
	        PropertiesPersister propertiesPersister = new DefaultPropertiesPersister();
	        try {
	            Properties tempProperties = new Properties();
	            
	            is = resource.getInputStream();
	            if (resource.getFilename().endsWith(XML_FILE_EXTENSION)) {
	                propertiesPersister.loadFromXml(tempProperties, is);
	            } else {
	                propertiesPersister.load(tempProperties, is);
	            }
	            
	            resolvedProperties.putAll(resolveProperties(tempProperties, resource.getURL().toString(), loggingStrategy));
	        }
	        catch(IOException ex) {
	        	loggingStrategy.logMessage(LocationAwareLogger.WARN_INT, RESOURCE_NOT_FOUND_EXCEPTION_MESSAGE, resource, ex.getMessage());
	        } 
	        finally {
	            IOUtils.closeQuietly(is);
	        }
		}
		
		return resolvedProperties;
	}
    
    /**
     * Resolves properties, e.g. through ID Vault replacement, and log them as appropriate for debugging purposes
     * 
     * @param properties
     * @return
     */
    static Map<String, String> resolveProperties(Map<? extends Object, ? extends Object> propertiesToLoad, String propertySource, PropertyLoaderLoggingStrategy loggingStrategy) {
    	Map<String, String> resolvedProperties = new LinkedHashMap<String, String>();
    	
		List<Predicate> sensitivePropertyPredicates = new ArrayList<Predicate>();
		for(String sensitivePropertyName : SENSITIVE_PROPERTY_NAMES) {
			sensitivePropertyPredicates.add(new StandaloneStringPredicate(sensitivePropertyName, SENSITIVE_PROPERTY_DELIMITERS));
		}		
		Predicate sensitivePropertyPredicate = AnyPredicate.getInstance(sensitivePropertyPredicates);
    	
		for (Object tempPropertyKeyObject : propertiesToLoad.keySet()) {
            String tempPropertyKey = ObjectUtils.toString(tempPropertyKeyObject);
            String tempPropertyVal = ObjectUtils.toString(propertiesToLoad.get(tempPropertyKey));
            if (tempPropertyVal.contains(VAULTBEGIN)) {
                Matcher matcher = VAULT_PATTERN.matcher(tempPropertyVal);
                while (matcher.find()) {
                    String ssiKey = matcher.group(1);
                    String ssiValue = resolveSSIValueFromVault(ssiKey, propertySource, loggingStrategy);
                    if (ssiValue != null) {
                        tempPropertyVal = tempPropertyVal.replace(VAULTBEGIN + ssiKey + VAULTEND, ssiValue);
                        loggingStrategy.logMessage(LocationAwareLogger.INFO_INT, VAULT_PROPERTY_MESSAGE, tempPropertyKey, propertySource);
                    } else {
                        tempPropertyVal = tempPropertyVal.replace(VAULTBEGIN + ssiKey + VAULTEND, "");
                        loggingStrategy.logMessage(LocationAwareLogger.WARN_INT, VAULT_BLANK_PROPERTY_MESSAGE, tempPropertyKey, propertySource);
                    }
                }
            } else {
            	if(StringUtils.isBlank(tempPropertyVal)) {
            		loggingStrategy.logMessage(LocationAwareLogger.WARN_INT, LOG_BLANK_PROPERTY_MESSAGE, tempPropertyKey, propertySource);
            	}
            	else if(sensitivePropertyPredicate.evaluate(tempPropertyKey)) {
            		loggingStrategy.logMessage(LocationAwareLogger.INFO_INT, LOG_SENSITIVE_PROPERTY_MESSAGE, tempPropertyKey, propertySource);
            	}
            	else {
            		loggingStrategy.logMessage(LocationAwareLogger.INFO_INT, LOG_PROPERTY_MESSAGE, tempPropertyKey, tempPropertyVal, propertySource);
            	}
            }
            resolvedProperties.put(tempPropertyKey, tempPropertyVal);
		}
		
		return resolvedProperties;
    }
    
    static String resolveSSIValueFromVault(String ssiKey, String propertySource, PropertyLoaderLoggingStrategy loggingStrategy) {
    	ICredentialsRetriever credentialsRetriever = new CredentialsRetriever();
        try {
            return credentialsRetriever.getCredentials(ssiKey);
        } catch (VaultException e) {
        	loggingStrategy.logMessage(LocationAwareLogger.ERROR_INT, VAULT_EXCEPTION_MESSAGE, ssiKey, propertySource, e);
            return null;
        }
    } 
}

PropertyLoaderLoggingStrategy.class

/*
 ****************************************************************************
 *
 * Copyright (c)2015 The Vanguard Group of Investment Companies (VGI)
 * All rights reserved.
 *
 * This source code is CONFIDENTIAL and PROPRIETARY to VGI. Unauthorized
 * distribution, adaptation, or use may be subject to civil and criminal
 * penalties.
 *
 ****************************************************************************
 Module Description:

 $HeadURL: http://prdsvnrepo:8080/svn/tip/ngsa/projects/project-common-components/vanguard-spring-core/tags/1.1-M20160505-01/src/main/java/com/vanguard/spring/core/config/support/PropertyLoaderLoggingStrategy.java $
 $LastChangedRevision: 389662 $
 $Author: u16t $
 $LastChangedDate: 2015-06-04 21:42:41 -0400 (Thu, 04 Jun 2015) $
*/
package com.vanguard.spring.core.config.support;

interface PropertyLoaderLoggingStrategy {

	public void logMessage(int logLevel, String message, Object...arguments);	
}

PropertyLocator.class

/*
 ****************************************************************************
 * 
 * Copyright (c)2009 The Vanguard Group of Investment Companies (VGI)
 * All rights reserved.
 * 
 * This source code is CONFIDENTIAL and PROPRIETARY to VGI. Unauthorized
 * distribution, adaptation, or use may be subject to civil and criminal
 * penalties.
 *
 ****************************************************************************
 Module Description:
 
 $HeadURL$
 $LastChangedRevision$
 $Author$
 $LastChangedDate$
 */
package com.vanguard.spring.core.config.support;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import java.util.concurrent.ConcurrentHashMap;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.apache.commons.lang3.CharUtils;
import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.slf4j.helpers.MessageFormatter;
import org.slf4j.spi.LocationAwareLogger;
import org.springframework.core.io.Resource;
import org.springframework.core.io.support.PathMatchingResourcePatternResolver;
import org.springframework.core.io.support.ResourcePatternResolver;

/**
 * Enables dynamic property lookup of property values loaded through Vanguard Spring Core.  
 * 
 * @author u16t
 */
public final class PropertyLocator {

	private static final Pattern PLACEHOLDER_PATTERN = Pattern.compile("\\Q$\\E.*\\{.*\\}.*");

    private static final Properties SYSTEM_PROPERTIES = System.getProperties();
    
    private static final Map<String, String> ENV_PROPERTIES = System.getenv();

	private static final String SPRING_PROFILES_ACTIVE = "spring.profiles.active";

	private static final String APPLICATION = "application";
	
	private static final String DOT_PROPERTIES = ".properties";
	
	private static final String TEST_RESOURCES_DIR = "file:src/test/resources/";
	
	private static final Logger LOGGER = LoggerFactory.getLogger(PropertyLocator.class);
	
	private static final String JVM_SYSTEM_PROPERTIES = "JVM/system properties";
	
	private static final String ENVIRONMENT_VARIABLES = "environment variables";
	
	// Must stay below static variables that it depends on during instantiation
    private static final PropertyLocator INSTANCE = new PropertyLocator();    
    static {
    	preloadProperties();  // depends on the PropertyLocator instance to have been successfully instantiated, thus in a static initializer instead of the constructor
    }
	
    // Use the default capacity and load factor, expect concurrent updates to be approximately at most 2 threads (i.e. always total refresh, perhaps from JMX)
    // Updates/refresh capability will be added upon need by project teams
    private final Map<String, String> propertyMap = new ConcurrentHashMap<String, String>(16, 0.75f, 2);
    
    /**
     * Retrieve a property value loaded through Vanguard Spring Core, falling back to Spring's Environment abstraction (in that case, moduleId is ignored).
     * 
     * @param moduleId The module id this property is registered with 
     * @param propertyName The property name to look up
     * @return String The corresponding property value
     * @throws PropertyNotFoundException If the property cannot be found
     */
    public static String getStringProperty(String moduleId, String propertyName) throws PropertyNotFoundException {
        
    	String propertyValue = resolvePropertyName(moduleId, propertyName);    	
        Matcher matcher = PLACEHOLDER_PATTERN.matcher(propertyValue);
        
        if (matcher.find()){
        	propertyValue = resolveNestedPlaceholders(propertyValue);
        }
        
       	return propertyValue;
    }
    
    private static String resolvePropertyName(String moduleId, String propertyName) throws PropertyNotFoundException {
        
        // NGA-2275: Let JVM/env vars win over properties to match PropertyPlaceholderConfigurer systemPropertiesMode enabling and follow 12-factor / Spring Boot
        // Even though we have already loaded JVM properties/environment variables earlier, we need to check again here
        // since not all properties are set at the time this class loads, e.g. JUnit's @BeforeClass setting the RTEID value.
        String systemPropertyValue = System.getProperty(propertyName);
        if (systemPropertyValue != null) {
            return PropertyLoader.resolveProperties(Collections.singletonMap(propertyName, systemPropertyValue), JVM_SYSTEM_PROPERTIES, NoOpPropertyLoaderLoggingStrategy.INSTANCE).get(propertyName);
        }
        
        String environmentVariableValue = System.getenv(propertyName);
        if (environmentVariableValue != null) {
        	return PropertyLoader.resolveProperties(Collections.singletonMap(propertyName, environmentVariableValue), ENVIRONMENT_VARIABLES, NoOpPropertyLoaderLoggingStrategy.INSTANCE).get(propertyName);
        }
    	
        String propertyKey = createPropertyKey(moduleId, propertyName);
        Map<String, String> propertyMap = getInstance().getPropertyMap();
        
        if (propertyMap.containsKey(propertyKey)) {
            return propertyMap.get(propertyKey);
        }
        
        throw new PropertyNotFoundException(moduleId, propertyName);
    }
    
    private static String resolveNestedPlaceholders(String placeholder){

    	String tempPlaceholder = buildResolvedPlaceholder(placeholder);
        Matcher matcher = PLACEHOLDER_PATTERN.matcher(tempPlaceholder);
    	
    	if (matcher.find()){
    		tempPlaceholder = resolveNestedPlaceholders(tempPlaceholder);
    		return tempPlaceholder;
    	}else{
    		return tempPlaceholder;
    	}    	
    }
    
    private static String buildResolvedPlaceholder(String placeholder){
    	String propName = getLastPropNameFromPlaceholder(placeholder);
    	String propModuleId = getLastModuleIdFromPlaceholder(placeholder);
    	String resolvedPropComponent = resolvePropertyName(propModuleId, propName);
    	return replacePlaceholderWithNewValue(placeholder, resolvedPropComponent);
    }
    
    //This method finds the property name from the last and most deeply nested placeholder.
    //It does not matter if it is a system property or one that has been stored in the property hash map.
    private static String getLastPropNameFromPlaceholder(String placeholder){    	
    	return placeholder.substring((placeholder.lastIndexOf("{")+1), placeholder.indexOf("}", placeholder.lastIndexOf("{")));
    }
    
    //This method finds the module id from the last and most deeply nested placeholder.
    //As a result, users can create nested property placeholder definitions for which each level of nesting
    //can refer to any module id.
    private static String getLastModuleIdFromPlaceholder(String placeholder){    	
    	return placeholder.substring((placeholder.lastIndexOf("$")+1), (placeholder.indexOf("{", placeholder.lastIndexOf("$"))-1));
    }
    
   private static String replacePlaceholderWithNewValue(String placeholder, String resolvedPropComponent){
    	
    	String firstStr = placeholder.substring(0, placeholder.lastIndexOf("$"));
    	String lastStr = "";
    	
    	//The following if statement protects against index out of bounds errors on the substring.
    	//If true, there are hard coded characters after the placeholder that must be returned.
    	if (placeholder.lastIndexOf("}") != placeholder.length()) {
    		lastStr = placeholder.substring((placeholder.indexOf("}", placeholder.lastIndexOf("{"))+1), placeholder.length());
    	}
     	return firstStr + resolvedPropComponent + lastStr;
    }

    /**
     * Retrieve a property value loaded through Vanguard Spring Core, falling back to System properties (in that case, moduleId is ignored). 
     * Returns an Integer object.
     * 
     * @param moduleId The module id this property is registered with 
     * @param propertyName The property name to look up
     * @return Integer The corresponding property value as an Integer
     * @throws PropertyNotFoundException If the property cannot be found
     * @throws NumberFormatException If the property value cannot be converted to Integer
     */
    public static Integer getIntegerProperty(String moduleId, String propertyName) throws PropertyNotFoundException, NumberFormatException {
        return Integer.valueOf(getStringProperty(moduleId, propertyName));
    }

    /**
     * Retrieve a property value loaded through Vanguard Spring Core, falling back to System properties (in that case, moduleId is ignored). 
     * Returns a Long object.
     * 
     * @param moduleId The module id this property is registered with 
     * @param propertyName The property name to look up
     * @return Long The corresponding property value as a Long
     * @throws PropertyNotFoundException If the property cannot be found
     * @throws NumberFormatException If the property value cannot be converted to Long
     */
    public static Long getLongProperty(String moduleId, String propertyName) throws PropertyNotFoundException, NumberFormatException {
        return Long.valueOf(getStringProperty(moduleId, propertyName));
    }

    /**
     * Retrieve a property value loaded through Vanguard Spring Core, falling back to System properties (in that case, moduleId is ignored). 
     * Returns an Short object.
     * 
     * @param moduleId The module id this property is registered with 
     * @param propertyName The property name to look up
     * @return Short The corresponding property value as a Short
     * @throws PropertyNotFoundException If the property cannot be found
     * @throws NumberFormatException If the property value cannot be converted to Short
     */
    public static Short getShortProperty(String moduleId, String propertyName) throws PropertyNotFoundException, NumberFormatException {
        return Short.valueOf(getStringProperty(moduleId, propertyName));
    }

    /**
     * Retrieve a property value loaded through Vanguard Spring Core, falling back to System properties (in that case, moduleId is ignored). 
     * Returns a Byte object.
     * 
     * @param moduleId The module id this property is registered with 
     * @param propertyName The property name to look up
     * @return Byte The corresponding property value as a Byte
     * @throws PropertyNotFoundException If the property cannot be found
     * @throws NumberFormatException If the property value cannot be converted to Byte
     */
    public static Byte getByteProperty(String moduleId, String propertyName) throws PropertyNotFoundException, NumberFormatException {
        return Byte.valueOf(getStringProperty(moduleId, propertyName));
    }

    /**
     * Retrieve a property value loaded through Vanguard Spring Core, falling back to System properties (in that case, moduleId is ignored). 
     * Returns a Double object.
     * 
     * @param moduleId The module id this property is registered with 
     * @param propertyName The property name to look up
     * @return Double The corresponding property value as a Double
     * @throws PropertyNotFoundException If the property cannot be found
     * @throws NumberFormatException If the property value cannot be converted to Double
     */
    public static Double getDoubleProperty(String moduleId, String propertyName) throws PropertyNotFoundException, NumberFormatException {
        return Double.valueOf(getStringProperty(moduleId, propertyName));
    }

    /**
     * Retrieve a property value loaded through Vanguard Spring Core, falling back to System properties (in that case, moduleId is ignored). 
     * Returns a Float object.
     * 
     * @param moduleId The module id this property is registered with 
     * @param propertyName The property name to look up
     * @return Float The corresponding property value as a Float
     * @throws PropertyNotFoundException If the property cannot be found
     * @throws NumberFormatException If the property value cannot be converted to Float
     */
    public static Float getFloatProperty(String moduleId, String propertyName) throws PropertyNotFoundException, NumberFormatException {
        return Float.valueOf(getStringProperty(moduleId, propertyName));
    }

    /**
     * Retrieve a property value loaded through Vanguard Spring Core, falling back to System properties (in that case, moduleId is ignored). 
     * Returns a Boolean object.
     * 
     * @param moduleId The module id this property is registered with 
     * @param propertyName The property name to look up
     * @return Boolean The corresponding property value as a Boolean
     * @throws PropertyNotFoundException If the property cannot be found
     */
    public static Boolean getBooleanProperty(String moduleId, String propertyName) throws PropertyNotFoundException {
        return Boolean.valueOf(getStringProperty(moduleId, propertyName));
    }

    /**
     * Retrieve a property value loaded through Vanguard Spring Core, falling back to System properties (in that case, moduleId is ignored). 
     * Returns a Character object.
     * 
     * @param moduleId The module id this property is registered with 
     * @param propertyName The property name to look up
     * @return Character The corresponding property value as a Character, as defined by CharUtils.toChar(String)
     * @throws PropertyNotFoundException If the property cannot be found
     */
    public static Character getCharacterProperty(String moduleId, String propertyName) throws PropertyNotFoundException {
        return CharUtils.toChar(getStringProperty(moduleId, propertyName), ' ');
    }

    protected static void setProperty(String moduleId, String propertyName, String propertyValue) {
        getInstance().getPropertyMap().put(createPropertyKey(moduleId, propertyName), propertyValue);
    }
    
    /**
     * This method is called by the Spring ApplicationContext at load-time, as a factory-method for the bean definition.
     */ 
    static PropertyLocator getInstance() {
        return INSTANCE;
    }
    
    // For testing purposes since the static initializer will load properties during initialization, causing carryover to the PropertyLocatorTest
    static void clearPropertyMap() {
    	getInstance().getPropertyMap().clear();
    }
    
	private Map<String, String> getPropertyMap() {
        return propertyMap;
    }
	
    static String createPropertyKey(String... values) {
        return StringUtils.join(values);
    }	
	
	// For a Spring Boot application (such as the NGA pilot), load the application.properties resources, environment variables, and system properties in the Spring Boot
    // priority order (http://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#boot-features-external-config), where higher priority is loaded later to override
    // lower priority values.  These properties are all loaded in the map without any logging, since the values are needed for logging / before ApplicationContext initialization.    
    static void preloadProperties() {
    	
		// Since we are preloading properties such as logging configuration, we want to defer logging so we just capture messages in a buffer for later
    	final List<BufferedLogMessage> bufferedLogMessages = new ArrayList<BufferedLogMessage>();    	
        PropertyLoaderLoggingStrategy deferredLoggingStrategy = new PropertyLoaderLoggingStrategy() {
    		@Override
    		public void logMessage(int logLevel, String message, Object... arguments) {    			
    			bufferedLogMessages.add(new BufferedLogMessage(logLevel, message, arguments));				
    		}
    	};
    	
    	loadPropertiesFromResources(deferredLoggingStrategy);    	
    	loadPropertiesFromEnvironmentVariables(deferredLoggingStrategy);    	
    	loadPropertiesFromSystemProperties(deferredLoggingStrategy);    	
    	flushBufferedLogMessages(bufferedLogMessages);
    }

	static void loadPropertiesFromResources(PropertyLoaderLoggingStrategy deferredLoggingStrategy) {		
    	Map<String, String> properties = PropertyLoader.loadPropertiesFromResources(getSpringBootResourcesToLoad(), deferredLoggingStrategy);
    	getInstance().getPropertyMap().putAll(properties);
	}
    
    static Resource[] getSpringBootResourcesToLoad() {
    	List<Resource> springBootPropertiesResources = new ArrayList<Resource>();
    	
    	// Cannot use ResourceArrayPropertyEditor since that loads Environment > Log4jLogger > Log.wouldBeLogged > LoggerCacheManager and loads SLogManager too early
    	ResourcePatternResolver resourcePatternResolver = new PathMatchingResourcePatternResolver();
    	
    	// Test resources aren't normally loaded, but we want to include them for easing development (e.g. for logging configuration in a src/test/resources/application.properties file)
    	Resource testApplicationProperties = resourcePatternResolver.getResource(TEST_RESOURCES_DIR + APPLICATION + DOT_PROPERTIES);
    	springBootPropertiesResources.add(testApplicationProperties);
    	
    	Resource applicationProperties = resourcePatternResolver.getResource(APPLICATION + DOT_PROPERTIES);    	
    	springBootPropertiesResources.add(applicationProperties);
    	    	
    	String activeProfiles = StringUtils.EMPTY;   	
    	if(SYSTEM_PROPERTIES.containsKey(SPRING_PROFILES_ACTIVE)) {
    		activeProfiles = SYSTEM_PROPERTIES.getProperty(SPRING_PROFILES_ACTIVE);
    	}
    	else if(ENV_PROPERTIES.containsKey(SPRING_PROFILES_ACTIVE)) {
    		activeProfiles = ENV_PROPERTIES.get(SPRING_PROFILES_ACTIVE);
    	}
    	
    	if(StringUtils.isNotBlank(activeProfiles)) {
        	String[] profiles = org.springframework.util.StringUtils.commaDelimitedListToStringArray(activeProfiles);    		
        	for(String profile : profiles) {
        		springBootPropertiesResources.add(resourcePatternResolver.getResource(String.format("%s%s-%s%s", TEST_RESOURCES_DIR, APPLICATION, profile, DOT_PROPERTIES)));
        	}
        	for(String profile : profiles) {
        		springBootPropertiesResources.add(resourcePatternResolver.getResource(String.format("%s-%s%s", APPLICATION, profile, DOT_PROPERTIES)));
        	}        	
    	}
     	
		return springBootPropertiesResources.toArray(new Resource[springBootPropertiesResources.size()]);
	}	
	
	static void loadPropertiesFromEnvironmentVariables(PropertyLoaderLoggingStrategy deferredLoggingStrategy) {
		getInstance().getPropertyMap().putAll(PropertyLoader.resolveProperties(ENV_PROPERTIES, ENVIRONMENT_VARIABLES, deferredLoggingStrategy));
	}
	
	static void loadPropertiesFromSystemProperties(PropertyLoaderLoggingStrategy deferredLoggingStrategy) {
		getInstance().getPropertyMap().putAll(PropertyLoader.resolveProperties(SYSTEM_PROPERTIES, JVM_SYSTEM_PROPERTIES, deferredLoggingStrategy));
	}
	
	/**
	 * Flush the buffer of deferred log messages, since at this point the map is loaded with the logging configuration required to do so. 
	 */
	static void flushBufferedLogMessages(List<BufferedLogMessage> bufferedLogMessages) {
		
		for(BufferedLogMessage bufferedLogMessage : bufferedLogMessages) {			
			switch(bufferedLogMessage.getLogLevel()) {
				case LocationAwareLogger.TRACE_INT:
					LOGGER.trace(bufferedLogMessage.getMessage(), bufferedLogMessage.getArguments());
					break;
				case LocationAwareLogger.DEBUG_INT:
					LOGGER.debug(bufferedLogMessage.getMessage(), bufferedLogMessage.getArguments());
					break;
				case LocationAwareLogger.INFO_INT:
					LOGGER.info(bufferedLogMessage.getMessage(), bufferedLogMessage.getArguments());
					break;
				case LocationAwareLogger.WARN_INT:
					LOGGER.warn(bufferedLogMessage.getMessage(), bufferedLogMessage.getArguments());
					break;
				case LocationAwareLogger.ERROR_INT:
					LOGGER.error(bufferedLogMessage.getMessage(), bufferedLogMessage.getArguments());
					break;						
				default:
					throw new UnsupportedOperationException("Should never get here, missed a slf4j log level - coding error!");
			}
		}
	}
	
	static class BufferedLogMessage {
		
		private int logLevel;
		
		private String message;
		
		private Object[] arguments;
		
		BufferedLogMessage(int logLevel, String message, Object... arguments) {
			this.logLevel = logLevel;
			this.message = message;
			this.arguments = arguments;
		}

		public int getLogLevel() {
			return logLevel;
		}

		public String getMessage() {
			return message;
		}

		public Object[] getArguments() {
			return Arrays.copyOf(arguments, arguments.length);
		}

		// Enables easier debugging to see the messages to be flushed
		@Override
		public String toString() {
			return MessageFormatter.arrayFormat(message, arguments).getMessage();
		}
	}
}

PropertyNotFoundException.class

/*
 ****************************************************************************
 * 
 * Copyright (c)2009 The Vanguard Group of Investment Companies (VGI)
 * All rights reserved.
 * 
 * This source code is CONFIDENTIAL and PROPRIETARY to VGI. Unauthorized
 * distribution, adaptation, or use may be subject to civil and criminal
 * penalties.
 *
 ****************************************************************************
 Module Description:
 
 $HeadURL: http://prdsvnrepo:8080/svn/tip/ngsa/projects/project-common-components/vanguard-spring-core/tags/1.1-M20160505-01/src/main/java/com/vanguard/spring/core/config/support/PropertyNotFoundException.java $
 $LastChangedRevision: 390783 $
 $Author: u16t $
 $LastChangedDate: 2015-06-10 12:18:20 -0400 (Wed, 10 Jun 2015) $
 */
package com.vanguard.spring.core.config.support;

import org.apache.commons.lang3.StringUtils;

/**
 * Exception thrown when a property cannot be found
 * 
 * @author u16t
 */
public class PropertyNotFoundException extends RuntimeException {

    private static final long serialVersionUID = -435845063953996862L;

    private static final String ERROR_NO_PROPERTY_FOUND = "No property found for module [%1$s] and property name [%2$s]. ";

    private String moduleId = StringUtils.EMPTY;

    private String propertyName = StringUtils.EMPTY;

    public PropertyNotFoundException(String moduleId, String propertyName) {
        this.moduleId = moduleId;
        this.propertyName = propertyName;
    }

    @Override
    public String toString() {
        return String.format(ERROR_NO_PROPERTY_FOUND, moduleId, propertyName);
    }
}

PropertyPlaceholderConfigurerFactory.class

/*
 ****************************************************************************
 * 
 * Copyright (c)2008 The Vanguard Group of Investment Companies (VGI)
 * All rights reserved.
 * 
 * This source code is CONFIDENTIAL and PROPRIETARY to VGI. Unauthorized
 * distribution, adaptation, or use may be subject to civil and criminal
 * penalties.
 *
 ****************************************************************************
 Module Description:
 
 $HeadURL: http://prdsvnrepo:8080/svn/tip/ngsa/projects/project-common-components/vanguard-spring-core/tags/1.1-M20160505-01/src/main/java/com/vanguard/spring/core/config/support/PropertyPlaceholderConfigurerFactory.java $
 $LastChangedRevision: 465070 $
 $Author: u16t $
 $LastChangedDate: 2016-05-03 13:52:40 -0400 (Tue, 03 May 2016) $
 */
package com.vanguard.spring.core.config.support;

import java.util.Collections;
import java.util.Comparator;
import java.util.Formatter;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.config.PropertyPlaceholderConfigurer;
import org.springframework.core.OrderComparator;
import org.springframework.core.io.Resource;
import org.springframework.util.Assert;

import com.vanguard.spring.core.config.CommonPathVariableConstants;
import com.vanguard.spring.core.config.PathFormat;

/**
 * Factory bean used to build the PropertyPlaceholderConfigurer base on Vanguard defined path formats.
 * 
 * @author uw8h
 */
public class PropertyPlaceholderConfigurerFactory {

    private static final Logger logger = LoggerFactory.getLogger(PropertyPlaceholderConfigurerFactory.class);
    
    private final Comparator<Object> comparator = new OrderComparator();

    private final List<PathFormat> pathFormatList;

    /**
     * Create a PropertyPlaceholderConfigurerFactory with the list of PathFormat used to generate the list.
     * 
     * @param anPathFormatList
     *            a list of path formats used to generate the list.
     */
    public PropertyPlaceholderConfigurerFactory(List<PathFormat> anPathFormatList) {
        super();
        
        Assert.notEmpty(anPathFormatList, "anPathFormatList must be non null, non empty list");
        pathFormatList = anPathFormatList;
        Collections.sort(pathFormatList, comparator);
    }

    public PropertyPlaceholderConfigurer createPropertyPlaceholderConfigurer(String moduleId) {
        String prefix = String.format("$%1$s-{", moduleId);

        PathFormatListToResourceArrayConverter pathFormatListToResourceArrayConverter = new PathFormatListToResourceArrayConverter(pathFormatList);
        pathFormatListToResourceArrayConverter.addOverrideProperty(CommonPathVariableConstants.MODULE_ID, moduleId);
        Resource[] resourceArray = pathFormatListToResourceArrayConverter.toResourceArray();
        
        DiagnosticPropertyPlaceholderConfigurer configurer = new DiagnosticPropertyPlaceholderConfigurer();
        configurer.setIgnoreResourceNotFound(true);
        configurer.setIgnoreUnresolvablePlaceholders(false);
        configurer.setLocations(resourceArray);
        configurer.setPlaceholderPrefix(prefix);
        configurer.setModuleId(moduleId);
        configurer.setSystemPropertiesMode(PropertyPlaceholderConfigurer.SYSTEM_PROPERTIES_MODE_OVERRIDE);
        configurer.setSearchSystemEnvironment(true);
        
        logCreation(moduleId, prefix, resourceArray);
        
        return configurer;
    }

    /**
     * Logs the placeholder creation information.
     * 
     * @param moduleId
     * @param resourceArray
     * @param configurer
     */
    private void logCreation(String moduleId, String prefix, Resource[] resourceArray) {

    	String resourceDelimiter = "";
        StringBuilder sb = new StringBuilder();
        Formatter formatter = new Formatter(sb);
        formatter.format("logCreation(): Loading properties [%2$sAnyPropertyName}] from {", moduleId, prefix);
        for (Resource resource : resourceArray) {
            formatter.format("%1$s%2$s", resourceDelimiter, resource.getDescription());
            resourceDelimiter = ",";
        }
        sb.append("} listed in order from least to highest presidence.");
        logger.info(sb.toString());
        formatter.close();
    }

}

RTEValidator.class

/*
 ****************************************************************************
 * 
 * Copyright (c)2009 The Vanguard Group of Investment Companies (VGI)
 * All rights reserved.
 * 
 * This source code is CONFIDENTIAL and PROPRIETARY to VGI. Unauthorized
 * distribution, adaptation, or use may be subject to civil and criminal
 * penalties.
 *
 ****************************************************************************
 Module Description:
 
 $HeadURL: http://prdsvnrepo:8080/svn/tip/ngsa/projects/project-common-components/vanguard-spring-core/tags/1.1-M20160505-01/src/main/java/com/vanguard/spring/core/config/support/RTEValidator.java $
 $LastChangedRevision: 390783 $
 $Author: u16t $
 $LastChangedDate: 2015-06-10 12:18:20 -0400 (Wed, 10 Jun 2015) $
 */
package com.vanguard.spring.core.config.support;

import javax.annotation.PostConstruct;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.slf4j.MarkerFactory;
import org.springframework.util.StringUtils;

import com.vanguard.spring.core.config.CommonPathVariableConstants;

/**
 * Provides a warning message if the RTEID value is missing
 * 
 * @author ujm4
 * @author u16t
 */
class RTEValidator {

    private static final Logger LOGGER = LoggerFactory.getLogger(RTEValidator.class);
    private static final String WARNING_RTEID_NOT_DEFINED_CODE = "2032020";
    
    /**
     * Check to see if RTEID is defined, and log at the appropriate level to
     * assist with debugging.
     */
    @PostConstruct
    final void init() {

        String rteId = System.getProperty(CommonPathVariableConstants.RTEID);
        if (StringUtils.hasText(rteId)) {
            LOGGER.info("[{}] is defined as [{}]", CommonPathVariableConstants.RTEID, rteId);
        } else {
        	LOGGER.warn(MarkerFactory.getMarker(WARNING_RTEID_NOT_DEFINED_CODE), 
        			"[{}] is not defined. To set, you can either issue -D{}=<RTE> as a JVM argument or call System.setProperty(\"{}\", <RTE>) within your code.", CommonPathVariableConstants.RTEID, CommonPathVariableConstants.RTEID, CommonPathVariableConstants.RTEID);
        }
    }
}

UnresolvablePathFormatException.class

/*
 ****************************************************************************
 * 
 * Copyright (c)2008 The Vanguard Group of Investment Companies (VGI)
 * All rights reserved.
 * 
 * This source code is CONFIDENTIAL and PROPRIETARY to VGI. Unauthorized
 * distribution, adaptation, or use may be subject to civil and criminal
 * penalties.
 *
 ****************************************************************************
 Module Description:
 
 $HeadURL: http://prdsvnrepo:8080/svn/tip/ngsa/projects/project-common-components/vanguard-spring-core/tags/1.1-M20160505-01/src/main/java/com/vanguard/spring/core/config/support/UnresolvablePathFormatException.java $
 $LastChangedRevision: 8689 $
 $Author: u16t $
 $LastChangedDate: 2009-12-15 11:57:51 -0500 (Tue, 15 Dec 2009) $
 */
package com.vanguard.spring.core.config.support;

/**
 * Thrown when path variable could not be resolved.
 * 
 * @author uw8h
 */
class UnresolvablePathFormatException extends RuntimeException {

    public static final String MESSAGE = "The following path [%1$s] could not be resolved so it will not be read.  Error was encountered while processing variable [%2$s]";

    private static final long serialVersionUID = 9114187293673279377L;

    private String variableKey = "UNKNOWN";

    private String pathFormat = "UNKNOWN";

    /**
     * @param anKey
     */
    public UnresolvablePathFormatException() {
        super();
    }

    /*
     * (non-Javadoc)
     * 
     * @see java.lang.Throwable#getMessage()
     */

    /**
     * @param anVariableKey the variableKey to set
     */
    public final void setVariableKey(String anVariableKey) {
        variableKey = anVariableKey;
    }

    /**
     * @param anPathFormat the pathFormat to set
     */
    public final void setPathFormat(String anPathFormat) {
        pathFormat = anPathFormat;
    }

    @Override
    public String getMessage() {
        return String.format(MESSAGE, pathFormat, variableKey);
    }

}

com.vanguard.spring.core.config.xml

PlaceholderFactoryBeanDefinitionHelper.class

/*
 ****************************************************************************
 * 
 * Copyright (c)2008 The Vanguard Group of Investment Companies (VGI)
 * All rights reserved.
 * 
 * This source code is CONFIDENTIAL and PROPRIETARY to VGI. Unauthorized
 * distribution, adaptation, or use may be subject to civil and criminal
 * penalties.
 *
 ****************************************************************************
 Module Description:
 
 $HeadURL: http://prdsvnrepo:8080/svn/tip/ngsa/projects/project-common-components/vanguard-spring-core/tags/1.1-M20160505-01/src/main/java/com/vanguard/spring/core/config/xml/PlaceholderFactoryBeanDefinitionHelper.java $
 $LastChangedRevision: 4077 $
 $Author: ujm4 $
 $LastChangedDate: 2009-07-20 11:12:12 -0400 (Mon, 20 Jul 2009) $
 */
package com.vanguard.spring.core.config.xml;

import org.springframework.beans.factory.config.ConstructorArgumentValues;
import org.springframework.beans.factory.parsing.BeanComponentDefinition;
import org.springframework.beans.factory.support.GenericBeanDefinition;
import org.springframework.beans.factory.support.ManagedList;
import org.springframework.beans.factory.xml.ParserContext;

import com.vanguard.spring.core.config.DefaultPathFormat;

/**
 * @author uw8h
 */
class PlaceholderFactoryBeanDefinitionHelper {

    static final String PROPERTY_PLACEHOLDER_CONFIGURER_FACTORY_BEAN_NAME = "vanguard-spring-core-PropertyPlaceholderConfigurerFactory";

    static void addBeanDefinition(ParserContext anParserContext) {
        if (!anParserContext.getRegistry().containsBeanDefinition(PROPERTY_PLACEHOLDER_CONFIGURER_FACTORY_BEAN_NAME)) {
            GenericBeanDefinition def = new GenericBeanDefinition();
            def.setBeanClassName(PROPERTY_PLACEHOLDER_CONFIGURER_FACTORY_BEAN_NAME);
            def.setBeanClass(com.vanguard.spring.core.config.support.PropertyPlaceholderConfigurerFactory.class);
            ConstructorArgumentValues values = def.getConstructorArgumentValues();
            values.addIndexedArgumentValue(0, generateDefaultValues(), null);
            anParserContext.registerBeanComponent(new BeanComponentDefinition(def, PROPERTY_PLACEHOLDER_CONFIGURER_FACTORY_BEAN_NAME));

        }
    }

    @SuppressWarnings("unchecked")
    private static ManagedList generateDefaultValues() {
        ManagedList managedList = new ManagedList();
        managedList.setMergeEnabled(true);
        for (DefaultPathFormat pathFormat : DefaultPathFormat.values()) {
            managedList.add(pathFormat);
        }
        return managedList;
    }
}

VanguardConfigNamespaceHandler.class

/*
 ****************************************************************************
 * 
 * Copyright (c)2008 The Vanguard Group of Investment Companies (VGI)
 * All rights reserved.
 * 
 * This source code is CONFIDENTIAL and PROPRIETARY to VGI. Unauthorized
 * distribution, adaptation, or use may be subject to civil and criminal
 * penalties.
 *
 ****************************************************************************
 Module Description:
 
 $HeadURL: http://prdsvnrepo:8080/svn/tip/ngsa/projects/project-common-components/vanguard-spring-core/tags/1.1-M20160505-01/src/main/java/com/vanguard/spring/core/config/xml/VanguardConfigNamespaceHandler.java $
 $LastChangedRevision: 4077 $
 $Author: ujm4 $
 $LastChangedDate: 2009-07-20 11:12:12 -0400 (Mon, 20 Jul 2009) $
 */
package com.vanguard.spring.core.config.xml;

import org.springframework.beans.factory.xml.NamespaceHandlerSupport;

/**
 * @author uw8h
 */
public class VanguardConfigNamespaceHandler extends NamespaceHandlerSupport {

    /**
     * Automatically generated field:
     * VANGUARD_PROPERTY_PLACEHOLDER_CONFIGURER_BEAN_DEF
     */
    private static final VanguardPropertyPlaceholderConfigurerBeanDefinitionParser VANGUARD_PROPERTY_PLACEHOLDER_CONFIGURER_BEAN_DEFINITION_PARSER = new VanguardPropertyPlaceholderConfigurerBeanDefinitionParser();

    /**
     * Automatically generated field:
     * VANGUARD_PROPERTY_PATH_BEAN_DEFINITION_PARSER
     */
    private static final VanguardCustomPropertyPathBeanDefinitionParser VANGUARD_PROPERTY_PATH_BEAN_DEFINITION_PARSER = new VanguardCustomPropertyPathBeanDefinitionParser();

    /*
     * (non-Javadoc)
     * 
     * @see org.springframework.beans.factory.xml.NamespaceHandler#init()
     */

    public void init() {
        registerBeanDefinitionParser("vanguard-property-placeholder", VANGUARD_PROPERTY_PLACEHOLDER_CONFIGURER_BEAN_DEFINITION_PARSER);
        registerBeanDefinitionParser("vanguard-property-path-format", VANGUARD_PROPERTY_PATH_BEAN_DEFINITION_PARSER);

    }

}

VanguardCustomPropertyPathBeanDefinitionParser.class

/*
 ****************************************************************************
 * 
 * Copyright (c)2008 The Vanguard Group of Investment Companies (VGI)
 * All rights reserved.
 * 
 * This source code is CONFIDENTIAL and PROPRIETARY to VGI. Unauthorized
 * distribution, adaptation, or use may be subject to civil and criminal
 * penalties.
 *
 ****************************************************************************
 Module Description:
 
 $HeadURL: http://prdsvnrepo:8080/svn/tip/ngsa/projects/project-common-components/vanguard-spring-core/tags/1.1-M20160505-01/src/main/java/com/vanguard/spring/core/config/xml/VanguardCustomPropertyPathBeanDefinitionParser.java $
 $LastChangedRevision: 8665 $
 $Author: u16t $
 $LastChangedDate: 2009-12-14 21:42:20 -0500 (Mon, 14 Dec 2009) $
 */
package com.vanguard.spring.core.config.xml;

import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.config.ConstructorArgumentValues;
import org.springframework.beans.factory.support.ManagedList;
import org.springframework.beans.factory.xml.BeanDefinitionParser;
import org.springframework.beans.factory.xml.ParserContext;
import org.springframework.util.StringUtils;
import org.w3c.dom.Element;

import com.vanguard.spring.core.config.CustomPathFormat;
import com.vanguard.spring.core.config.PathFormat;
import com.vanguard.spring.core.config.PathOrder;

/**
 * @author uw8h
 */
public class VanguardCustomPropertyPathBeanDefinitionParser implements BeanDefinitionParser {

    public BeanDefinition parse(Element anElement, ParserContext anParserContext) {
        String pathFormatString = anElement.getAttribute("pathFormat");
        String orderBase = anElement.getAttribute("orderBase");
        String orderIncrement = anElement.getAttribute("orderIncrement");
        if (!StringUtils.hasText(orderIncrement)) {
            orderIncrement = "1";
        }
        CustomPathFormat customPathFormat = new CustomPathFormat(pathFormatString, PathOrder.valueOf(orderBase), Integer.parseInt(orderIncrement));
        addPathFormatToFactory(anParserContext, customPathFormat);
        return null;
    }

    @SuppressWarnings("unchecked")
    private void addPathFormatToFactory(ParserContext anParserContext, PathFormat aPathBeanDefinition) {
        PlaceholderFactoryBeanDefinitionHelper.addBeanDefinition(anParserContext);
        BeanDefinition def = anParserContext.getRegistry().getBeanDefinition(
                PlaceholderFactoryBeanDefinitionHelper.PROPERTY_PLACEHOLDER_CONFIGURER_FACTORY_BEAN_NAME);
        ConstructorArgumentValues constructorArgs = def.getConstructorArgumentValues();
        ManagedList list = new ManagedList();
        list.setMergeEnabled(true);
        list.add(aPathBeanDefinition);
        constructorArgs.addIndexedArgumentValue(0, list);
    }
}

VanguardPropertyPlaceholderConfigurerBeanDefinitionParser.class

/*
 ****************************************************************************
 * 
 * Copyright (c)2008 The Vanguard Group of Investment Companies (VGI)
 * All rights reserved.
 * 
 * This source code is CONFIDENTIAL and PROPRIETARY to VGI. Unauthorized
 * distribution, adaptation, or use may be subject to civil and criminal
 * penalties.
 *
 ****************************************************************************
 Module Description:
 
 $HeadURL: http://prdsvnrepo:8080/svn/tip/ngsa/projects/project-common-components/vanguard-spring-core/tags/1.1-M20160505-01/src/main/java/com/vanguard/spring/core/config/xml/VanguardPropertyPlaceholderConfigurerBeanDefinitionParser.java $
 $LastChangedRevision: 4077 $
 $Author: ujm4 $
 $LastChangedDate: 2009-07-20 11:12:12 -0400 (Mon, 20 Jul 2009) $
 */
package com.vanguard.spring.core.config.xml;

import org.springframework.beans.factory.support.BeanDefinitionBuilder;
import org.springframework.beans.factory.xml.AbstractSingleBeanDefinitionParser;
import org.springframework.beans.factory.xml.ParserContext;
import org.w3c.dom.Element;

/**
 * Used to generate a standard bean definition for a PropertyPlaceholderConfigurer which has been created using NGSA best practices and an XML name
 * space.
 * 
 * @author uw8h
 */
public class VanguardPropertyPlaceholderConfigurerBeanDefinitionParser extends AbstractSingleBeanDefinitionParser {

    @Override
    protected boolean shouldGenerateId() {
        return true;
    }

    /*
     * (non-Javadoc)
     * 
     * @see org.springframework.beans.factory.xml.AbstractSingleBeanDefinitionParser#doParse(org.w3c.dom.Element,
     *      org.springframework.beans.factory.xml.ParserContext, org.springframework.beans.factory.support.BeanDefinitionBuilder)
     */

    @Override
    protected void doParse(Element anElement, ParserContext anParserContext, BeanDefinitionBuilder anBuilder) {

        PlaceholderFactoryBeanDefinitionHelper.addBeanDefinition(anParserContext);

        // Create PropertyPlaceholderConfigurer
        anBuilder.getRawBeanDefinition().setFactoryBeanName(PlaceholderFactoryBeanDefinitionHelper.PROPERTY_PLACEHOLDER_CONFIGURER_FACTORY_BEAN_NAME);
        anBuilder.setFactoryMethod("createPropertyPlaceholderConfigurer");
        String moduleId = anElement.getAttribute("moduleId");
        anBuilder.addConstructorArgValue(moduleId);
    }
}

vanguard-config.xsd

<?xml version="1.0" encoding="UTF-8"?>

<xsd:schema xmlns="http://www.vanguard.com/schema/config"
	xmlns:xsd="http://www.w3.org/2001/XMLSchema"
	xmlns:beans="http://www.springframework.org/schema/beans"
	targetNamespace="http://www.vanguard.com/schema/config"
	elementFormDefault="qualified" attributeFormDefault="unqualified">

	<xsd:import namespace="http://www.springframework.org/schema/beans" />

	<xsd:annotation>
		<xsd:documentation>
			<![CDATA[
	Defines the configuration elements for the vanguard-spring-core module.  Configuration
	is used to simplify common Vanguard Spring configurations.
		]]>
		</xsd:documentation>
	</xsd:annotation>

	<xsd:element name="vanguard-property-placeholder">
		<xsd:annotation>
			<xsd:documentation>
				<![CDATA[Activates replacement of $moduleId{...} placeholders, resolved against Vanguard standard properties file
		hierarchy defined by com.vanguard.spring.core.config.CommonPathFormat plus application specific PathFormat beans defined in the jar with application configuration. Falls back to resolving placeholders against JVM system properties.]]>
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="beans:identifiedType">
					<xsd:attribute name="moduleId" type="xsd:string"
						use="required">
						<xsd:annotation>
							<xsd:documentation>
								<![CDATA[
	The moduleId is the unique identifier for the code module.  
	When the implementation and api are provided in separate maven
	projects, the moduleId is the maven artifactId of the multi-module POM that includes both.  
	When the api and implementation are both contained within one maven project, the moduleId is the artifactId of the project POM.
					]]>
							</xsd:documentation>
						</xsd:annotation>
					</xsd:attribute>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>

	<xsd:element name="vanguard-property-path-format">
		<xsd:annotation>
			<xsd:documentation>
				<![CDATA[Defines a path format that will be used by all vanguard-property-placeholder.]]>
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:complexContent>
				<xsd:extension base="beans:identifiedType">
					<xsd:attribute name="pathFormat" type="xsd:string"
						use="required">
						<xsd:annotation>
							<xsd:documentation>
								<![CDATA[
	The location of the property files which can include $path-format{any system property name} or $path-format{MODULE_ID}.  ${MODULE_ID} will be replaced by the moduleId defined in vanguard-property-placeholder.
	Other variable $path-format{...} will be replaced by the system property with specified system property name.  Common system properties include RTEID and SECURE_SSI_FILE]]>
							</xsd:documentation>
						</xsd:annotation>
					</xsd:attribute>
					<xsd:attribute name="orderBase" use="required">
						<xsd:simpleType>
							<xsd:annotation>
								<xsd:documentation>
									<![CDATA[The PathOrder to use as a base to determine order of custom path to read in properties files.]]>
								</xsd:documentation>
							</xsd:annotation>
							<xsd:restriction base="xsd:string">
								<xsd:enumeration value="DEFAULT">
									<xsd:annotation>
										<xsd:documentation>
											<![CDATA[Properties used by the entire application reguardless of run-time environment.  Overrides default provided with module, but nothing else]]>
										</xsd:documentation>
									</xsd:annotation>
								</xsd:enumeration>
								<xsd:enumeration value="SHARED">
									<xsd:annotation>
										<xsd:documentation>
											<![CDATA[Properties shared by multiple modules within a specific Run-time Environment.  Overrides defaults provided with module and application, but not module specific override properties or security]]>
										</xsd:documentation>
									</xsd:annotation>
								</xsd:enumeration>
							</xsd:restriction>
						</xsd:simpleType>
					</xsd:attribute>
					<xsd:attribute name="orderIncrement"
						use="optional">
						<xsd:simpleType>
							<xsd:annotation>
								<xsd:documentation>
									<![CDATA[The amount to add to orderBase when calculating order.  Must be number from 1 to 99.  Default is 1]]>
								</xsd:documentation>
							</xsd:annotation>
							<xsd:restriction base="xsd:int">
								<xsd:minInclusive value="1" />
								<xsd:maxInclusive value="99" />
							</xsd:restriction>
						</xsd:simpleType>
					</xsd:attribute>
				</xsd:extension>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:element>
</xsd:schema>

com.vanguard.spring.core.events
ApplicationEventPublisherService.class

/**
 * 
 */
package com.vanguard.spring.core.events;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.BeansException;
import org.springframework.context.ApplicationContext;
import org.springframework.context.ApplicationContextAware;
import org.springframework.context.ApplicationEvent;

/**
 * Class provides static method to publish spring events
 * 
 * Usage: ApplicationEventPublisherService.publishEvent(new ClientResetEvent(this));
 * 
 */
public class ApplicationEventPublisherService implements ApplicationContextAware {

    private static final Log LOG = LogFactory.getLog(ApplicationEventPublisherService.class);

    private static final ApplicationEventPublisherService INSTANCE = new ApplicationEventPublisherService();

    /**
     * This method is called by spring application context on-load. This
     * method is configured as a factory-method for the bean definition.
     * 
     * @return
     */
    static final ApplicationEventPublisherService getInstance() {
    return INSTANCE;
    }

    private ApplicationContext mContext;

    private ApplicationEventPublisherService() {
    }

    /**
     * This method is called by spring application context on-load. This
     * method is configured as a factory-method for the bean definition.
     */
    public void setApplicationContext(ApplicationContext applicationContext)
    throws BeansException {
    mContext = applicationContext;
    }

    private ApplicationContext getContext() {
    return this.mContext;
    }
    
    /**
     * @param event that needs to be published
     * @throws IllegalStateException
     *         If the application event publisher was not initialized through
     *         spring application context.
     */
    public static void publishEvent(ApplicationEvent event) throws IllegalStateException {
        if (getInstance().getContext() == null) {
            throw new IllegalStateException(
            "This application event publisher needs to be initialized in through spring application context.");
        }

        if (LOG.isDebugEnabled())
            LOG.debug(event.getSource() + " published event " + event.toString());
        getInstance().getContext().publishEvent(event);
    }
}

com.vanguard.spring.core.management

DefaultMBeanPlatformServerRetriever.class

/*
 ****************************************************************************
 * 
 * Copyright (c)2008 The Vanguard Group of Investment Companies (VGI)
 * All rights reserved.
 * 
 * This source code is CONFIDENTIAL and PROPRIETARY to VGI. Unauthorized
 * distribution, adaptation, or use may be subject to civil and criminal
 * penalties.
 *
 ****************************************************************************
 Module Description:
 
 $HeadURL$
 $LastChangedRevision$
 $Author$
 $LastChangedDate$
 */
package com.vanguard.spring.core.management;

import java.lang.management.ManagementFactory;

import javax.management.MBeanServer;

public class DefaultMBeanPlatformServerRetriever implements MBeanPlatformServerRetriever {

    public MBeanServer getMBeanServer() {
        return ManagementFactory.getPlatformMBeanServer();
    }

}

MBeanPlatformServerRetriever.class

/*
 ****************************************************************************
 * 
 * Copyright (c)2008 The Vanguard Group of Investment Companies (VGI)
 * All rights reserved.
 * 
 * This source code is CONFIDENTIAL and PROPRIETARY to VGI. Unauthorized
 * distribution, adaptation, or use may be subject to civil and criminal
 * penalties.
 *
 ****************************************************************************
 Module Description:
 
 $HeadURL$
 $LastChangedRevision$
 $Author$
 $LastChangedDate$
 */
package com.vanguard.spring.core.management;

import javax.management.MBeanServer;

import org.springframework.jmx.MBeanServerNotFoundException;

/**
 * Classes implementing this interface expose an MBeanServer for a specific
 * platform.
 */
public interface MBeanPlatformServerRetriever {

    public MBeanServer getMBeanServer() throws MBeanServerNotFoundException;

}

PlatformDependentMBeanServerFactoryBean.class

/*
 ****************************************************************************
 * 
 * Copyright (c)2008 The Vanguard Group of Investment Companies (VGI)
 * All rights reserved.
 * 
 * This source code is CONFIDENTIAL and PROPRIETARY to VGI. Unauthorized
 * distribution, adaptation, or use may be subject to civil and criminal
 * penalties.
 *
 ****************************************************************************
 Module Description:
 
 $HeadURL$
 $LastChangedRevision$
 $Author$
 $LastChangedDate$
 */
package com.vanguard.spring.core.management;

import javax.management.MBeanServer;

import org.springframework.beans.factory.FactoryBean;
import org.springframework.beans.factory.InitializingBean;
import org.springframework.jmx.MBeanServerNotFoundException;

public class PlatformDependentMBeanServerFactoryBean implements FactoryBean, InitializingBean {

    private MBeanServer mbeanServer;

    private MBeanPlatformServerRetriever overrideMBeanRetriever;

    /**
     * @see org.springframework.beans.factory.FactoryBean#getObject()
     */
    public Object getObject() throws Exception {
        return this.mbeanServer;
    }

    /**
     * @see org.springframework.beans.factory.FactoryBean#getObjectType()
     */
    @SuppressWarnings("unchecked")
    public Class getObjectType() {
        return this.mbeanServer != null ? this.mbeanServer.getClass() : MBeanServer.class;
    }

    /**
     * @see org.springframework.beans.factory.FactoryBean#isSingleton()
     */
    public boolean isSingleton() {
        return true;
    }

    /**
     * @see org.springframework.beans.factory.InitializingBean#afterPropertiesSet()
     */
    public void afterPropertiesSet() throws MBeanServerNotFoundException {
        MBeanPlatformServerRetriever retriever = selectRetriever();

        mbeanServer = retriever.getMBeanServer();

        if (mbeanServer == null) {
            throw new MBeanServerNotFoundException("No MBeanServer was found.");
        }
    }

    public void setMbeanServerRetriever(MBeanPlatformServerRetriever retriever) {
        overrideMBeanRetriever = retriever;
    }

    /**
     * Method to get the AdminServiceFactory for WebSphere JMX. This was written as a separate method in order to allow testing of the getMBeanServer
     * method logic outside of websphere. This method should only be overriden for test purposes.
     * 
     * @return Class of the com.ibm.websphere.management.AdminServiceFactory
     * @throws ClassNotFoundException
     *             if this is not running in WebSphere.
     */
    @SuppressWarnings("unchecked")
    Class getAdminServiceFactoryClass() throws ClassNotFoundException {
        return getClass().getClassLoader().loadClass("com.ibm.websphere.management.AdminServiceFactory");
    }

    private MBeanPlatformServerRetriever selectRetriever() {
        if (overrideMBeanRetriever != null) {
            return overrideMBeanRetriever;
        }

        if (isRunningInWebsphere()) {
            return new WebSphereMBeanPlatformServerRetriever(); // parasoft-suppress GC.RCO "The class is static "
        } else {
            return new DefaultMBeanPlatformServerRetriever(); // parasoft-suppress GC.RCO "The class is static "
        }
    }

    private boolean isRunningInWebsphere() {
        try {
            getAdminServiceFactoryClass();
            return true;
        } catch (ClassNotFoundException e) {
            return false;
        }
    }

}

WebSphereMBeanPlatformServerRetriever.class

/*
 ****************************************************************************
 * 
 * Copyright (c)2008 The Vanguard Group of Investment Companies (VGI)
 * All rights reserved.
 * 
 * This source code is CONFIDENTIAL and PROPRIETARY to VGI. Unauthorized
 * distribution, adaptation, or use may be subject to civil and criminal
 * penalties.
 *
 ****************************************************************************
 Module Description:
 
 $HeadURL$
 $LastChangedRevision$
 $Author$
 $LastChangedDate$
 */
package com.vanguard.spring.core.management;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

import javax.management.MBeanServer;

import org.springframework.jmx.MBeanServerNotFoundException;

public class WebSphereMBeanPlatformServerRetriever implements MBeanPlatformServerRetriever {

    private static final String GENERAL_ERROR_MSG = "Unable to retrieve WebSphere's MBeanServer.";

    private static final String ADMIN_SERVICE_FACTORY_CLASS = "com.ibm.websphere.management.AdminServiceFactory";

    private static final String GET_MBEAN_FACTORY_METHOD = "getMBeanFactory";

    private static final String GET_MBEAN_SERVER_METHOD = "getMBeanServer";

    private static final Object[] EMPTY_OBJECT_ARRAY = new Object[0];

    @SuppressWarnings("unchecked")
    public MBeanServer getMBeanServer() throws MBeanServerNotFoundException {
        try {
            /*
             * this.mbeanServer = AdminServiceFactory.getMBeanFactory().getMBeanServer();
             */
            Class adminServiceClass = getAdminServiceFactoryClass();
            Method getMBeanFactoryMethod = adminServiceClass.getMethod(GET_MBEAN_FACTORY_METHOD, new Class[0]);
            Object mbeanFactory = getMBeanFactoryMethod.invoke(null, new Object[0]);

            if (mbeanFactory == null) {
                throw new MBeanServerNotFoundException("WebSphere MBeanFactory not available.");
            }

            Method getMBeanServerMethod = mbeanFactory.getClass().getMethod(GET_MBEAN_SERVER_METHOD, new Class[0]);

            return (MBeanServer) getMBeanServerMethod.invoke(mbeanFactory, EMPTY_OBJECT_ARRAY);

        } catch (ClassNotFoundException e) {
            throw new MBeanServerNotFoundException("Unable to find WebSphere's AdminServiceFactory class.", e);
        } catch (SecurityException e) {
            throw new MBeanServerNotFoundException(GENERAL_ERROR_MSG, e);
        } catch (NoSuchMethodException e) {
            throw new MBeanServerNotFoundException(GENERAL_ERROR_MSG, e);
        } catch (IllegalArgumentException e) {
            throw new MBeanServerNotFoundException(GENERAL_ERROR_MSG, e);
        } catch (IllegalAccessException e) {
            // Exception handling is required because this is not a runtime exception,
            // but this code is unreachable by testing.
            // The getMethod() calls used to obtain the method objects
            // only return accessible method objects. If method is inaccessible
            // a NoSuchMethodException is returned.
            throw new MBeanServerNotFoundException(GENERAL_ERROR_MSG, e);
        } catch (InvocationTargetException e) {
            throw new MBeanServerNotFoundException(GENERAL_ERROR_MSG, e);
        }

    }

    /**
     * Method to get the AdminServiceFactory for WebSphere JMX. This was written as a separate method in order to allow testing of the getMBeanServer
     * method logic outside of websphere.
     * 
     * @return non null class object for com.ibm.websphere.management.AdminServiceFactory
     * @throws ClassNotFoundException
     *             if this is not running in WebSphere.
     */
    @SuppressWarnings("unchecked")
    Class getAdminServiceFactoryClass() throws ClassNotFoundException {
        return getClass().getClassLoader().loadClass(ADMIN_SERVICE_FACTORY_CLASS);
    }

}

META-INF
	Maven
		com.vanguard
				vanguard-spring-core-spring-4
								pom.properties

#Generated by Apache Maven
#Thu May 05 12:03:10 EDT 2016
version=1.1-M20160505-01
groupId=com.vanguard
artifactId=vanguard-spring-core-spring-4


pom.xml

<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

	<modelVersion>4.0.0</modelVersion>

	<parent>
		<groupId>com.vanguard.ngsa</groupId>
  		<artifactId>parent</artifactId>
  		<version>4.0-M20150604-02</version>
  	</parent>

	<groupId>com.vanguard</groupId>
	<artifactId>vanguard-spring-core-spring-4</artifactId>
	<version>1.1-M20160505-01</version>

	<packaging>jar</packaging>

	<name>vanguard-spring-core-spring-4</name>
	<description>
		Vanguard Spring Core contains four small utilities tying into the Spring IoC. We refer to those utilities as the
		configuration, aspect, management and application event publishing utilities.
	</description>

	<scm>
		<connection>
			scm:svn:http://prdsvnrepo:8080/svn/tip/ngsa/projects/project-common-components/vanguard-spring-core/tags/1.1-M20160505-01
		</connection>
		<developerConnection>
			scm:svn:http://prdsvnrepo:8080/svn/tip/ngsa/projects/project-common-components/vanguard-spring-core/tags/1.1-M20160505-01
		</developerConnection>
	</scm>

    <mailingLists>
        <mailingList>
            <name>CTO Cloud App Arch</name>
        </mailingList>
    </mailingLists>

	<properties>
		<deployment.type>external-and-internal</deployment.type>
		<logging-dependencies-version>4.0-M20150604-01</logging-dependencies-version>
		<spring.version>[4.0.0.RELEASE,4.99.99.RELEASE)</spring.version>
	</properties>

	<dependencies>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-core</artifactId>
			<version>${spring.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
			<version>${spring.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-beans</artifactId>
			<version>${spring.version}</version>
		</dependency>		
		<dependency>
			<groupId>commons-collections</groupId>
			<artifactId>commons-collections</artifactId>
			<version>3.2</version>
		</dependency>
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-lang3</artifactId>
			<version>3.3.2</version>
		</dependency>		
		<dependency>
			<groupId>commons-io</groupId>
			<artifactId>commons-io</artifactId>
			<version>1.3.1</version>
		</dependency>
		<dependency>
			<groupId>javax.annotation</groupId>
			<artifactId>jsr250-api</artifactId>
			<version>1.0</version>
		</dependency>
		<dependency>
  			<groupId>com.vanguard.corp</groupId>
  			<artifactId>vault-impl</artifactId>
  			<version>1.0-M20150106-01</version>
		</dependency>
		<dependency>
		    <groupId>com.vanguard</groupId>
		    <artifactId>commons-functors</artifactId>
		    <version>2.0-M20150604-01</version>
		</dependency>		
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<version>1.7.10</version>
		</dependency>		
		<!-- slf4j using log4j2 implementation for testing -->
		<dependency>
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-slf4j-impl</artifactId>
			<version>2.1</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-core</artifactId>
			<version>2.1</version>
			<scope>test</scope>
		</dependency>					
	</dependencies>
	
</project>



vanguard-spring-core
	spring-application-event-publisher.xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
						http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-2.5.xsd
						http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.5.xsd
						http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">

	<bean id="_applicationEventPublisherService.ApplicationEventPublisherService"
		class="com.vanguard.spring.core.events.ApplicationEventPublisherService" 
        factory-method="getInstance">
	</bean>
</beans>


spring-aspectorder.xml

<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	                    http://www.springframework.org/schema/beans/spring-beans-2.5.xsd">
	
	<!-- Aspect order parent bean definition -->
	
	<bean abstract="true" id="aspectOrderParent" 
	class="org.springframework.beans.factory.config.PropertyPathFactoryBean">
		<property name="propertyPath" value="order" />
	</bean>	
	
	<!-- Each bean is an int value, representing aspect order. This is for autowiring. -->		
		
	<bean id="AspectOrder.FIRST" parent="aspectOrderParent">
		<property name="targetBeanName" value="AspectOrderEnum.FIRST" />
	</bean> 	
	
	<bean id="AspectOrder.BEFORE_SECURITY" parent="aspectOrderParent">
		<property name="targetBeanName" value="AspectOrderEnum.BEFORE_SECURITY" />
	</bean> 
	
	<bean id="AspectOrder.SECURITY" parent="aspectOrderParent">
		<property name="targetBeanName" value="AspectOrderEnum.SECURITY" />
	</bean> 
	
	<bean id="AspectOrder.AFTER_SECURITY" parent="aspectOrderParent">
		<property name="targetBeanName" value="AspectOrderEnum.AFTER_SECURITY" />
	</bean> 
	
	<bean id="AspectOrder.BEFORE_CACHING" parent="aspectOrderParent">
		<property name="targetBeanName" value="AspectOrderEnum.BEFORE_CACHING" />
	</bean> 
	
	<bean id="AspectOrder.CACHING" parent="aspectOrderParent">
		<property name="targetBeanName" value="AspectOrderEnum.CACHING" />
	</bean> 
	
	<bean id="AspectOrder.AFTER_CACHING" parent="aspectOrderParent">
		<property name="targetBeanName" value="AspectOrderEnum.AFTER_CACHING" />
	</bean> 
	
	<bean id="AspectOrder.BEFORE_TRANSACTION_RETRY" parent="aspectOrderParent">
		<property name="targetBeanName" value="AspectOrderEnum.BEFORE_TRANSACTION_RETRY" />
	</bean> 
	
	<bean id="AspectOrder.TRANSACTION_RETRY" parent="aspectOrderParent">
		<property name="targetBeanName" value="AspectOrderEnum.TRANSACTION_RETRY" />
	</bean> 
	
	<bean id="AspectOrder.AFTER_TRANSACTION_RETRY" parent="aspectOrderParent">
		<property name="targetBeanName" value="AspectOrderEnum.AFTER_TRANSACTION_RETRY" />
	</bean> 
	
	<bean id="AspectOrder.BEFORE_TRANSACTION" parent="aspectOrderParent">
		<property name="targetBeanName" value="AspectOrderEnum.BEFORE_TRANSACTION" />
	</bean> 
					  	
	<bean id="AspectOrder.TRANSACTION" parent="aspectOrderParent">
		<property name="targetBeanName" value="AspectOrderEnum.TRANSACTION" />
	</bean> 
	
	<bean id="AspectOrder.AFTER_TRANSACTION" parent="aspectOrderParent">
		<property name="targetBeanName" value="AspectOrderEnum.AFTER_TRANSACTION" />
	</bean> 
	
	<bean id="AspectOrder.LAST" parent="aspectOrderParent">
		<property name="targetBeanName" value="AspectOrderEnum.LAST" />
	</bean> 
	
	
	<!-- Aspect order enum parent bean definition -->
	
	<bean abstract="true" id="aspectOrderEnumParent" 
		class="com.vanguard.spring.core.aspects.AspectOrder" factory-method="valueOf" />
	
	<!-- Bean definitions for AspectOrder enums, again for autowiring. -->
	
	<bean id="AspectOrderEnum.FIRST" parent="aspectOrderEnumParent">
		<constructor-arg value="FIRST" />
	</bean>
	
	<bean id="AspectOrderEnum.BEFORE_SECURITY" parent="aspectOrderEnumParent">
		<constructor-arg value="BEFORE_SECURITY" />
	</bean>
	
	<bean id="AspectOrderEnum.SECURITY" parent="aspectOrderEnumParent">
		<constructor-arg value="SECURITY" />
	</bean>
	
	<bean id="AspectOrderEnum.AFTER_SECURITY" parent="aspectOrderEnumParent">
		<constructor-arg value="AFTER_SECURITY" />
	</bean>

	<bean id="AspectOrderEnum.BEFORE_CACHING" parent="aspectOrderEnumParent">
		<constructor-arg value="BEFORE_CACHING" />
	</bean>

	<bean id="AspectOrderEnum.CACHING" parent="aspectOrderEnumParent">
		<constructor-arg value="CACHING" />
	</bean>
	
	<bean id="AspectOrderEnum.AFTER_CACHING" parent="aspectOrderEnumParent">
		<constructor-arg value="AFTER_CACHING" />
	</bean>
	
	<bean id="AspectOrderEnum.BEFORE_TRANSACTION_RETRY" parent="aspectOrderEnumParent">
		<constructor-arg value="BEFORE_TRANSACTION_RETRY" />
	</bean>

	<bean id="AspectOrderEnum.TRANSACTION_RETRY" parent="aspectOrderEnumParent">
		<constructor-arg value="TRANSACTION_RETRY" />
	</bean>
	
	<bean id="AspectOrderEnum.AFTER_TRANSACTION_RETRY" parent="aspectOrderEnumParent">
		<constructor-arg value="AFTER_TRANSACTION_RETRY" />
	</bean>
	
	<bean id="AspectOrderEnum.BEFORE_TRANSACTION" parent="aspectOrderEnumParent">
		<constructor-arg value="BEFORE_TRANSACTION" />
	</bean>
	
	<bean id="AspectOrderEnum.TRANSACTION" parent="aspectOrderEnumParent">
		<constructor-arg value="TRANSACTION" />
	</bean>
	
	<bean id="AspectOrderEnum.AFTER_TRANSACTION" parent="aspectOrderEnumParent">
		<constructor-arg value="AFTER_TRANSACTION" />
	</bean>

	<bean id="AspectOrderEnum.LAST" parent="aspectOrderEnumParent">
		<constructor-arg value="LAST" />
	</bean>

</beans>

spring-bootstrap-jmx.xml

<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	                    http://www.springframework.org/schema/beans/spring-beans-2.5.xsd">

	<!-- Bean implements FactoryBean and the resulting bean created is the MBeanServer -->	
	<!-- that is appropriate for the platform. -->
	<bean id="vanguard-spring-core-management-mbeanServer" 
	    class="com.vanguard.spring.core.management.PlatformDependentMBeanServerFactoryBean" />	
</beans>

spring-bootstrap.xml

<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
	    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-2.5.xsd">

	<import resource="spring-aspectorder.xml" />
	<import resource="spring-application-event-publisher.xml" />
	<import resource="spring-property-config.xml" />

</beans>


spring-property-config.xml

<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

	<bean id="_rteValidator" class="com.vanguard.spring.core.config.support.RTEValidator" />
	
	<bean id="_propertyLocator" class="com.vanguard.spring.core.config.support.PropertyLocator" factory-method="getInstance" />

</beans>


MANIFEST.MF

Manifest-Version: 1.0
Van-SonarQube-Quality-Profile: 
Built-By: angsd
Deployment-Type: external-and-internal
Van-Created-By: u16t
Created-By: Apache Maven 3.2.5
shadowParent: shadowNone
Van-Build-ID: 19
Van-Build-Number: 19
Van-SVN-URL: http://prdsvnrepo:8080/svn/tip/ngsa/projects/project-comm
 on-components/vanguard-spring-core/branches/nga-spring-4-upgrade
Van-Node-Name: dslna254
Van-SCM-Revision: 465070
Van-Executor-Number: 0
Build-Jdk: 1.6.0_71
Van-Build-Tag: jenkins-vanguard-spring-core-nga-spring-4-upgrade-19
Van-Build-URL: http://ciserver:19090/job/vanguard-spring-core-nga-spri
 ng-4-upgrade/19/
Archiver-Version: Plexus Archiver



spring.handlers
http\://www.vanguard.com/schema/config=com.vanguard.spring.core.config.xml.VanguardConfigNamespaceHandler

spring.schemas

http\://www.vanguard.com/schema/config/vanguard-config.xsd=com/vanguard/spring/core/config/xml/vanguard-config.xsd


vault-impl-1.0-M20150106-01.jar

com.vanguard.corp.vault.password
	CredentialsFromVault.class
/*
 ****************************************************************************
 * 
 * Copyright (c)2013 The Vanguard Group of Investment Companies (VGI)
 * All rights reserved.
 * 
 * This source code is CONFIDENTIAL and PROPRIETARY to VGI. Unauthorized
 * distribution, adaptation, or use may be subject to civil and criminal
 * penalties.
 *
 ****************************************************************************
 Module Description:
 
 $HeadURL: http://prdsvnrepo:8080/svn/corp/pds/secure/BAM/apps/PasswordVault/wrappers/java/vault/tags/1.0-M20150106-01/vault-impl/src/main/java/com/vanguard/corp/vault/password/CredentialsFromVault.java $
 $LastChangedRevision: 112580 $
 $Author: uv2k $
 $LastChangedDate: 2014-02-25 12:23:30 -0500 (Tue, 25 Feb 2014) $
*/
package com.vanguard.corp.vault.password;

/**This object will store app ID credentials that were retrieved from ID Vault 
 * by calling PSDK API
 * 
 * @author uv2k
 */
public class CredentialsFromVault {
    
    private String appPassword;
    
    private String appUserName;
    
    private String appServerAddress;

    /**
     * @return the appPassword
     */
    public String getAppPassword() {
        return appPassword;
    }

    /**
     * @param appPassword the appPassword to set
     */
    public void setAppPassword(String appPassword) {
        this.appPassword = appPassword;
    }

    /**
     * @return the appUserName
     */
    public String getAppUserName() {
        return appUserName;
    }

    /**
     * @param appUserName the appUserName to set
     */
    public void setAppUserName(String appUserName) {
        this.appUserName = appUserName;
    }

    /**
     * @return the appServerAddress
     */
    public String getAppServerAddress() {
        return appServerAddress;
    }

    /**
     * @param appServerAddress the appServerAddress to set
     */
    public void setAppServerAddress(String appServerAddress) {
        this.appServerAddress = appServerAddress;
    }

}

CredentialsRequest.class

/*
 ****************************************************************************
 * 
 * Copyright (c)2013 The Vanguard Group of Investment Companies (VGI)
 * All rights reserved.
 * 
 * This source code is CONFIDENTIAL and PROPRIETARY to VGI. Unauthorized
 * distribution, adaptation, or use may be subject to civil and criminal
 * penalties.
 *
 ****************************************************************************
 Module Description:
 
 $HeadURL: http://prdsvnrepo:8080/svn/corp/pds/secure/BAM/apps/PasswordVault/wrappers/java/vault/tags/1.0-M20150106-01/vault-impl/src/main/java/com/vanguard/corp/vault/password/CredentialsRequest.java $
 $LastChangedRevision: 112580 $
 $Author: uv2k $
 $LastChangedDate: 2014-02-25 12:23:30 -0500 (Tue, 25 Feb 2014) $
*/
package com.vanguard.corp.vault.password;

/**Wrapper Request object 
 * 
 * @author uv2k
 *
 */
public class CredentialsRequest {
    
    private String vaultAppID;
    
    private VaultQuery vaultQuery;
       
    private String vaultReason;

    /**
     * @return the vaultAppID
     */
    public String getVaultAppID() {
        return vaultAppID;
    }

    /**
     * @param vaultAppID the vaultAppID to set
     */
    public void setVaultAppID(String vaultAppID) {
        this.vaultAppID = vaultAppID;
    }

    /**
     * @return the vaultQuery
     */
    public VaultQuery getVaultQuery() {
        return vaultQuery;
    }

    /**
     * @param vaultQuery the vaultQuery to set
     */
    public void setVaultQuery(VaultQuery vaultQuery) {
        this.vaultQuery = vaultQuery;
    }

    /**
     * @return the vaultReason
     */
    public String getVaultReason() {
        return vaultReason;
    }

    /**
     * @param vaultReason the vaultReason to set
     */
    public void setVaultReason(String vaultReason) {
        this.vaultReason = vaultReason;
    }
   
   }

CredentialsRetriever.class

/*
 ****************************************************************************
 * 
 * Copyright (c)2013 The Vanguard Group of Investment Companies (VGI)
 * All rights reserved.
 * 
 * This source code is CONFIDENTIAL and PROPRIETARY to VGI. Unauthorized
 * distribution, adaptation, or use may be subject to civil and criminal
 * penalties.
 *
 ****************************************************************************
 Module Description:
 
 $HeadURL: http://prdsvnrepo:8080/svn/corp/pds/secure/BAM/apps/PasswordVault/wrappers/java/vault/tags/1.0-M20150106-01/vault-impl/src/main/java/com/vanguard/corp/vault/password/CredentialsRetriever.java $
 $LastChangedRevision: 150942 $
 $Author: uv2k $
 $LastChangedDate: 2014-12-05 12:44:06 -0500 (Fri, 05 Dec 2014) $
*/
package com.vanguard.corp.vault.password;

import com.vanguard.corp.vault.password.exceptions.InvalidVaultRequestException;
import com.vanguard.corp.vault.password.exceptions.VaultException;
import com.vanguard.corp.vault.password.utils.PasswordVaultUtils;
import com.vanguard.corp.vault.password.utils.VaultConstants;

import javapasswordsdk.PSDKPassword;
import javapasswordsdk.PSDKPasswordRequest;
import javapasswordsdk.exceptions.PSDKException;

/**
 * @author uv2k
 *
 */
public class CredentialsRetriever implements ICredentialsRetriever {
    /**
     * This method takes wrapper request object and returns CredentialsFromVault object that contains credentials retrieved from Vault
     * @param req
     * @return creds
     * @throws VaultException
     */
	public static final String EMPTY_STRING = "";
    public CredentialsFromVault getCredentials(CredentialsRequest req) throws VaultException{
        
        CredentialsFromVault passData = null;
        
        try {
            PSDKPasswordRequest passRequest = new PSDKPasswordRequest();
            passRequest.setAppID(req.getVaultAppID());
            
            String queryString = req.getVaultQuery().toString();
            
            PasswordVaultUtils.parseAndValidateQueryString(queryString);
            
            passRequest.setQuery(queryString);
            
            if (req.getVaultReason()!= null ){
            passRequest.setReason(req.getVaultReason());
            }
            
            // Sending the request to get the password
            passData = retrieveFromVault(passRequest);
                        
        }         
        catch (PSDKException ex) {
        	
            throw new VaultException(ex.getMessage());
        }
        return passData;
    }
    /**
     * This method takes two strings - AppID and Vault Query - and returns CredentialsFromVault object that contains credentials retrieved from Vault
     * @param vaultId
     * @param queryString
     * @return creds
     * @throws VaultException
     */
	public CredentialsFromVault getCredentials (String vaultAppId, String queryString) throws VaultException{
    	return getCredentials(vaultAppId, queryString, null);
    }
	   /**
     * This method takes three strings - AppID, Vault Query and Reason Code - and returns CredentialsFromVault object that contains credentials retrieved from Vault
     * Reason Code is optional parameter.
     * @param vaultId
     * @param queryString
     * @param reasonCode
     * @return creds
     * @throws VaultException
     */
    public CredentialsFromVault getCredentials (String vaultAppId, String queryString, String reasonCode) throws VaultException{
        
        CredentialsFromVault passData = new CredentialsFromVault();
            
        try {
            PasswordVaultUtils.parseAndValidateQueryString(queryString);
        	
        	PSDKPasswordRequest passRequest = new PSDKPasswordRequest();
            passRequest.setAppID(vaultAppId);
            passRequest.setQuery(queryString);

            if (reasonCode != null ){
            passRequest.setReason(reasonCode);
            }
	
            passRequest.setReason(VaultConstants.DEFAULT_REASON_CODE);
            
            passData = retrieveFromVault(passRequest);
                        
        } 
        catch(InvalidVaultRequestException e){
        	
        	throw new VaultException(e);        	
        }
        catch (PSDKException ex) {
        	            
            throw new VaultException(ex);
        }
        
        return passData;
    }
   
	public String getCredentials(String ssiString)
			throws VaultException {
		CredentialsRequest req = new CredentialsRequest();
		
		ParsedSSIstring parsedString = PasswordVaultUtils.parseSSIstring(ssiString);
		
		String strType = parsedString.getType();			
		
		req.setVaultAppID(parsedString.getAppId());
		req.setVaultQuery(parsedString.getQry());
		
		CredentialsFromVault creds = getCredentials(req); 
		
		if (strType.equalsIgnoreCase(VaultConstants.TYPE_PASSWORD))
				return creds.getAppPassword();
		else if (strType.equalsIgnoreCase(VaultConstants.TYPE_USERNAME))
				return creds.getAppUserName();
		else throw new InvalidVaultRequestException ("Invalid SSI string: " + strType + " is invalid credential type");
	}
        
	private CredentialsFromVault retrieveFromVault(PSDKPasswordRequest passRequest) throws PSDKException {
		CredentialsFromVault passData;
		PSDKPassword password;
		password = javapasswordsdk.PasswordSDK.getPassword(passRequest);
		           
		passData = new CredentialsFromVault();
		
		String pass = password.getAttribute(VaultConstants.VAULT_PARAM_PASSWORD);
		passData.setAppPassword(pass);
		
		String userName = password.getAttribute(VaultConstants.VAULT_PARAM_USERNAME);
		passData.setAppUserName(userName);
		
		// Handles case where Address field is not defined, like in case
		//with repository only IDs. 
		
		try{
		String address = password.getAttribute(VaultConstants.VAULT_PARAM_ADDRESS);
		passData.setAppServerAddress(address);
		}
		catch (PSDKException ex){
			//Set default value of empty string Address field if it is not defined in Vault
			passData.setAppServerAddress(EMPTY_STRING);
		}
				
		return passData;
	}
	
}

ParsedSSIstring.class

/*
 ****************************************************************************
 *
 * Copyright (c)2009 The Vanguard Group of Investment Companies (VGI)
 * All rights reserved.
 *
 * This source code is CONFIDENTIAL and PROPRIETARY to VGI. Unauthorized
 * distribution, adaptation, or use may be subject to civil and criminal
 * penalties.
 *
 ****************************************************************************
 Module Description:

 $HeadURL:$
 $LastChangedRevision:$
 $Author:$
 $LastChangedDate:$
*/
package com.vanguard.corp.vault.password;

public class ParsedSSIstring {
	
	String mAppId;
	
	VaultQuery mQry;
	
	String mType;

	public String getAppId() {
		return mAppId;
	}

	public void setAppId(String mAppId) {
		this.mAppId = mAppId;
	}

	public VaultQuery getQry() {
		return mQry;
	}

	public void setQry(VaultQuery mQry) {
		this.mQry = mQry;
	}

	public String getType() {
		return mType;
	}

	public void setType(String mtype) {
		this.mType = mtype;
	}

}

VaultQuery.class

/*
 ****************************************************************************
 * 
 * Copyright (c)2013 The Vanguard Group of Investment Companies (VGI)
 * All rights reserved.
 * 
 * This source code is CONFIDENTIAL and PROPRIETARY to VGI. Unauthorized
 * distribution, adaptation, or use may be subject to civil and criminal
 * penalties.
 *
 ****************************************************************************
 Module Description:
 
 $HeadURL: http://prdsvnrepo:8080/svn/corp/pds/secure/BAM/apps/PasswordVault/wrappers/java/vault/tags/1.0-M20150106-01/vault-impl/src/main/java/com/vanguard/corp/vault/password/VaultQuery.java $
 $LastChangedRevision: 112580 $
 $Author: uv2k $
 $LastChangedDate: 2014-02-25 12:23:30 -0500 (Tue, 25 Feb 2014) $
*/
package com.vanguard.corp.vault.password;

import java.util.Map;

import com.vanguard.corp.vault.password.utils.VaultConstants;

/**Auxiliary object to store the quey string values if they are configured 
 * in SSI as distinct variables (as opposed to full query string) 
 * 
 * @author uv2k
 *
 */
public class VaultQuery {
    	
    private String querySafe;
    
    private String queryFolder;
    
    private String queryObject;

    public VaultQuery(){
    	//Default Constructor
    }
    
    //Optional: this Constructor will build VaulQuery object from the map with valid parameters 
    public VaultQuery(Map<String, String> requestMap) {
    	setQuerySafe(requestMap.get(VaultConstants.SAFE));
    	setQueryFolder(requestMap.get(VaultConstants.FOLDER));
    	setQueryObject(requestMap.get(VaultConstants.OBJECT));
    }

	/**
     * @return the querySafe
     */
    public String getQuerySafe() {
        return querySafe;
    }

    /**
     * @param querySafe the querySafe to set
     */
    public void setQuerySafe(String querySafe) {
        this.querySafe = querySafe;
    }

    /**
     * @return the queryFolder
     */
    public String getQueryFolder() {
        return queryFolder;
    }

    /**
     * @param queryFolder the queryFolder to set
     */
    public void setQueryFolder(String queryFolder) {
        this.queryFolder = queryFolder;
    }

    /**
     * @return the queryObject
     */
    public String getQueryObject() {
        return queryObject;
    }

    /**
     * @param queryObject the queryObject to set
     */
    public void setQueryObject(String queryObject) {
        this.queryObject = queryObject;
    }
    
    /** Override toString() method to return full valid query string in the format:
     *  "SAFE=***;FOLDER=***;OBJECT=***"
     *  @return toString
     */
    @Override 
    public String toString(){
     StringBuffer sb = new StringBuffer();
     
     sb.append(VaultConstants.SAFE);
     sb.append(VaultConstants.EQUAL_SIGN);
     sb.append(querySafe);
     
     sb.append(VaultConstants.SEMI_COLON);
     sb.append(VaultConstants.FOLDER);
     sb.append(VaultConstants.EQUAL_SIGN);
     sb.append(queryFolder);
     
     sb.append(VaultConstants.SEMI_COLON);
     sb.append(VaultConstants.OBJECT);
     sb.append(VaultConstants.EQUAL_SIGN);
     sb.append(queryObject);
          
     return sb.toString();
    }

}

com.vanguard.corp.vault.password.utils

PasswordVaultUtils.class

/*
 ****************************************************************************
 *
 * Copyright (c)2009 The Vanguard Group of Investment Companies (VGI)
 * All rights reserved.
 *
 * This source code is CONFIDENTIAL and PROPRIETARY to VGI. Unauthorized
 * distribution, adaptation, or use may be subject to civil and criminal
 * penalties.
 *
 ****************************************************************************
 Module Description:

 $HeadURL: http://prdsvnrepo:8080/svn/corp/pds/secure/BAM/apps/PasswordVault/wrappers/java/vault/tags/1.0-M20150106-01/vault-impl/src/main/java/com/vanguard/corp/vault/password/utils/PasswordVaultUtils.java $
 $LastChangedRevision: 112580 $
 $Author: uv2k $
 $LastChangedDate: 2014-02-25 12:23:30 -0500 (Tue, 25 Feb 2014) $
*/
package com.vanguard.corp.vault.password.utils;

import java.util.ArrayList;
import java.util.List;
import java.util.StringTokenizer;

import com.vanguard.corp.vault.password.ParsedSSIstring;
import com.vanguard.corp.vault.password.VaultQuery;
import com.vanguard.corp.vault.password.exceptions.InvalidVaultRequestException;

public class PasswordVaultUtils {

	private static List<String> validationList = null; 
	
	public static final String APP_ID = "appID";
		
	public static final String QUERY = "query";
	
	public static final String USERNAME = "USERNAME";
	
	public static final String PASSWORD = "PASSWORD"; 

	public static final String TYPE = "type"; 
	
	static
	{
		validationList = new ArrayList<String>();
		validationList.add(VaultConstants.SAFE);
		validationList.add(VaultConstants.FOLDER);
		validationList.add(VaultConstants.OBJECT);
	}
	
	public static void parseAndValidateQueryString (String  queryString) throws InvalidVaultRequestException{
			
		List<String> parsedQueryString = parseQueryString(queryString, VaultConstants.SEMI_COLON);
		
		if (parsedQueryString.size()!= 3){
			throw new InvalidVaultRequestException("Query String is invalid");
		}
		
		for (String str : parsedQueryString)
		{
			String [] qryEntry = str.split(VaultConstants.EQUAL_SIGN);
			String key = qryEntry[0].toUpperCase();
			
			if (isValidKey(key)){
						continue;
			}
			else{
				throw new InvalidVaultRequestException("Invalid entry in Query string. " + key + " is invalid parameter");
			}
		}

	}

	private static List<String> parseQueryString(String queryString, String delimiter)
			throws InvalidVaultRequestException {
		
		List<String> queryElements = new ArrayList<String>();
		
		StringTokenizer tok = new StringTokenizer(queryString, delimiter);
		
			while(tok.hasMoreTokens()){
				queryElements.add((String)tok.nextElement());
			}
		return queryElements;
	}

	private static boolean isValidKey(String key) throws InvalidVaultRequestException{
		
			return validationList.contains(key)? true : false;
		}

	public static ParsedSSIstring parseSSIstring(String ssiString) throws InvalidVaultRequestException {

		ParsedSSIstring parsedString = new ParsedSSIstring();
		
		boolean isAppIdPassed = false;
		boolean isQueryStringPassed = false;
		boolean isTypePassed = false;		
		

		StringTokenizer tok = new StringTokenizer(ssiString, VaultConstants.SEMI_COLON);
		
		if (tok.countTokens()!= 3){
			throw new InvalidVaultRequestException("Invalid ID VAULT connection string: number of parameters is invalid");
		}

		
		while(tok.hasMoreTokens()){

			String strToken = tok.nextToken();
			
			String [] arrToken = strToken.split(VaultConstants.EQUAL_SIGN);	
			
			if (arrToken.length!= 2){
				throw new InvalidVaultRequestException("Parameter substring '"+strToken+"' is invalid");
			}
			
			String strLabel = arrToken[0];
			String strValue = arrToken[1];
			
			if (strLabel.equalsIgnoreCase(APP_ID)){
				if (isAppIdPassed)
					throw new InvalidVaultRequestException("Parameter "+strLabel.toUpperCase()+" is defined more than once");
				else{
					isAppIdPassed = true;
					parsedString.setAppId(strValue);
					}
				}
			else if (strLabel.equalsIgnoreCase(QUERY)){
				if (isQueryStringPassed)
					throw new InvalidVaultRequestException("Parameter "+strLabel.toUpperCase()+" is defined more than once");
				else {
					isQueryStringPassed = true;
					parsedString.setQry(buildAndValidateQuery(strValue));
				}
			}
			else if (strLabel.equalsIgnoreCase(TYPE)){
				if (isTypePassed)
					throw new InvalidVaultRequestException("Parameter "+strLabel.toUpperCase()+" is defined more than once");
				else{
				isTypePassed = true;
				parsedString.setType(strValue);
				}
			}
			else{
				throw new InvalidVaultRequestException("Invalid entry in SSI string. " + strLabel.toUpperCase() + " is invalid parameter");
			}							
		}
		return parsedString;
	}

	private static VaultQuery buildAndValidateQuery(String strValue) throws InvalidVaultRequestException {
		List <String> qryElements = parseQueryString(strValue,VaultConstants.COMMA);
		VaultQuery vaultQry = new VaultQuery();

		if (qryElements.size()!= 3){
			throw new InvalidVaultRequestException("Query String is invalid");
		}
		
		for (String str : qryElements)
		{
			String [] qryEntry = str.split(VaultConstants.COLON);
			if (VaultConstants.SAFE.equalsIgnoreCase(qryEntry[0]))
				vaultQry.setQuerySafe(qryEntry[1]);
			else if (VaultConstants.FOLDER.equalsIgnoreCase(qryEntry[0]))
				vaultQry.setQueryFolder(qryEntry[1]);
			else if (VaultConstants.OBJECT.equalsIgnoreCase(qryEntry[0]))
				vaultQry.setQueryObject(qryEntry[1]);
			else{
				throw new InvalidVaultRequestException("Invalid entry in Query string. " + qryEntry[0].toUpperCase() + " is invalid parameter");
			}
		}
		return vaultQry;
	}
}

VaultConstants.class
/*
 ****************************************************************************
 * 
 * Copyright (c)2013 The Vanguard Group of Investment Companies (VGI)
 * All rights reserved.
 * 
 * This source code is CONFIDENTIAL and PROPRIETARY to VGI. Unauthorized
 * distribution, adaptation, or use may be subject to civil and criminal
 * penalties.
 *
 ****************************************************************************
 Module Description:
 
 $HeadURL: http://prdsvnrepo:8080/svn/corp/pds/secure/BAM/apps/PasswordVault/wrappers/java/vault/tags/1.0-M20150106-01/vault-impl/src/main/java/com/vanguard/corp/vault/password/utils/VaultConstants.java $
 $LastChangedRevision: 112580 $
 $Author: uv2k $
 $LastChangedDate: 2014-02-25 12:23:30 -0500 (Tue, 25 Feb 2014) $
*/
package com.vanguard.corp.vault.password.utils;

/**
 * @author uv2k
 *
 */
public class VaultConstants {

	public static final String SEMI_COLON = ";";
	public static final String EQUAL_SIGN = "=";
	public static final String COLON = ":";
	public static final String COMMA = ",";
	
	public static final String VAULT_PARAM_PASSWORD = "Password";
    public static final String VAULT_PARAM_USERNAME = "PassProps.UserName";
    public static final String VAULT_PARAM_ADDRESS = "PassProps.Address";
    
    public static final String SAFE = "SAFE"; 
    public static final String FOLDER = "FOLDER"; 
    public static final String OBJECT = "OBJECT";
	public static final String DEFAULT_REASON_CODE = "Reason Code"; 

	public static final String TYPE_PASSWORD = "password";
    public static final String TYPE_USERNAME = "username";

}

META-INF
	Maven
		com.vanguard.corp
			vault-impl
				pom.properties
#Generated by Maven
#Tue Jan 06 12:46:00 EST 2015
version=1.0-M20150106-01
groupId=com.vanguard.corp
artifactId=vault-impl


pom.xml
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
	    <groupId>com.vanguard.corp</groupId>
	    <artifactId>vault</artifactId>
	    <version>1.0-M20150106-01</version>
     </parent>

    <!-- Version will come from multimodule parent -->
    <groupId>com.vanguard.corp</groupId>
    <artifactId>vault-impl</artifactId>
    <packaging>jar</packaging>

    <name>vault-impl</name>

    <scm>
        <connection>scm:svn:http://prdsvnrepo:8080/svn/corp/pds/secure/BAM/apps/PasswordVault/wrappers/java/vault/tags/1.0-M20150106-01/vault-impl</connection>
        <developerConnection>scm:svn:http://prdsvnrepo:8080/svn/corp/pds/secure/BAM/apps/PasswordVault/wrappers/java/vault/tags/1.0-M20150106-01/vault-impl</developerConnection>
    </scm>

    <developers>
        <developer>
            <id>UV2K</id>
            <name>Vadim Krasnopolsky</name>
            <roles>
                <role>Developer</role>
            </roles>				
        </developer>
    </developers>	
    <mailingLists>
        <mailingList>
            <name>uv2k@vanguard.com</name>		
        </mailingList>
    </mailingLists>

	<properties>
		<deployment.type>external-and-internal</deployment.type>
	</properties>

    <dependencies>
        <!-- Depend on this project's API module. -->
        <dependency>
            <groupId>com.vanguard.corp</groupId>
            <artifactId>vault-api</artifactId>
            <version>${project.version}</version>
            <!-- <version>1.0-SNAPSHOT</version> -->
            
        </dependency>

        <!-- test dependencies -->
		<dependency>
		  <groupId>com.vanguard</groupId>
		  <artifactId>junit-dependencies</artifactId>
		  <version>1.0-M20100223-01</version>
		  <type>pom</type>
		  <scope>test</scope>
		</dependency>

        <!-- 
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-context</artifactId>
            <version>2.5.6</version>
        </dependency>
         -->
		<dependency>
		  <groupId>com.cyberark</groupId>
		  <artifactId>javapasswordsdk</artifactId>
		  <version>7.0</version>
		</dependency>
    </dependencies>
</project>


MANIFEST.MF
Manifest-Version: 1.0
Deployment-Type: external-and-internal
Archiver-Version: Plexus Archiver
Built-By: angsd
Van-Build-ID: 2015-01-06_12-44-18
Created-By: Apache Maven 3.0.4
Van-Node-Name: dvlva114
Van-SonarQube-Quality-Profile: 
Van-Build-Number: 23
Van-Build-URL: http://dslva254:19099/job/vault-trunk-mm/23/
Van-Executor-Number: 2
shadowParent: shadowNone
Build-Jdk: 1.5.0_33
Van-Build-Tag: jenkins-vault-trunk-mm-23
Van-Created-By: uv2k
Van-SCM-Revision: 150965
Van-SVN-URL: http://prdsvnrepo:8080/svn/corp/pds/secure/BAM/apps/Passw
 ordVault/wrappers/java/vault/trunk



vault-api-1.0-M20150106-01.jar

	com.vanguard.corp.vault.password

/*
 ****************************************************************************
 * 
 * Copyright (c)2013 The Vanguard Group of Investment Companies (VGI)
 * All rights reserved.
 * 
 * This source code is CONFIDENTIAL and PROPRIETARY to VGI. Unauthorized
 * distribution, adaptation, or use may be subject to civil and criminal
 * penalties.
 *
 ****************************************************************************
 Module Description:
 
 $HeadURL: http://prdsvnrepo:8080/svn/corp/pds/secure/BAM/apps/PasswordVault/wrappers/java/vault/tags/1.0-M20150106-01/vault-api/src/main/java/com/vanguard/corp/vault/password/ICredentialsRetriever.java $
 $LastChangedRevision: 112580 $
 $Author: uv2k $
 $LastChangedDate: 2014-02-25 12:23:30 -0500 (Tue, 25 Feb 2014) $
 */
package com.vanguard.corp.vault.password;

import com.vanguard.corp.vault.password.exceptions.VaultException;

/**	
 * 
 * @author uv2k
 * 
 */
public interface ICredentialsRetriever {
	   
    /**
     * This method takes ID Vault connection string in this format: 
     * type=<PASSWORD/USERNAME>;appID=<APP_ID>;query=safe:<SAFE>,folder:Root,object:<OBJECT>  
     * @param ssiString
     * @return credentialString
     * @throws VaultException
     */
    public String getCredentials(String ssiString) throws VaultException;    

}

com.vanguard.corp.vault.password.exceptions
	InvalidVaultRequestException.class
/*
 ****************************************************************************
 *
 * Copyright (c)2009 The Vanguard Group of Investment Companies (VGI)
 * All rights reserved.
 *
 * This source code is CONFIDENTIAL and PROPRIETARY to VGI. Unauthorized
 * distribution, adaptation, or use may be subject to civil and criminal
 * penalties.
 *
 ****************************************************************************
 Module Description:

 $HeadURL: http://prdsvnrepo:8080/svn/corp/pds/secure/BAM/apps/PasswordVault/wrappers/java/vault/tags/1.0-M20150106-01/vault-api/src/main/java/com/vanguard/corp/vault/password/exceptions/InvalidVaultRequestException.java $
 $LastChangedRevision: 106659 $
 $Author: uv2k $
 $LastChangedDate: 2013-12-02 14:09:13 -0500 (Mon, 02 Dec 2013) $
*/
package com.vanguard.corp.vault.password.exceptions;

/** Query String validation exception 
 * 
 * @author UV2K
 *
 */
public class InvalidVaultRequestException extends VaultException {

	private static final long serialVersionUID = 1L;

	public InvalidVaultRequestException(String errorMessage) {
        super(errorMessage);
    }
}

	VaultException.class

/*
 ****************************************************************************
 *
 * Copyright (c)2009 The Vanguard Group of Investment Companies (VGI)
 * All rights reserved.
 *
 * This source code is CONFIDENTIAL and PROPRIETARY to VGI. Unauthorized
 * distribution, adaptation, or use may be subject to civil and criminal
 * penalties.
 *
 ****************************************************************************
 Module Description:

 $HeadURL: http://prdsvnrepo:8080/svn/corp/pds/secure/BAM/apps/PasswordVault/wrappers/java/vault/tags/1.0-M20150106-01/vault-api/src/main/java/com/vanguard/corp/vault/password/exceptions/VaultException.java $
 $LastChangedRevision: 106659 $
 $Author: uv2k $
 $LastChangedDate: 2013-12-02 14:09:13 -0500 (Mon, 02 Dec 2013) $
*/
package com.vanguard.corp.vault.password.exceptions;


/** Wrapper Exception. 
 * 
 * @author UV2K
 *
 */
public class VaultException extends Exception {	

	private static final long serialVersionUID = 1L;

	public VaultException (String messageFromVault){

		super("VAULT ERROR: " + messageFromVault);				
	}
	public VaultException (Exception ex){

		super(ex);				
	}
}

META-INF
	Maven
		com.vanguard.corp
			vault-api
				pom.properties
#Generated by Maven
#Tue Jan 06 12:45:56 EST 2015
version=1.0-M20150106-01
groupId=com.vanguard.corp
artifactId=vault-api


pom.xml
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
	    <groupId>com.vanguard.corp</groupId>
	    <artifactId>vault</artifactId>
	    <version>1.0-M20150106-01</version>
     </parent>
    

    <!-- Version will come from multimodule parent --> 
    <groupId>com.vanguard.corp</groupId>
    <artifactId>vault-api</artifactId>
    <packaging>jar</packaging>

    <name>vault-api</name>

    <scm>
        <connection>scm:svn:http://prdsvnrepo:8080/svn/corp/pds/secure/BAM/apps/PasswordVault/wrappers/java/vault/tags/1.0-M20150106-01/vault-api</connection>
        <developerConnection>scm:svn:http://prdsvnrepo:8080/svn/corp/pds/secure/BAM/apps/PasswordVault/wrappers/java/vault/tags/1.0-M20150106-01/vault-api</developerConnection>
    </scm>

    <developers>
        <developer>
            <id>UV2K</id>
            <name>Vadim Krasnopolsky</name>
            <roles>
                <role>Developer</role>
            </roles>				
        </developer>
    </developers>	
    <mailingLists>
        <mailingList>
            <name>uv2k@vanguard.com</name>		
        </mailingList>
    </mailingLists>

	<properties>
		<deployment.type>external-and-internal</deployment.type>
	</properties>

    <dependencies>
        <!-- test dependencies -->
		<dependency>
		  <groupId>com.vanguard</groupId>
		  <artifactId>junit-dependencies</artifactId>
		  <version>1.0-M20100223-01</version>
		  <type>pom</type>
		  <scope>test</scope>
		</dependency>
       
    </dependencies>
</project>


MANIFEST.MF
Manifest-Version: 1.0
Deployment-Type: external-and-internal
Archiver-Version: Plexus Archiver
Built-By: angsd
Van-Build-ID: 2015-01-06_12-44-18
Created-By: Apache Maven 3.0.4
Van-Node-Name: dvlva114
Van-SonarQube-Quality-Profile: 
Van-Build-Number: 23
Van-Build-URL: http://dslva254:19099/job/vault-trunk-mm/23/
Van-Executor-Number: 2
shadowParent: shadowNone
Build-Jdk: 1.5.0_33
Van-Build-Tag: jenkins-vault-trunk-mm-23
Van-Created-By: uv2k
Van-SCM-Revision: 150965
Van-SVN-URL: http://prdsvnrepo:8080/svn/corp/pds/secure/BAM/apps/Passw
 ordVault/wrappers/java/vault/trunk



C:\Users\ubpv\.m2\repository\com\vanguard\commons-functors\2.0-M20150604-01\commons-functors-2.0-M20150604-01.jar
	com.vanguard.predicates.number.comparison
		DoubleEqualsPredicate.class

/*
 ****************************************************************************
 * 
 * Copyright (c)2009 The Vanguard Group of Investment Companies (VGI)
 * All rights reserved.
 * 
 * This source code is CONFIDENTIAL and PROPRIETARY to VGI. Unauthorized
 * distribution, adaptation, or use may be subject to civil and criminal
 * penalties.
 *
 ****************************************************************************
 Module Description:
 
 $HeadURL: http://prdsvnrepo:8080/svn/tip/ngsa/projects/project-common-components/commons-functors/tags/2.0-M20150604-01/src/main/java/com/vanguard/predicates/number/comparison/DoubleEqualsPredicate.java $
 $LastChangedRevision: 3849 $
 $Author: u16t $
 $LastChangedDate: 2009-07-07 20:53:51 -0400 (Tue, 07 Jul 2009) $
 */
package com.vanguard.predicates.number.comparison;

import org.apache.commons.collections.Predicate;

/**
 * Compares double values for equality. Typically a constant double value will be passed in as the constructor argument.
 * <p />
 * <b>Examples:</b><br />
 * <code>
 * Predicate doubleEqualsPredicate = new DoubleEqualsPredicate(1.23d); <br />
 * doubleEqualsPredicate.evaluate(1.23d) = true <br />
 * doubleEqualsPredicate.evaluate(Double.valueOf(1.23)) = true <br />
 * doubleEqualsPredicate.evaluate(null) = false <br />
 * doubleEqualsPredicate.evaluate("foobar") = false <br />
 * doubleEqualsPredicate.evaluate(Double.valueOf(4.56)) = false <br />
 * </code>
 * 
 * @author u16t
 */
public class DoubleEqualsPredicate implements Predicate {

    private double comparisonValue;

    public DoubleEqualsPredicate(double comparisonValue) {
        this.comparisonValue = comparisonValue;
    }

    public boolean evaluate(Object object) {
        if (object instanceof Double) {
            return ((Double) object).equals(comparisonValue);
        }
        return false;
    }
}

	DoubleGreaterThanPredicate.class

/*
 ****************************************************************************
 * 
 * Copyright (c)2009 The Vanguard Group of Investment Companies (VGI)
 * All rights reserved.
 * 
 * This source code is CONFIDENTIAL and PROPRIETARY to VGI. Unauthorized
 * distribution, adaptation, or use may be subject to civil and criminal
 * penalties.
 *
 ****************************************************************************
 Module Description:
 
 $HeadURL: http://prdsvnrepo:8080/svn/tip/ngsa/projects/project-common-components/commons-functors/tags/2.0-M20150604-01/src/main/java/com/vanguard/predicates/number/comparison/DoubleGreaterThanPredicate.java $
 $LastChangedRevision: 3921 $
 $Author: u16t $
 $LastChangedDate: 2009-07-08 20:49:18 -0400 (Wed, 08 Jul 2009) $
 */
package com.vanguard.predicates.number.comparison;

import org.apache.commons.collections.Predicate;

/**
 * Compares whether a provided double is greater than or equal to another double. Typically a constant double value will be passed in as the
 * constructor argument.
 * <p />
 * <b>Examples:</b><br />
 * <code>
 * Predicate greaterPredicate = new DoubleGreaterThanPredicate(1.23d);<br />
 * greaterPredicate.evaluate(7.89d) = true <br />
 * greaterPredicate.evaluate(Double.valueOf(4.56)) = true <br />
 * greaterPredicate.evaluate(1.23d) = false <br /> 
 * greaterPredicate.evaluate(Double.valueOf(0.12)) = false <br />
 * greaterPredicate.evaluate(null) = false <br />
 * greaterPredicate.evaluate("foobar") = false <br />
 * </code> 
 * 
 * @author u16t
 */
public class DoubleGreaterThanPredicate implements Predicate {

    private double comparisonValue;

    public DoubleGreaterThanPredicate(double comparisonValue) {
        this.comparisonValue = comparisonValue;
    }

    public boolean evaluate(Object object) {
        if (object instanceof Double) {
            return ((Double) object).compareTo(comparisonValue) > 0;
        }
        return false;
    }
}

DoubleLessThanPredicate.class

/*
 ****************************************************************************
 * 
 * Copyright (c)2009 The Vanguard Group of Investment Companies (VGI)
 * All rights reserved.
 * 
 * This source code is CONFIDENTIAL and PROPRIETARY to VGI. Unauthorized
 * distribution, adaptation, or use may be subject to civil and criminal
 * penalties.
 *
 ****************************************************************************
 Module Description:
 
 $HeadURL: http://prdsvnrepo:8080/svn/tip/ngsa/projects/project-common-components/commons-functors/tags/2.0-M20150604-01/src/main/java/com/vanguard/predicates/number/comparison/DoubleLessThanPredicate.java $
 $LastChangedRevision: 3921 $
 $Author: u16t $
 $LastChangedDate: 2009-07-08 20:49:18 -0400 (Wed, 08 Jul 2009) $
*/
package com.vanguard.predicates.number.comparison;

import org.apache.commons.collections.Predicate;

/**
 * Compares whether a provided double is less than or equal to another double. Typically a constant double value will be passed in as the
 * constructor argument.
 * <p />
 * <b>Examples:</b><br />
 * <code>
 * Predicate lessPredicate = new DoubleLessThanPredicate(1.23d);<br />
 * lessPredicate.evaluate(0.12d) = true <br />
 * lessPredicate.evaluate(Double.valueOf(-1.01)) = true <br />
 * lessPredicate.evaluate(1.23d) = false <br /> 
 * lessPredicate.evaluate(Double.valueOf(4.56)) = false <br />
 * lessPredicate.evaluate(null) = false <br />
 * lessPredicate.evaluate("foobar") = false <br />
 * </code> 
 * 
 * @author u16t
 */
public class DoubleLessThanPredicate implements Predicate {

    private double comparisonValue;

    public DoubleLessThanPredicate(double comparisonValue) {
        this.comparisonValue = comparisonValue;
    }

    public boolean evaluate(Object object) {
        if (object instanceof Double) {
            return ((Double) object).compareTo(comparisonValue) < 0;
        }
        return false;
    }

}

com.vanguard.predicates.string
	StandaloneStringPredicate.class

/*
 ****************************************************************************
 * 
 * Copyright (c)2009 The Vanguard Group of Investment Companies (VGI)
 * All rights reserved.
 * 
 * This source code is CONFIDENTIAL and PROPRIETARY to VGI. Unauthorized
 * distribution, adaptation, or use may be subject to civil and criminal
 * penalties.
 *
 ****************************************************************************
 Module Description:
 
 $HeadURL: http://prdsvnrepo:8080/svn/tip/ngsa/projects/project-common-components/commons-functors/tags/2.0-M20150604-01/src/main/java/com/vanguard/predicates/string/StandaloneStringPredicate.java $
 $LastChangedRevision: 10355 $
 $Author: u16t $
 $LastChangedDate: 2010-02-05 18:43:29 -0500 (Fri, 05 Feb 2010) $
 */
package com.vanguard.predicates.string;

import org.apache.commons.collections.Predicate;
import org.apache.commons.lang.StringUtils;

/**
 * Case-insensitive evaluation of whether a String is contained standalone within another String. Standalone is defined as surrounded only by
 * delimiters.
 * <p />
 * <b>Examples:</b><br />
 * <code>
 * Predicate standaloneStringPredicate = new StandaloneStringPredicate("SSN", "_-");<br />
 * standaloneStringPredicate.evaluate("ssn") = true <br />
 * standaloneStringPredicate.evaluate("SSN-NUMBER") = true <br />
 * standaloneStringPredicate.evaluate("CLIENT-SSN-NO") = true <br />
 * standaloneStringPredicate.evaluate("MY_SSN") = true <br />
 * standaloneStringPredicate.evaluate(null) = false <br />
 * standaloneStringPredicate.evaluate("issn") = false <br /> 
 * standaloneStringPredicate.evaluate("A-ISSN-NO") = false <br /> 
 * standaloneStringPredicate.evaluate("A*SSN*NO") = false <br /> 
 * standaloneStringPredicate.evaluate(Double.valueOf(1.23)) = false <br />
 * standaloneStringPredicate.evaluate("FOOBAR") = false <br />
 * </code>
 * 
 * @author u16t
 */
public class StandaloneStringPredicate implements Predicate {

    private static final String DEFAULT_DELIMITERS = " ";

    private static final String STARTS_WITH_PATTERN = "%1$s%2$c";

    private static final String ENDS_WITH_PATTERN = "%2$c%1$s";

    private static final String MIDDLE_PATTERN = "%2$c%1$s%2$c";

    private String standaloneString;

    private String delimiterString;

    public StandaloneStringPredicate(String compareString) {
        this(compareString, DEFAULT_DELIMITERS);
    }

    /**
     * Constructor accepting a String of delimiters. Each character in the String will be used as a delimiter.
     */
    public StandaloneStringPredicate(String standaloneString, String delimiterString) {
        if (standaloneString == null) {
            throw new IllegalArgumentException("Must provide a non-null comparison String.");
        }
        if (delimiterString == null) {
            throw new IllegalArgumentException("Must provide a non-null delimiter String.");
        }
        this.standaloneString = standaloneString;
        this.delimiterString = delimiterString;
    }

    public boolean evaluate(Object object) {
        if (object instanceof String) {
            String evaluateString = (String) object;

            if (StringUtils.equalsIgnoreCase(standaloneString, evaluateString)) {
                return true;
            }

            for (char delimiter : delimiterString.toCharArray()) {
                if (startsWithIgnoreCase(evaluateString, String.format(STARTS_WITH_PATTERN, standaloneString, delimiter))
                        || endsWithIgnoreCase(evaluateString, String.format(ENDS_WITH_PATTERN, standaloneString, delimiter))
                        || StringUtils.containsIgnoreCase(evaluateString, String.format(MIDDLE_PATTERN, standaloneString, delimiter))) {
                    return true;
                }
            }
        }
        return false;
    }
    
    static boolean startsWithIgnoreCase(String evaluateString, String searchString) {
        return StringUtils.containsIgnoreCase(evaluateString, searchString) && (StringUtils.indexOf(evaluateString.toUpperCase(), searchString.toUpperCase()) == 0);
    }
    
    static boolean endsWithIgnoreCase(String evaluateString, String searchString) {
        
        if(searchString.length() > evaluateString.length()) {
            return false;
        }
        
        return StringUtils.containsIgnoreCase(evaluateString, searchString) && (StringUtils.lastIndexOf(evaluateString.toUpperCase(), searchString.toUpperCase()) == evaluateString.length() - searchString.length());
    }
}

StringInArrayOrCollectionPredicate.class

/*
 ****************************************************************************
 * 
 * Copyright (c)2009 The Vanguard Group of Investment Companies (VGI)
 * All rights reserved.
 * 
 * This source code is CONFIDENTIAL and PROPRIETARY to VGI. Unauthorized
 * distribution, adaptation, or use may be subject to civil and criminal
 * penalties.
 *
 ****************************************************************************
 Module Description:
 
 $HeadURL: http://prdsvnrepo:8080/svn/tip/ngsa/projects/project-common-components/commons-functors/tags/2.0-M20150604-01/src/main/java/com/vanguard/predicates/string/StringInArrayOrCollectionPredicate.java $
 $LastChangedRevision: 3849 $
 $Author: u16t $
 $LastChangedDate: 2009-07-07 20:53:51 -0400 (Tue, 07 Jul 2009) $
 */
package com.vanguard.predicates.string;

import java.util.Arrays;
import java.util.Collection;

import org.apache.commons.collections.Predicate;
import org.apache.commons.lang.StringUtils;

/**
 * Case-insensitive evaluation of whether a String is contained within a collection (array or Collection).
 * <p />
 * <b>Examples:</b><br />
 * <code>
 * Predicate stringInArrayPredicate = StringInArrayOrCollectionPredicate.instanceOf(new String[] {"foo","bar"});<br />
 * stringInArrayPredicate.evaluate("bar") = true <br />
 * stringInArrayPredicate.evaluate("FoO") = true <br />
 * stringInArrayPredicate.evaluate(null) = false <br />
 * stringInArrayPredicate.evaluate(Double.valueOf(1.23)) = false <br />
 * stringInArrayPredicate.evaluate("FOOBAR") = false <br />
 * </code>
 * 
 * @author u16t
 */
public class StringInArrayOrCollectionPredicate implements Predicate {

    private Collection<String> stringCollection;

    StringInArrayOrCollectionPredicate(Collection<String> stringCollection) {
        this.stringCollection = stringCollection;
    }

    public static StringInArrayOrCollectionPredicate instanceOf(String[] stringArray) {
        if (stringArray == null) {
            throw new IllegalArgumentException("Must pass in a non-null String array.");
        }
        return new StringInArrayOrCollectionPredicate(Arrays.asList(stringArray));
    }

    public static StringInArrayOrCollectionPredicate instanceOf(Collection<String> stringCollection) {
        if (stringCollection == null) {
            throw new IllegalArgumentException("Must pass in a non-null String collection.");
        }
        return new StringInArrayOrCollectionPredicate(stringCollection);
    }

    public boolean evaluate(Object object) {
        if (object instanceof String) {
            for (String currentString : stringCollection) {
                if (StringUtils.equalsIgnoreCase(currentString, (String) object)) {
                    return true;
                }
            }
        }
        return false;
    }
}

META-INF	maven		com.vanguard		commons-functors	
pom.properties
#Generated by Apache Maven
#Thu Jun 04 15:27:34 EDT 2015
version=2.0-M20150604-01
groupId=com.vanguard
artifactId=commons-functors


pom.xml
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>com.vanguard.ngsa</groupId>
        <artifactId>parent</artifactId>
        <version>4.0-M20150604-02</version>
    </parent>

    <groupId>com.vanguard</groupId>
    <artifactId>commons-functors</artifactId>
    <version>2.0-M20150604-01</version>
    <packaging>jar</packaging>

    <name>SEE Enterprise Apache Commons Functors</name>
    <description>Project containing reusable Apache Commons functors to be shared with all SI application teams.</description>

    <scm>
        <connection>scm:svn:http://prdsvnrepo:8080/svn/tip/ngsa/projects/project-common-components/commons-functors/tags/2.0-M20150604-01</connection>
        <developerConnection>scm:svn:http://prdsvnrepo:8080/svn/tip/ngsa/projects/project-common-components/commons-functors/tags/2.0-M20150604-01</developerConnection>
    </scm>

          <dependencyManagement>   
                  <dependencies>   
                          <dependency>   
                                  <groupId>com.vanguard.retail</groupId>   
                                  <artifactId>midtier-common-dependencies</artifactId>   
                                  <version>1.0-M20110729-01</version>   
                                  <type>pom</type>   
                                  <scope>import</scope>   
                          </dependency>   
                  </dependencies>   
          </dependencyManagement> 

    <properties>
    	<deployment.type>external</deployment.type> 
    </properties>

	<developers>
	    <developer>
			<id>NGSA</id>
			<name>NGSA</name>
			<email>NGSA@Vanguard.com</email>
	    </developer>
    </developers>    

    <dependencies>
        <!-- Note: do not tie this module to Spring -->
        <dependency>
            <groupId>commons-collections</groupId>
            <artifactId>commons-collections</artifactId>
            <version>3.2</version>
        </dependency>
        <dependency>
            <groupId>commons-lang</groupId>
            <artifactId>commons-lang</artifactId>
            <version>2.2</version>
        </dependency>
    </dependencies>
</project>


MANIFEST.MF

Manifest-Version: 1.0
Van-SonarQube-Quality-Profile: 
Built-By: angsd
Deployment-Type: external
Van-Created-By: u46b
Created-By: Apache Maven 3.2.5
shadowParent: shadowNone
Van-Build-ID: 2015-06-04_15-26-39
Van-Build-Number: 4
Van-SVN-URL: http://prdsvnrepo:8080/svn/tip/ngsa/projects/project-comm
 on-components/commons-functors/trunk
Van-Node-Name: master
Van-SCM-Revision: 389554
Van-Executor-Number: 1
Build-Jdk: 1.6.0_71
Van-Build-Tag: jenkins-commons-functors-vpp30-4
Van-Build-URL: http://ciserver:29999/job/commons-functors-vpp30/4/
Archiver-Version: Plexus Archiver



C:\Users\ubpv\.m2\repository\com\vanguard\vanguard-spring-boot-actuator\1.0.0.COMMON-VGSBACT-6\vanguard-spring-boot-actuator-1.0.0.COMMON-VGSBACT-6.jar

com.vanguard.spring.boot.actuate.autoconfigure
	VanguardEndpointAutoConfiguration.class

/*
 ****************************************************************************
 *
 * Copyright (c)2017 The Vanguard Group of Investment Companies (VGI)
 * All rights reserved.
 *
 * This source code is CONFIDENTIAL and PROPRIETARY to VGI. Unauthorized
 * distribution, adaptation, or use may be subject to civil and criminal
 * penalties.
 *
 ****************************************************************************
 Module Description:

 $HeadURL:$
 $LastChangedRevision:$
 $Author:$
 $LastChangedDate:$
*/
package com.vanguard.spring.boot.actuate.autoconfigure;

import java.util.Arrays;
import java.util.List;

import org.apache.commons.lang3.StringUtils;
import org.springframework.boot.actuate.autoconfigure.EndpointAutoConfiguration;
import org.springframework.boot.autoconfigure.AutoConfigureBefore;
import org.springframework.context.annotation.ConditionContext;
import org.springframework.context.annotation.Conditional;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.ConfigurationCondition;
import org.springframework.context.annotation.PropertySource;
import org.springframework.core.type.AnnotatedTypeMetadata;

/**
 * This class serves as a Vanguard wrapper around spring boot's {@link org.springframework.boot.actuate.autoconfigure.EndpointAutoConfiguration}
 * class.  It exists so that Vanguard can toggle the enablement of the actuator endpoints at runtime based on the RTE.
 * 
 * By default, the actuator endpoints are always disabled and are only enabled for whitelisted RTEs as specified in
 * vanguard-spring-boot-actuator-default.properties.  This behavior can be overridden by specifying the endpoints.enabled
 * property in application.properties.
 * 
 * @author ubn0
 */
@Configuration
@Conditional(VanguardEndpointAutoConfiguration.class)
@AutoConfigureBefore(EndpointAutoConfiguration.class)
@PropertySource("classpath:META-INF/vanguard-spring-boot-actuator/vanguard-spring-boot-actuator-default.properties")
public class VanguardEndpointAutoConfiguration implements ConfigurationCondition {
	
	protected static final String DEFAULT_CONTEXT_PATH = "/spring";

	protected static final String REGEX = ",";

	protected static final String RTEID = "RTEID";

	@Override
	public boolean matches(ConditionContext context, AnnotatedTypeMetadata metadata) {
		setPropertyValueIfNameDoesNotExist(context, Properties.MGMT_SECURITY_ENABLED.getValue(), Boolean.FALSE.toString());
		
		String rawVgWhiteList = getProperty(context, Properties.ENDPOINT_VG_WHITELIST.getValue());
		if (rawVgWhiteList == null) {
			setPropertyValue(Properties.ENDPOINT_ENABLED.getValue(), Boolean.FALSE.toString());
			return false;
		}
		
		String currentRTE = getProperty(context, RTEID);
		List<String> vgWhitelist = Arrays.asList(rawVgWhiteList.split(REGEX));
		if (isWhitelistedRTE(vgWhitelist, currentRTE)) {
			setPropertyValueIfNameDoesNotExist(context, Properties.ENDPOINT_ENABLED.getValue(), Boolean.TRUE.toString());
			setPropertyValueIfNameDoesNotExist(context, Properties.MGMT_CONTEXT_PATH.getValue(), DEFAULT_CONTEXT_PATH);
			return true;
		} else {
			setPropertyValue(Properties.ENDPOINT_ENABLED.getValue(), Boolean.FALSE.toString());
			return false;
		}
	}

	@Override
	public ConfigurationPhase getConfigurationPhase() {
		return ConfigurationPhase.REGISTER_BEAN;
	}
	
	private String setPropertyValueIfNameDoesNotExist(ConditionContext context, String propertyName, String propertyValue) {
		if (StringUtils.isBlank(getProperty(context, propertyName))) {
			return System.setProperty(propertyName, propertyValue);
		}
		return null;
	}
	
	private String setPropertyValue(String propertyName, String propertyValue) {
		return System.setProperty(propertyName, propertyValue);
	}
	
	/**
	 * First check application.properties then check spring-boot-common-default.properties
	 */
	private String getProperty(ConditionContext context, String property) {
		return context.getEnvironment().getProperty(property);
	}
	
	private boolean isWhitelistedRTE(List<String> vgWhiteList, String currentRTE) {
		return vgWhiteList.contains(currentRTE);
	}
	
	/**
	 * Properties defined by application.properties
	 */
	enum Properties {
		MGMT_SECURITY_ENABLED("management.security.enabled"),
		MGMT_CONTEXT_PATH("management.contextPath"),
		ENDPOINT_VG_WHITELIST("endpoints.vanguard.whitelist"),
		ENDPOINT_ENABLED("endpoints.enabled");
		
		private String name;

		Properties(String name) {
			this.name = name;
		}
		
		public String getValue() {
			return name;
		}
		
	}

}

META-INF	maven		com.vanguard		vanguard-spring-boot-actuator
pom.properties
#Generated by Apache Maven
#Wed Jun 07 10:59:01 EDT 2017
version=1.0.0.COMMON-VGSBACT-6
groupId=com.vanguard
artifactId=vanguard-spring-boot-actuator


pom.xml
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<parent>
		<groupId>com.vanguard</groupId>
		<artifactId>nextgen-parent</artifactId>
		<version>(,3.0)</version>
	</parent>

	<groupId>com.vanguard</groupId>
	<artifactId>vanguard-spring-boot-actuator</artifactId>
	<version>1.0.0.COMMON-VGSBACT-6</version>
	<packaging>jar</packaging>

	<name>vanguard-spring-boot-actuator</name>
	<description>Vanguard wrapper around spring-boot-starter-actuator</description>

	<scm>
		<connection>scm:git:http://stash.vanguard.com:7990/scm/common/vanguard-spring-boot-actuator.git</connection>
		<developerConnection>scm:git:http://stash.vanguard.com:7990/scm/common/vanguard-spring-boot-actuator.git</developerConnection>
	</scm>
	
	<developers>
		<developer>
			<id>ubn0</id>
			<name>Carson Black</name>
			<roles>
				<role>Technical Lead</role>
			</roles>
		</developer>
	</developers>

	<properties>
		<mats.module.type>technical-service-impl</mats.module.type>
		<mats.business.capability>Technical Service</mats.business.capability>
		<springBoot.version>1.2.2.RELEASE</springBoot.version>
	</properties>

	<dependencyManagement>
		<dependencies>
			<!-- Spring Boot BOM POM -->
			<dependency>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-dependencies</artifactId>
				<version>${springBoot.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
        <dependency>
            <groupId>com.vanguard</groupId>
            <artifactId>vanguard-spring-core-spring-4</artifactId>
            <version>1.0-M20151103-01</version>
        </dependency>
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-lang3</artifactId>
			<version>3.5</version>
		</dependency>

		<!-- Testing Categories -->
		<dependency>
			<groupId>com.vanguard</groupId>
			<artifactId>junit-dependencies</artifactId>
			<version>2.2-M20150123-01</version>
			<type>pom</type>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.mockito</groupId>
			<artifactId>mockito-core</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>

</project>


vanguard-spring-boot-actuator	
spring-bootstrap.xml
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:cache="http://www.springframework.org/schema/cache"
	 xmlns:config="http://www.vanguard.com/schema/config"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
              http://www.springframework.org/schema/beans/spring-beans.xsd
              http://www.springframework.org/schema/context
              http://www.springframework.org/schema/context/spring-context.xsd
              http://www.springframework.org/schema/cache 
        	  http://www.springframework.org/schema/cache/spring-cache.xsd
        	  http://www.vanguard.com/schema/config 
              http://www.vanguard.com/schema/config/vanguard-config.xsd">

	<config:vanguard-property-placeholder moduleId="vanguard.spring.boot.actuator" />
	
	<context:component-scan base-package="com.vanguard.spring.boot.actuate" />
</beans>

vanguard-spring-boot-actuator-default.properties
endpoints.vanguard.whitelist=deve,inte,satf,catp,prfp

MANIFEST.MF
Manifest-Version: 1.0
Van-SCM-Revision: 7ecd870ea09a58011a8f9d49be1718e886342fea
Van-SVN-URL: ssh://git@stash.vanguard.com:7999/common/vanguard-spring-
 boot-actuator.git
Archiver-Version: Plexus Archiver
Built-By: acded
Deployment-Type: 
Van-Build-URL: http://bamboo.vanguard.com:8085/browse/COMMON-VGSBACT-J
 OB1-6
Van-Created-By: 
Van-Node-Name: 172654612
Van-Build-Number: 6
shadowParent: shadowNone
Van-Executor-Number: bamboo-build
Van-SonarQube-Quality-Profile: 
Van-Build-ID: 2017-06-07T10:57:25.036-04:00
Created-By: Apache Maven 3.2.5
Build-Jdk: 1.8.0_40
Van-Build-Tag: Common Libraries - vanguard-spring-boot-actuator - Buil
 d



dependencyClasspath.txt
/opt/vgi/cto/bamboo/agents/bamboo-agent-5/xml-data/build-dir/maven-repos/localrepo/org/springframework/boot/spring-boot-starter-actuator/1.2.2.RELEASE/spring-boot-starter-actuator-1.2.2.RELEASE.jar:/opt/vgi/cto/bamboo/agents/bamboo-agent-5/xml-data/build-dir/maven-repos/localrepo/org/springframework/boot/spring-boot-starter/1.2.2.RELEASE/spring-boot-starter-1.2.2.RELEASE.jar:/opt/vgi/cto/bamboo/agents/bamboo-agent-5/xml-data/build-dir/maven-repos/localrepo/org/springframework/boot/spring-boot/1.2.2.RELEASE/spring-boot-1.2.2.RELEASE.jar:/opt/vgi/cto/bamboo/agents/bamboo-agent-5/xml-data/build-dir/maven-repos/localrepo/org/springframework/boot/spring-boot-autoconfigure/1.2.2.RELEASE/spring-boot-autoconfigure-1.2.2.RELEASE.jar:/opt/vgi/cto/bamboo/agents/bamboo-agent-5/xml-data/build-dir/maven-repos/localrepo/org/springframework/boot/spring-boot-starter-logging/1.2.2.RELEASE/spring-boot-starter-logging-1.2.2.RELEASE.jar:/opt/vgi/cto/bamboo/agents/bamboo-agent-5/xml-data/build-dir/maven-repos/localrepo/org/slf4j/jcl-over-slf4j/1.7.10/jcl-over-slf4j-1.7.10.jar:/opt/vgi/cto/bamboo/agents/bamboo-agent-5/xml-data/build-dir/maven-repos/localrepo/org/slf4j/jul-to-slf4j/1.7.10/jul-to-slf4j-1.7.10.jar:/opt/vgi/cto/bamboo/agents/bamboo-agent-5/xml-data/build-dir/maven-repos/localrepo/org/slf4j/log4j-over-slf4j/1.7.10/log4j-over-slf4j-1.7.10.jar:/opt/vgi/cto/bamboo/agents/bamboo-agent-5/xml-data/build-dir/maven-repos/localrepo/ch/qos/logback/logback-classic/1.1.2/logback-classic-1.1.2.jar:/opt/vgi/cto/bamboo/agents/bamboo-agent-5/xml-data/build-dir/maven-repos/localrepo/ch/qos/logback/logback-core/1.1.2/logback-core-1.1.2.jar:/opt/vgi/cto/bamboo/agents/bamboo-agent-5/xml-data/build-dir/maven-repos/localrepo/org/yaml/snakeyaml/1.14/snakeyaml-1.14.jar:/opt/vgi/cto/bamboo/agents/bamboo-agent-5/xml-data/build-dir/maven-repos/localrepo/org/springframework/boot/spring-boot-actuator/1.2.2.RELEASE/spring-boot-actuator-1.2.2.RELEASE.jar:/opt/vgi/cto/bamboo/agents/bamboo-agent-5/xml-data/build-dir/maven-repos/localrepo/org/springframework/spring-core/4.1.5.RELEASE/spring-core-4.1.5.RELEASE.jar:/opt/vgi/cto/bamboo/agents/bamboo-agent-5/xml-data/build-dir/maven-repos/localrepo/org/springframework/boot/spring-boot-starter-web/1.2.2.RELEASE/spring-boot-starter-web-1.2.2.RELEASE.jar:/opt/vgi/cto/bamboo/agents/bamboo-agent-5/xml-data/build-dir/maven-repos/localrepo/org/springframework/boot/spring-boot-starter-tomcat/1.2.2.RELEASE/spring-boot-starter-tomcat-1.2.2.RELEASE.jar:/opt/vgi/cto/bamboo/agents/bamboo-agent-5/xml-data/build-dir/maven-repos/localrepo/org/apache/tomcat/embed/tomcat-embed-core/8.0.20/tomcat-embed-core-8.0.20.jar:/opt/vgi/cto/bamboo/agents/bamboo-agent-5/xml-data/build-dir/maven-repos/localrepo/org/apache/tomcat/embed/tomcat-embed-el/8.0.20/tomcat-embed-el-8.0.20.jar:/opt/vgi/cto/bamboo/agents/bamboo-agent-5/xml-data/build-dir/maven-repos/localrepo/org/apache/tomcat/embed/tomcat-embed-logging-juli/8.0.20/tomcat-embed-logging-juli-8.0.20.jar:/opt/vgi/cto/bamboo/agents/bamboo-agent-5/xml-data/build-dir/maven-repos/localrepo/org/apache/tomcat/embed/tomcat-embed-websocket/8.0.20/tomcat-embed-websocket-8.0.20.jar:/opt/vgi/cto/bamboo/agents/bamboo-agent-5/xml-data/build-dir/maven-repos/localrepo/com/fasterxml/jackson/core/jackson-databind/2.4.5/jackson-databind-2.4.5.jar:/opt/vgi/cto/bamboo/agents/bamboo-agent-5/xml-data/build-dir/maven-repos/localrepo/com/fasterxml/jackson/core/jackson-annotations/2.4.5/jackson-annotations-2.4.5.jar:/opt/vgi/cto/bamboo/agents/bamboo-agent-5/xml-data/build-dir/maven-repos/localrepo/com/fasterxml/jackson/core/jackson-core/2.4.5/jackson-core-2.4.5.jar:/opt/vgi/cto/bamboo/agents/bamboo-agent-5/xml-data/build-dir/maven-repos/localrepo/org/hibernate/hibernate-validator/5.1.3.Final/hibernate-validator-5.1.3.Final.jar:/opt/vgi/cto/bamboo/agents/bamboo-agent-5/xml-data/build-dir/maven-repos/localrepo/javax/validation/validation-api/1.1.0.Final/validation-api-1.1.0.Final.jar:/opt/vgi/cto/bamboo/agents/bamboo-agent-5/xml-data/build-dir/maven-repos/localrepo/org/jboss/logging/jboss-logging/3.1.3.GA/jboss-logging-3.1.3.GA.jar:/opt/vgi/cto/bamboo/agents/bamboo-agent-5/xml-data/build-dir/maven-repos/localrepo/com/fasterxml/classmate/1.0.0/classmate-1.0.0.jar:/opt/vgi/cto/bamboo/agents/bamboo-agent-5/xml-data/build-dir/maven-repos/localrepo/org/springframework/spring-web/4.1.5.RELEASE/spring-web-4.1.5.RELEASE.jar:/opt/vgi/cto/bamboo/agents/bamboo-agent-5/xml-data/build-dir/maven-repos/localrepo/org/springframework/spring-aop/4.1.5.RELEASE/spring-aop-4.1.5.RELEASE.jar:/opt/vgi/cto/bamboo/agents/bamboo-agent-5/xml-data/build-dir/maven-repos/localrepo/aopalliance/aopalliance/1.0/aopalliance-1.0.jar:/opt/vgi/cto/bamboo/agents/bamboo-agent-5/xml-data/build-dir/maven-repos/localrepo/org/springframework/spring-webmvc/4.1.5.RELEASE/spring-webmvc-4.1.5.RELEASE.jar:/opt/vgi/cto/bamboo/agents/bamboo-agent-5/xml-data/build-dir/maven-repos/localrepo/org/springframework/spring-expression/4.1.5.RELEASE/spring-expression-4.1.5.RELEASE.jar:/opt/vgi/cto/bamboo/agents/bamboo-agent-5/xml-data/build-dir/maven-repos/localrepo/com/vanguard/vanguard-spring-core-spring-4/1.0-M20151103-01/vanguard-spring-core-spring-4-1.0-M20151103-01.jar:/opt/vgi/cto/bamboo/agents/bamboo-agent-5/xml-data/build-dir/maven-repos/localrepo/org/springframework/spring-context/4.1.5.RELEASE/spring-context-4.1.5.RELEASE.jar:/opt/vgi/cto/bamboo/agents/bamboo-agent-5/xml-data/build-dir/maven-repos/localrepo/org/springframework/spring-beans/4.1.5.RELEASE/spring-beans-4.1.5.RELEASE.jar:/opt/vgi/cto/bamboo/agents/bamboo-agent-5/xml-data/build-dir/maven-repos/localrepo/commons-collections/commons-collections/3.2.1/commons-collections-3.2.1.jar:/opt/vgi/cto/bamboo/agents/bamboo-agent-5/xml-data/build-dir/maven-repos/localrepo/commons-io/commons-io/1.3.1/commons-io-1.3.1.jar:/opt/vgi/cto/bamboo/agents/bamboo-agent-5/xml-data/build-dir/maven-repos/localrepo/javax/annotation/jsr250-api/1.0/jsr250-api-1.0.jar:/opt/vgi/cto/bamboo/agents/bamboo-agent-5/xml-data/build-dir/maven-repos/localrepo/com/vanguard/corp/vault-impl/1.0-M20150106-01/vault-impl-1.0-M20150106-01.jar:/opt/vgi/cto/bamboo/agents/bamboo-agent-5/xml-data/build-dir/maven-repos/localrepo/com/vanguard/corp/vault-api/1.0-M20150106-01/vault-api-1.0-M20150106-01.jar:/opt/vgi/cto/bamboo/agents/bamboo-agent-5/xml-data/build-dir/maven-repos/localrepo/com/cyberark/javapasswordsdk/7.0/javapasswordsdk-7.0.jar:/opt/vgi/cto/bamboo/agents/bamboo-agent-5/xml-data/build-dir/maven-repos/localrepo/com/vanguard/commons-functors/2.0-M20150604-01/commons-functors-2.0-M20150604-01.jar:/opt/vgi/cto/bamboo/agents/bamboo-agent-5/xml-data/build-dir/maven-repos/localrepo/commons-lang/commons-lang/2.2/commons-lang-2.2.jar:/opt/vgi/cto/bamboo/agents/bamboo-agent-5/xml-data/build-dir/maven-repos/localrepo/org/slf4j/slf4j-api/1.7.10/slf4j-api-1.7.10.jar:/opt/vgi/cto/bamboo/agents/bamboo-agent-5/xml-data/build-dir/maven-repos/localrepo/org/apache/commons/commons-lang3/3.5/commons-lang3-3.5.jar:/opt/vgi/cto/bamboo/agents/bamboo-agent-5/xml-data/build-dir/maven-repos/localrepo/com/vanguard/junit-dependencies/2.2-M20150123-01/junit-dependencies-2.2-M20150123-01.pom:/opt/vgi/cto/bamboo/agents/bamboo-agent-5/xml-data/build-dir/maven-repos/localrepo/junit/junit/4.12/junit-4.12.jar:/opt/vgi/cto/bamboo/agents/bamboo-agent-5/xml-data/build-dir/maven-repos/localrepo/org/powermock/powermock-easymock-release-full/1.5.5/powermock-easymock-release-full-1.5.5-full.jar:/opt/vgi/cto/bamboo/agents/bamboo-agent-5/xml-data/build-dir/maven-repos/localrepo/org/powermock/powermock-core/1.5.5/powermock-core-1.5.5.jar:/opt/vgi/cto/bamboo/agents/bamboo-agent-5/xml-data/build-dir/maven-repos/localrepo/org/javassist/javassist/3.18.1-GA/javassist-3.18.1-GA.jar:/opt/vgi/cto/bamboo/agents/bamboo-agent-5/xml-data/build-dir/maven-repos/localrepo/org/powermock/powermock-api-easymock/1.5.5/powermock-api-easymock-1.5.5.jar:/opt/vgi/cto/bamboo/agents/bamboo-agent-5/xml-data/build-dir/maven-repos/localrepo/org/powermock/powermock-module-junit4-common/1.5.5/powermock-module-junit4-common-1.5.5.jar:/opt/vgi/cto/bamboo/agents/bamboo-agent-5/xml-data/build-dir/maven-repos/localrepo/org/powermock/powermock-module-junit4/1.5.5/powermock-module-junit4-1.5.5.jar:/opt/vgi/cto/bamboo/agents/bamboo-agent-5/xml-data/build-dir/maven-repos/localrepo/org/powermock/powermock-module-junit4-legacy/1.5.5/powermock-module-junit4-legacy-1.5.5.jar:/opt/vgi/cto/bamboo/agents/bamboo-agent-5/xml-data/build-dir/maven-repos/localrepo/org/powermock/powermock-module-junit3/1.5.5/powermock-module-junit3-1.5.5.jar:/opt/vgi/cto/bamboo/agents/bamboo-agent-5/xml-data/build-dir/maven-repos/localrepo/org/powermock/powermock-reflect/1.5.5/powermock-reflect-1.5.5.jar:/opt/vgi/cto/bamboo/agents/bamboo-agent-5/xml-data/build-dir/maven-repos/localrepo/org/powermock/powermock-api-support/1.5.5/powermock-api-support-1.5.5.jar:/opt/vgi/cto/bamboo/agents/bamboo-agent-5/xml-data/build-dir/maven-repos/localrepo/org/powermock/powermock-module-testng/1.5.5/powermock-module-testng-1.5.5.jar:/opt/vgi/cto/bamboo/agents/bamboo-agent-5/xml-data/build-dir/maven-repos/localrepo/org/powermock/powermock-module-testng-common/1.5.5/powermock-module-testng-common-1.5.5.jar:/opt/vgi/cto/bamboo/agents/bamboo-agent-5/xml-data/build-dir/maven-repos/localrepo/org/powermock/powermock-classloading-base/1.5.5/powermock-classloading-base-1.5.5.jar:/opt/vgi/cto/bamboo/agents/bamboo-agent-5/xml-data/build-dir/maven-repos/localrepo/org/powermock/powermock-core/1.5.5/powermock-core-1.5.5-sources.jar:/opt/vgi/cto/bamboo/agents/bamboo-agent-5/xml-data/build-dir/maven-repos/localrepo/org/powermock/powermock-api-easymock/1.5.5/powermock-api-easymock-1.5.5-sources.jar:/opt/vgi/cto/bamboo/agents/bamboo-agent-5/xml-data/build-dir/maven-repos/localrepo/org/powermock/powermock-module-junit4-common/1.5.5/powermock-module-junit4-common-1.5.5-sources.jar:/opt/vgi/cto/bamboo/agents/bamboo-agent-5/xml-data/build-dir/maven-repos/localrepo/org/powermock/powermock-module-junit4/1.5.5/powermock-module-junit4-1.5.5-sources.jar:/opt/vgi/cto/bamboo/agents/bamboo-agent-5/xml-data/build-dir/maven-repos/localrepo/org/powermock/powermock-module-junit4-legacy/1.5.5/powermock-module-junit4-legacy-1.5.5-sources.jar:/opt/vgi/cto/bamboo/agents/bamboo-agent-5/xml-data/build-dir/maven-repos/localrepo/org/powermock/powermock-module-junit3/1.5.5/powermock-module-junit3-1.5.5-sources.jar:/opt/vgi/cto/bamboo/agents/bamboo-agent-5/xml-data/build-dir/maven-repos/localrepo/org/powermock/powermock-module-testng/1.5.5/powermock-module-testng-1.5.5-sources.jar:/opt/vgi/cto/bamboo/agents/bamboo-agent-5/xml-data/build-dir/maven-repos/localrepo/org/powermock/powermock-reflect/1.5.5/powermock-reflect-1.5.5-sources.jar:/opt/vgi/cto/bamboo/agents/bamboo-agent-5/xml-data/build-dir/maven-repos/localrepo/org/powermock/powermock-api-support/1.5.5/powermock-api-support-1.5.5-sources.jar:/opt/vgi/cto/bamboo/agents/bamboo-agent-5/xml-data/build-dir/maven-repos/localrepo/org/powermock/powermock-classloading-base/1.5.5/powermock-classloading-base-1.5.5-sources.jar:/opt/vgi/cto/bamboo/agents/bamboo-agent-5/xml-data/build-dir/maven-repos/localrepo/org/easymock/easymock/3.1/easymock-3.1.jar:/opt/vgi/cto/bamboo/agents/bamboo-agent-5/xml-data/build-dir/maven-repos/localrepo/cglib/cglib-nodep/2.2.2/cglib-nodep-2.2.2.jar:/opt/vgi/cto/bamboo/agents/bamboo-agent-5/xml-data/build-dir/maven-repos/localrepo/org/powermock/powermock-module-junit4-rule-agent/1.5.5/powermock-module-junit4-rule-agent-1.5.5.jar:/opt/vgi/cto/bamboo/agents/bamboo-agent-5/xml-data/build-dir/maven-repos/localrepo/org/powermock/powermock-module-javaagent/1.5.5/powermock-module-javaagent-1.5.5.jar:/opt/vgi/cto/bamboo/agents/bamboo-agent-5/xml-data/build-dir/maven-repos/localrepo/org/springframework/spring-test/4.1.5.RELEASE/spring-test-4.1.5.RELEASE.jar:/opt/vgi/cto/bamboo/agents/bamboo-agent-5/xml-data/build-dir/maven-repos/localrepo/org/jacoco/org.jacoco.agent/0.6.2.201302030002/org.jacoco.agent-0.6.2.201302030002.jar:/opt/vgi/cto/bamboo/agents/bamboo-agent-5/xml-data/build-dir/maven-repos/localrepo/org/mockito/mockito-core/1.10.19/mockito-core-1.10.19.jar:/opt/vgi/cto/bamboo/agents/bamboo-agent-5/xml-data/build-dir/maven-repos/localrepo/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar:/opt/vgi/cto/bamboo/agents/bamboo-agent-5/xml-data/build-dir/maven-repos/localrepo/org/objenesis/objenesis/2.1/objenesis-2.1.jar:/opt/vgi/cto/bamboo/agents/bamboo-agent-5/xml-data/build-dir/maven-repos/localrepo/com/vanguard/test/vanguard-test/1.0.0-M20150812-01/vanguard-test-1.0.0-M20150812-01.jar

C:\Users\ubpv\.m2\repository\com\vanguard\validation\vanguard-validator\1.1.0.COMMON-VANVAL-13\vanguard-validator-1.1.0.COMMON-VANVAL-13.jar
com.vanguard.validator.constraints
	SafeString.class
/*
 ****************************************************************************
 *
 * Copyright (c)2014 The Vanguard Group of Investment Companies (VGI)
 * All rights reserved.
 *
 * This source code is CONFIDENTIAL and PROPRIETARY to VGI. Unauthorized
 * distribution, adaptation, or use may be subject to civil and criminal
 * penalties.
 *
 ****************************************************************************
*/
package com.vanguard.validator.constraints;

import java.lang.annotation.Documented;
import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;

import javax.validation.Constraint;
import javax.validation.Payload;

import com.vanguard.validator.internal.constraintvalidators.SafeStringValidator;
import com.vanguard.validator.internal.iterablevalidators.SafeStringIterableValidator;

/**
 * Indicates that the value must be a valid <strong>safe string</strong>
 * containing a minimal character set.
 *
 * <p><strong>For example:</strong> {@code Hello world}</p>
 *
 * <p>A safe string can contain <a href="http://en.wikipedia.org/wiki/Alphanumeric">Alphanumeric</a>
 * characters in addition to the following <a href="http://en.wikipedia.org/wiki/UTF-8#Codepage_layout">UTF-8</a>
 * characters.</p>
 *
 * <table summary="Additional allowed characters">
 *     <thead>
 *         <tr><th>Character</th><th align="left">Unicode code point</th><th align="left">Description</th></tr>
 *     </thead>
 *     <tbody>
 *         <tr><th> </th><td>U+0020</td><td>SPACE</td></tr>
 *         <tr><th>.</th><td>U+002E</td><td>FULL STOP</td></tr>
 *     </tbody>
 * </table>
 *
 * <p>This annotation provides an <strong>allow</strong> parameter that can be
 * used to allow additional characters.</p>
 *
 * <p>{@code @SafeString(allow="â€”"))}</p>
 *
 * <p>The ", ', &amp;, &lt;, and &gt; characters are not allowed for use with @SafeString
 * as additional characters and will be ignored if passed in.</p>
 *
 * <p>{@link Text} should be used if you want to start with an open character set and deny specific characters.</p>
 *
 * <p>{@link SafeHtml} should be used if you want to accept the full character set with no exceptions.</p>
 *
 * <p>Support for additional <a href="http://en.wikipedia.org/wiki/Unicode">Unicode</a>
 * characters can be enabled by setting the {@link LocaleType} for this annotation.</p>
 *
 * <p>{@code @SafeString(locale=LocaleType.GLOBAL)}</p>
 *
 * <p>This allows any letter from any language such as the Ã  character.</p>
 *
 * <p>{@code null} elements are considered valid</p>
 *
 * @author <a href="http://crewnet.vanguard.com/CrewNetPortal/CrewSearch?id=021139">Jamie Eberly</a>
 * @see SafeStringValidator
 * @see Text
 * @see SafeHtml
 */
@Documented
@Constraint(validatedBy = {SafeStringValidator.class, SafeStringIterableValidator.class})
@Target({ElementType.METHOD, ElementType.FIELD, ElementType.ANNOTATION_TYPE, ElementType.CONSTRUCTOR, ElementType.PARAMETER})
@Retention(RetentionPolicy.RUNTIME)
public @interface SafeString {

    /**
     * @return message for this constraint.
     */
    String message() default "{com.vanguard.validator.constraints.SafeString.message}";

    /**
     * @return groups for this constraint.
     */
    Class<?>[] groups() default {};

    /**
     * @return payload for this constraint.
     */
    Class<? extends Payload>[] payload() default {};

    /**
     * @return {@link LocaleType} for this constraint.
     */
    LocaleType locale() default LocaleType.US;

    /**
     * @return min size for this constraint.
     */
    int min() default 1;

    /**
     * @return max size for this constraint.
     */
    int max() default Integer.MAX_VALUE;

    /**
     * @return Additional characters to allow.
     */
    String allow() default "";

    /**
     * Defines several {@code @SafeString} annotations on the same element.
     */
    @Target({ElementType.METHOD, ElementType.FIELD, ElementType.ANNOTATION_TYPE, ElementType.CONSTRUCTOR, ElementType.PARAMETER})
    @Retention(RetentionPolicy.RUNTIME)
    @Documented
    public @interface List {
        /**
         * @return list value for this constraint.
         */
        SafeString[] value();
    }

}

com.vanguard.validator.internal.constraintvalidators
	SafeStringValidator.class

/*
 ****************************************************************************
 *
 * Copyright (c)2014 The Vanguard Group of Investment Companies (VGI)
 * All rights reserved.
 *
 * This source code is CONFIDENTIAL and PROPRIETARY to VGI. Unauthorized
 * distribution, adaptation, or use may be subject to civil and criminal
 * penalties.
 *
 ****************************************************************************
*/
package com.vanguard.validator.internal.constraintvalidators;

import javax.validation.ConstraintValidator;
import javax.validation.ConstraintValidatorContext;

import org.owasp.esapi.ESAPI;

import com.vanguard.validator.constraints.LocaleType;
import com.vanguard.validator.constraints.SafeString;

/**
 * Checks that a given value is a safe string.
 * Delegates to {@code ESAPI.validator().isValidInput(String context, String input, String type, int maxLength, boolean allowNull)}
 *
 * <p>Package names marked with "internal" are for implementation-only and
 * should not be used directly.</p>
 *
 * @author <a href="http://crewnet.vanguard.com/CrewNetPortal/CrewSearch?id=021139">Jamie Eberly</a>
 * @see <a href="https://www.owasp.org/index.php/ESAPI_Overview">https://www.owasp.org/index.php/ESAPI_Overview</a>
 */
public class SafeStringValidator implements ConstraintValidator<SafeString, String> {

    LocaleType locale = LocaleType.US;
    int min = 1;
    int max = Integer.MAX_VALUE;
    String allow = null;

    /**
     * {@inheritDoc}
     */
    @Override
    public void initialize(SafeString constraintAnnotation) {
        this.locale = constraintAnnotation.locale();
        this.min = constraintAnnotation.min();
        this.max = constraintAnnotation.max();
        this.setAllow(constraintAnnotation.allow());
    }

    /*
     * The allow value is not allowed to contain specific
     * XML/HTML entity characters. If set, they are ignored
     * by being replaced with empty strings. The resulting
     * value is then escaped for insertion into the regex
     * value.
     */
    void setAllow(String value) {
        this.allow = (value != null && !value.isEmpty())
            ? String.format("(?s)[%s]", escapeCharactersForRegex(value.replaceAll("(?s)[\"'&<>]", "")))
            : null;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public boolean isValid(String value, ConstraintValidatorContext context) {
        if (value == null || value.length() == 0) {
            return true;
        }
        final String key = locale.key("SafeString");
        return value.length() >= min && (
            (this.allow != null && ESAPI.validator().isValidInput("@SafeString", value.replaceAll(this.allow, ""), key, max, true))
            || ESAPI.validator().isValidInput("@SafeString", value, key, max, false));
    }

    /*
     * Escapes the specified string of characters to be
     * used in a regex replacement.
     * @param value
     * @return
     */
    static final String escapeCharactersForRegex(String value) {
        return value.replaceAll("([\\\\\\.\\[\\]\\{\\}\\(\\)\\*\\+\\-\\?\\^\\$\\|])", "\\\\$1");
    }

}

com.vanguard.validator.internal.iterablevalidators
	SafeStringIterableValidator.class
/*
 ****************************************************************************
 *
 * Copyright (c)2014 The Vanguard Group of Investment Companies (VGI)
 * All rights reserved.
 *
 * This source code is CONFIDENTIAL and PROPRIETARY to VGI. Unauthorized
 * distribution, adaptation, or use may be subject to civil and criminal
 * penalties.
 *
 ****************************************************************************
*/
package com.vanguard.validator.internal.iterablevalidators;

import javax.validation.ConstraintValidator;

import com.vanguard.validator.constraints.SafeString;
import com.vanguard.validator.internal.constraintvalidators.SafeStringValidator;

/**
 * An {@link IterableValidator} checking that a given {@link Iterable} contains well-formed safe strings.
 *
 * <p>Package names marked with "internal" are for implementation-only and
 * should not be used directly.</p>
 *
 * @author <a href="http://crewnet.vanguard.com/CrewNetPortal/CrewSearch?id=021139">Jamie Eberly</a>
 */
public class SafeStringIterableValidator extends IterableValidator<SafeString> {

    /**
     * {@inheritDoc}
     */
    @Override
    public ConstraintValidator<SafeString, String> getValidator() {
        return new SafeStringValidator();
    }

}


